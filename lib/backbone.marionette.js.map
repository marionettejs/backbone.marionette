{"version":3,"file":"backbone.marionette.js","sources":["src/utils/proxy.js","src/utils/extend.js","src/utils/deprecate.js","src/common/is-node-attached.js","src/common/merge-options.js","src/common/get-option.js","src/common/normalize-methods.js","src/common/trigger-method.js","src/common/monitor-view-events.js","src/error.js","src/common/bind-events.js","src/common/bind-requests.js","src/utils/set-options.js","src/mixins/common.js","src/mixins/radio.js","src/object.js","src/template-cache.js","src/utils/invoke.js","src/mixins/behaviors.js","src/mixins/delegate-entity-events.js","src/utils/get-unique-event-name.js","src/config/features.js","src/mixins/triggers.js","src/mixins/ui.js","src/config/dom.js","src/mixins/view.js","src/common/view.js","src/region.js","src/common/build-region.js","src/mixins/regions.js","src/config/renderer.js","src/view.js","src/utils/emulate-collection.js","src/child-view-container.js","src/collection-view.js","src/next-child-view-container.js","src/next-collection-view.js","src/composite-view.js","src/behavior.js","src/application.js","src/app-router.js","src/config/behaviors-lookup.js","src/backbone.marionette.js"],"sourcesContent":["//Internal utility for creating context style global utils\nconst proxy = function(method) {\n  return function(context, ...args) {\n    return method.apply(context, args);\n  };\n};\n\nexport default proxy;\n","// Marionette.extend\n// -----------------\n\nimport Backbone from 'backbone';\n\n// Borrow the Backbone `extend` method so we can use it as needed\nconst extend = Backbone.Model.extend;\n\nexport default extend;\n","/* global console */\n\nimport _ from 'underscore';\n\nimport Marionette from '../backbone.marionette';\n\nconst deprecate = function(message, test) {\n  if (_.isObject(message)) {\n    message = (\n      message.prev + ' is going to be removed in the future. ' +\n      'Please use ' + message.next + ' instead.' +\n      (message.url ? ' See: ' + message.url : '')\n    );\n  }\n\n  if (!Marionette.DEV_MODE) {\n    return;\n  }\n\n  if ((test === undefined || !test) && !deprecate._cache[message]) {\n    deprecate._warn('Deprecation warning: ' + message);\n    deprecate._cache[message] = true;\n  }\n};\n\n/* istanbul ignore next: can't clear console */\ndeprecate._console = typeof console !== 'undefined' ? console : {};\ndeprecate._warn = function() {\n  const warn = deprecate._console.warn || deprecate._console.log || _.noop;\n  return warn.apply(deprecate._console, arguments);\n};\ndeprecate._cache = {};\n\nexport default deprecate;\n","// Marionette.isNodeAttached\n// -------------------------\n\n// Determine if `el` is a child of the document\nconst isNodeAttached = function(el) {\n  return document.documentElement.contains(el && el.parentNode);\n};\n\nexport default isNodeAttached;\n","import _ from 'underscore';\n\n// Merge `keys` from `options` onto `this`\nconst mergeOptions = function(options, keys) {\n  if (!options) { return; }\n\n  _.each(keys, (key) => {\n    const option = options[key];\n    if (option !== undefined) {\n      this[key] = option;\n    }\n  });\n};\n\nexport default mergeOptions;\n","// Marionette.getOption\n// --------------------\n\n// Retrieve an object, function or other value from the\n// object or its `options`, with `options` taking precedence.\nconst getOption = function(optionName) {\n  if (!optionName) { return; }\n  if (this.options && (this.options[optionName] !== undefined)) {\n    return this.options[optionName];\n  } else {\n    return this[optionName];\n  }\n};\n\nexport default getOption;\n","import _ from 'underscore';\n\n// Marionette.normalizeMethods\n// ----------------------\n\n// Pass in a mapping of events => functions or function names\n// and return a mapping of events => functions\nconst normalizeMethods = function(hash) {\n  return _.reduce(hash, (normalizedHash, method, name) => {\n    if (!_.isFunction(method)) {\n      method = this[method];\n    }\n    if (method) {\n      normalizedHash[name] = method;\n    }\n    return normalizedHash;\n  }, {});\n};\n\nexport default normalizeMethods;\n","// Trigger Method\n// --------------\n\nimport _ from 'underscore';\nimport getOption from './get-option';\n\n// split the event name on the \":\"\nconst splitter = /(^|:)(\\w)/gi;\n\n// take the event section (\"section1:section2:section3\")\n// and turn it in to uppercase name onSection1Section2Section3\nfunction getEventName(match, prefix, eventName) {\n  return eventName.toUpperCase();\n}\n\nconst getOnMethodName = _.memoize(function(event) {\n  return 'on' + event.replace(splitter, getEventName);\n});\n\n// Trigger an event and/or a corresponding method name. Examples:\n//\n// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n// call the \"onFoo\" method.\n//\n// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n// call the \"onFooBar\" method.\nexport function triggerMethod(event, ...args) {\n  // get the method name from the event name\n  const methodName = getOnMethodName(event);\n  const method = getOption.call(this, methodName);\n  let result;\n\n  // call the onMethodName if it exists\n  if (_.isFunction(method)) {\n    // pass all args, except the event name\n    result = method.apply(this, args);\n  }\n\n  // trigger the event\n  this.trigger.apply(this, arguments);\n\n  return result;\n}\n\n// triggerMethodOn invokes triggerMethod on a specific context\n//\n// e.g. `Marionette.triggerMethodOn(view, 'show')`\n// will trigger a \"show\" event or invoke onShow the view.\nexport function triggerMethodOn(context, ...args) {\n  if (_.isFunction(context.triggerMethod)) {\n    return context.triggerMethod.apply(context, args);\n  }\n\n  return triggerMethod.apply(context, args);\n}\n","// DOM Refresh\n// -----------\n\nimport _ from 'underscore';\nimport { triggerMethodOn } from './trigger-method';\n\n// Trigger method on children unless a pure Backbone.View\nfunction triggerMethodChildren(view, event, shouldTrigger) {\n  if (!view._getImmediateChildren) { return; }\n  _.each(view._getImmediateChildren(), child => {\n    if (!shouldTrigger(child)) { return; }\n    triggerMethodOn(child, event, child);\n  });\n}\n\nfunction shouldTriggerAttach(view) {\n  return !view._isAttached;\n}\n\nfunction shouldAttach(view) {\n  if (!shouldTriggerAttach(view)) { return false; }\n  view._isAttached = true;\n  return true;\n}\n\nfunction shouldTriggerDetach(view) {\n  return view._isAttached;\n}\n\nfunction shouldDetach(view) {\n  if (!shouldTriggerDetach(view)) { return false; }\n  view._isAttached = false;\n  return true;\n}\n\nfunction triggerDOMRefresh(view) {\n  if (view._isAttached && view._isRendered) {\n    triggerMethodOn(view, 'dom:refresh', view);\n  }\n}\n\nfunction triggerDOMRemove(view) {\n  if (view._isAttached && view._isRendered) {\n    triggerMethodOn(view, 'dom:remove', view);\n  }\n}\n\nfunction handleBeforeAttach() {\n  triggerMethodChildren(this, 'before:attach', shouldTriggerAttach);\n}\n\nfunction handleAttach() {\n  triggerMethodChildren(this, 'attach', shouldAttach);\n  triggerDOMRefresh(this);\n}\n\nfunction handleBeforeDetach() {\n  triggerMethodChildren(this, 'before:detach', shouldTriggerDetach);\n  triggerDOMRemove(this);\n}\n\nfunction handleDetach() {\n  triggerMethodChildren(this, 'detach', shouldDetach);\n}\n\nfunction handleBeforeRender() {\n  triggerDOMRemove(this);\n}\n\nfunction handleRender() {\n  triggerDOMRefresh(this);\n}\n\n// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n// whenever a rendered view is attached or an attached view is rendered.\nfunction monitorViewEvents(view) {\n  if (view._areViewEventsMonitored || view.monitorViewEvents === false) { return; }\n\n  view._areViewEventsMonitored = true;\n\n  view.on({\n    'before:attach': handleBeforeAttach,\n    'attach': handleAttach,\n    'before:detach': handleBeforeDetach,\n    'detach': handleDetach,\n    'before:render': handleBeforeRender,\n    'render': handleRender\n  });\n}\n\nexport default monitorViewEvents;\n","// Error\n// -----\n\nimport _ from 'underscore';\nimport extend from './utils/extend';\nimport {version} from '../package.json';\n\nconst errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\nconst MarionetteError = extend.call(Error, {\n  urlRoot: `http://marionettejs.com/docs/v${version}/`,\n\n  constructor(message, options) {\n    if (_.isObject(message)) {\n      options = message;\n      message = options.message;\n    } else if (!options) {\n      options = {};\n    }\n\n    const error = Error.call(this, message);\n    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n    this.captureStackTrace();\n\n    if (options.url) {\n      this.url = this.urlRoot + options.url;\n    }\n  },\n\n  captureStackTrace() {\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, MarionetteError);\n    }\n  },\n\n  toString() {\n    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n  }\n});\n\nMarionetteError.extend = extend;\n\nexport default MarionetteError;\n","// Bind Entity Events & Unbind Entity Events\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone \"entity\" (e.g. collection/model)\n// to methods on a target object.\n//\n// The first parameter, `target`, must have the Backbone.Events module mixed in.\n//\n// The second parameter is the `entity` (Backbone.Model, Backbone.Collection or\n// any object that has Backbone.Events mixed in) to bind the events from.\n//\n// The third parameter is a hash of { \"event:name\": \"eventHandler\" }\n// configuration. Multiple handlers can be separated by a space. A\n// function can be supplied instead of a string handler name.\n\nimport _ from 'underscore';\nimport MarionetteError from '../error';\n\n// Bind/unbind the event to handlers specified as a string of\n// handler names on the target object\nfunction bindFromStrings(target, entity, evt, methods, actionName) {\n  const methodNames = methods.split(/\\s+/);\n\n  _.each(methodNames, function(methodName) {\n    const method = target[methodName];\n    if (!method) {\n      throw new MarionetteError(`Method \"${methodName}\" was configured as an event handler, but does not exist.`);\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\n// generic looping function\nfunction iterateEvents(target, entity, bindings, actionName) {\n  if (!entity || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindevents'\n    });\n  }\n\n  // iterate the bindings and bind/unbind them\n  _.each(bindings, function(method, evt) {\n\n    // allow for a list of method names as a string\n    if (_.isString(method)) {\n      bindFromStrings(target, entity, evt, method, actionName);\n      return;\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\nfunction bindEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'listenTo');\n  return this;\n}\n\nfunction unbindEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'stopListening');\n  return this;\n}\n\n// Export Public API\nexport {\n  bindEvents,\n  unbindEvents\n};\n","// Bind/Unbind Radio Requests\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone.radio request\n// to methods on a target object.\n//\n// The first parameter, `target`, will set the context of the reply method\n//\n// The second parameter is the `Radio.channel` to bind the reply to.\n//\n// The third parameter is a hash of { \"request:name\": \"replyHandler\" }\n// configuration. A function can be supplied instead of a string handler name.\n\nimport _ from 'underscore';\nimport normalizeMethods from './normalize-methods';\nimport MarionetteError from '../error';\n\nfunction iterateReplies(target, channel, bindings, actionName) {\n  if (!channel || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindrequests'\n    });\n  }\n\n  const normalizedRadioRequests = normalizeMethods.call(target, bindings);\n\n  channel[actionName](normalizedRadioRequests, target);\n}\n\nfunction bindRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'reply');\n  return this;\n}\n\nfunction unbindRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'stopReplying');\n  return this;\n}\n\nexport {\n  bindRequests,\n  unbindRequests\n};\n","import _ from 'underscore';\n\n// Internal utility for setting options consistently across Mn\nconst setOptions = function(options) {\n  this.options = _.extend({}, _.result(this, 'options'), options);\n};\n\nexport default setOptions;\n","import _setOptions from '../utils/set-options';\nimport getOption from '../common/get-option';\nimport mergeOptions from '../common/merge-options';\nimport normalizeMethods from '../common/normalize-methods';\nimport {\n  bindEvents,\n  unbindEvents\n} from '../common/bind-events';\n\nexport default {\n\n  // Imports the \"normalizeMethods\" to transform hashes of\n  // events=>function references/names to a hash of events=>function references\n  normalizeMethods,\n\n  _setOptions,\n\n  // A handy way to merge passed-in options onto the instance\n  mergeOptions,\n\n  // Enable getting options from this or this.options by name.\n  getOption,\n\n  // Enable binding view's events from another entity.\n  bindEvents,\n\n  // Enable unbinding view's events from another entity.\n  unbindEvents\n};\n","import _ from 'underscore';\nimport Radio from 'backbone.radio';\n\nimport {\n  bindRequests,\n  unbindRequests\n} from '../common/bind-requests';\n\nimport {\n  bindEvents,\n  unbindEvents\n} from '../common/bind-events';\n\nimport MarionetteError from '../error';\n\n// MixinOptions\n// - channelName\n// - radioEvents\n// - radioRequests\n\nexport default {\n\n  _initRadio() {\n    const channelName = _.result(this, 'channelName');\n\n    if (!channelName) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!Radio) {\n      throw new MarionetteError({\n        name: 'BackboneRadioMissing',\n        message: 'The dependency \"backbone.radio\" is missing.'\n      });\n    }\n\n    const channel = this._channel = Radio.channel(channelName);\n\n    const radioEvents = _.result(this, 'radioEvents');\n    this.bindEvents(channel, radioEvents);\n\n    const radioRequests = _.result(this, 'radioRequests');\n    this.bindRequests(channel, radioRequests);\n\n    this.on('destroy', this._destroyRadio);\n  },\n\n  _destroyRadio() {\n    this._channel.stopReplying(null, null, this);\n  },\n\n  getChannel() {\n    return this._channel;\n  },\n\n  // Proxy `bindEvents`\n  bindEvents: bindEvents,\n\n  // Proxy `unbindEvents`\n  unbindEvents: unbindEvents,\n\n  // Proxy `bindRequests`\n  bindRequests: bindRequests,\n\n  // Proxy `unbindRequests`\n  unbindRequests: unbindRequests\n\n};\n","// Object\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport extend from './utils/extend';\nimport { triggerMethod } from './common/trigger-method';\nimport CommonMixin from './mixins/common';\nimport RadioMixin from './mixins/radio';\n\nconst ClassOptions = [\n  'channelName',\n  'radioEvents',\n  'radioRequests'\n];\n\n// A Base Class that other Classes should descend from.\n// Object borrows many conventions and utilities from Backbone.\nconst MarionetteObject = function(options) {\n  if (!this.hasOwnProperty('options')) {\n    this._setOptions(options);\n  }\n  this.mergeOptions(options, ClassOptions);\n  this._setCid();\n  this._initRadio();\n  this.initialize.apply(this, arguments);\n};\n\nMarionetteObject.extend = extend;\n\n// Object Methods\n// --------------\n\n// Ensure it can trigger events with Backbone.Events\n_.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\n  cidPrefix: 'mno',\n\n  // for parity with Marionette.AbstractView lifecyle\n  _isDestroyed: false,\n\n  isDestroyed() {\n    return this._isDestroyed;\n  },\n\n  //this is a noop method intended to be overridden by classes that extend from this base\n  initialize() {},\n\n  _setCid() {\n    if (this.cid) { return; }\n    this.cid = _.uniqueId(this.cidPrefix);\n  },\n\n  destroy(...args) {\n    if (this._isDestroyed) { return this; }\n\n    this.triggerMethod('before:destroy', this, ...args);\n\n    this._isDestroyed = true;\n    this.triggerMethod('destroy', this, ...args);\n    this.stopListening();\n\n    return this;\n  },\n\n  triggerMethod\n});\n\nexport default MarionetteObject;\n","// Template Cache\n// --------------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport MarionetteError from './error';\n\n// Manage templates stored in `<script>` blocks,\n// caching them for faster access.\nconst TemplateCache = function(templateId) {\n  this.templateId = templateId;\n};\n\n// TemplateCache object-level methods. Manage the template\n// caches from these method calls instead of creating\n// your own TemplateCache instances\n_.extend(TemplateCache, {\n\n  templateCaches: {},\n\n  // Get the specified template by id. Either\n  // retrieves the cached version, or loads it\n  // from the DOM.\n  get(templateId, options) {\n    let cachedTemplate = this.templateCaches[templateId];\n\n    if (!cachedTemplate) {\n      cachedTemplate = new TemplateCache(templateId);\n      this.templateCaches[templateId] = cachedTemplate;\n    }\n\n    return cachedTemplate.load(options);\n  },\n\n  // Clear templates from the cache. If no arguments\n  // are specified, clears all templates:\n  // `clear()`\n  //\n  // If arguments are specified, clears each of the\n  // specified templates from the cache:\n  // `clear(\"#t1\", \"#t2\", \"...\")`\n  clear(...args) {\n    let i;\n    const length = args.length;\n\n    if (length > 0) {\n      for (i = 0; i < length; i++) {\n        delete this.templateCaches[args[i]];\n      }\n    } else {\n      this.templateCaches = {};\n    }\n  }\n});\n\n// TemplateCache instance methods, allowing each\n// template cache object to manage its own state\n// and know whether or not it has been loaded\n_.extend(TemplateCache.prototype, {\n\n  // Internal method to load the template\n  load(options) {\n    // Guard clause to prevent loading this template more than once\n    if (this.compiledTemplate) {\n      return this.compiledTemplate;\n    }\n\n    // Load the template and compile it\n    const template = this.loadTemplate(this.templateId, options);\n    this.compiledTemplate = this.compileTemplate(template, options);\n\n    return this.compiledTemplate;\n  },\n\n  // Load a template from the DOM, by default. Override\n  // this method to provide your own template retrieval\n  // For asynchronous loading with AMD/RequireJS, consider\n  // using a template-loader plugin as described here:\n  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n  loadTemplate(templateId, options) {\n    const $template = Backbone.$(templateId);\n\n    if (!$template.length) {\n      throw new MarionetteError({\n        name: 'NoTemplateError',\n        message: `Could not find template: \"${templateId}\"`\n      });\n    }\n    return $template.html();\n  },\n\n  // Pre-compile the template before caching it. Override\n  // this method if you do not need to pre-compile a template\n  // (JST / RequireJS for example) or if you want to change\n  // the template engine used (Handebars, etc).\n  compileTemplate(rawTemplate, options) {\n    return _.template(rawTemplate, options);\n  }\n});\n\nexport default TemplateCache;\n","// Implementation of the invoke method (http://underscorejs.org/#invoke) with support for\n// lodash v3, v4, and underscore.js\nimport _ from 'underscore';\n\nexport default _.invokeMap || _.invoke;\n","import _ from 'underscore';\nimport _invoke from '../utils/invoke';\nimport { triggerMethod } from '../common/trigger-method';\nimport Marionette from '../backbone.marionette';\n\n// MixinOptions\n// - behaviors\n\n// Takes care of getting the behavior class\n// given options and a key.\n// If a user passes in options.behaviorClass\n// default to using that.\n// If a user passes in a Behavior Class directly, use that\n// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\nfunction getBehaviorClass(options, key) {\n  if (options.behaviorClass) {\n    return options.behaviorClass;\n    //treat functions as a Behavior constructor\n  } else if (_.isFunction(options)) {\n    return options;\n  }\n\n  // behaviorsLookup can be either a flat object or a method\n  if (_.isFunction(Marionette.Behaviors.behaviorsLookup)) {\n    return Marionette.Behaviors.behaviorsLookup(options, key)[key];\n  }\n\n  return Marionette.Behaviors.behaviorsLookup[key];\n}\n\n// Iterate over the behaviors object, for each behavior\n// instantiate it and get its grouped behaviors.\n// This accepts a list of behaviors in either an object or array form\nfunction parseBehaviors(view, behaviors) {\n  return _.chain(behaviors).map(function(options, key) {\n    const BehaviorClass = getBehaviorClass(options, key);\n    //if we're passed a class directly instead of an object\n    const _options = options === BehaviorClass ? {} : options;\n    const behavior = new BehaviorClass(_options, view);\n    const nestedBehaviors = parseBehaviors(view, _.result(behavior, 'behaviors'));\n\n    return [behavior].concat(nestedBehaviors);\n  }).flatten().value();\n}\n\nexport default {\n  _initBehaviors() {\n    this._behaviors = this._getBehaviors();\n  },\n\n  _getBehaviors() {\n    const behaviors = _.result(this, 'behaviors');\n\n    // Behaviors defined on a view can be a flat object literal\n    // or it can be a function that returns an object.\n    return _.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\n  },\n\n  _getBehaviorTriggers() {\n    const triggers = _invoke(this._behaviors, 'getTriggers');\n    return _.reduce(triggers, function(memo, _triggers) {\n      return _.extend(memo, _triggers);\n    }, {});\n  },\n\n  _getBehaviorEvents() {\n    const events = _invoke(this._behaviors, 'getEvents');\n    return _.reduce(events, function(memo, _events) {\n      return _.extend(memo, _events);\n    }, {});\n  },\n\n  // proxy behavior $el to the view's $el.\n  _proxyBehaviorViewProperties() {\n    _invoke(this._behaviors, 'proxyViewProperties');\n  },\n\n  // delegate modelEvents and collectionEvents\n  _delegateBehaviorEntityEvents() {\n    _invoke(this._behaviors, 'delegateEntityEvents');\n  },\n\n  // undelegate modelEvents and collectionEvents\n  _undelegateBehaviorEntityEvents() {\n    _invoke(this._behaviors, 'undelegateEntityEvents');\n  },\n\n  _destroyBehaviors(...args) {\n    // Call destroy on each behavior after\n    // destroying the view.\n    // This unbinds event listeners\n    // that behaviors have registered for.\n    _invoke(this._behaviors, 'destroy', ...args);\n  },\n\n  // Remove a behavior\n  _removeBehavior(behavior) {\n    // Don't worry about the clean up if the view is destroyed\n    if (this._isDestroyed) { return; }\n    this._behaviors = _.without(this._behaviors, behavior);\n  },\n\n  _bindBehaviorUIElements() {\n    _invoke(this._behaviors, 'bindUIElements');\n  },\n\n  _unbindBehaviorUIElements() {\n    _invoke(this._behaviors, 'unbindUIElements');\n  },\n\n  _triggerEventOnBehaviors() {\n    const behaviors = this._behaviors;\n    // Use good ol' for as this is a very hot function\n    for (let i = 0, length = behaviors && behaviors.length; i < length; i++) {\n      triggerMethod.apply(behaviors[i], arguments);\n    }\n  }\n};\n","import _ from 'underscore';\n\nimport {\n  bindEvents,\n  unbindEvents\n} from '../common/bind-events';\n\n// MixinOptions\n// - collectionEvents\n// - modelEvents\n\nexport default {\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  _delegateEntityEvents(model, collection) {\n    this._undelegateEntityEvents(model, collection);\n\n    const modelEvents = _.result(this, 'modelEvents');\n    bindEvents.call(this, model, modelEvents);\n\n    const collectionEvents = _.result(this, 'collectionEvents');\n    bindEvents.call(this, collection, collectionEvents);\n  },\n\n  _undelegateEntityEvents(model, collection) {\n    const modelEvents = _.result(this, 'modelEvents');\n    unbindEvents.call(this, model, modelEvents);\n\n    const collectionEvents = _.result(this, 'collectionEvents');\n    unbindEvents.call(this, collection, collectionEvents);\n  }\n};\n","import _ from 'underscore';\n\n// Borrow event splitter from Backbone\nconst delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nfunction uniqueName(eventName, selector) {\n  return `${ eventName }${ _.uniqueId('.evt') } ${ selector }`;\n}\n\n// Set event name to be namespaced using a unique index\n// to generate a non colliding event namespace\n// http://api.jquery.com/event.namespace/\nconst getUniqueEventName = function(eventName) {\n  const match = eventName.match(delegateEventSplitter);\n  return uniqueName(match[1], match[2]);\n};\n\nexport default getUniqueEventName;\n","// Add Feature flags here\n// e.g. 'class' => false\nconst FEATURES = {\n  childViewEventPrefix: true,\n  triggersStopPropagation: true,\n  triggersPreventDefault: true\n};\n\nfunction isEnabled(name) {\n  return !!FEATURES[name];\n}\n\nfunction setEnabled(name, state) {\n  return FEATURES[name] = state;\n}\n\nexport {\n  FEATURES,\n  setEnabled,\n  isEnabled\n};\n","import _ from 'underscore';\nimport getUniqueEventName from '../utils/get-unique-event-name';\nimport { isEnabled } from '../config/features';\n\n// Internal method to create an event handler for a given `triggerDef` like\n// 'click:foo'\nfunction buildViewTrigger(view, triggerDef) {\n  if (_.isString(triggerDef)) {\n    triggerDef = {event: triggerDef};\n  }\n\n  const eventName = triggerDef.event;\n\n  let shouldPreventDefault = !!triggerDef.preventDefault;\n\n  if (isEnabled('triggersPreventDefault')) {\n    shouldPreventDefault = triggerDef.preventDefault !== false;\n  }\n\n  let shouldStopPropagation = !!triggerDef.stopPropagation;\n\n  if (isEnabled('triggersStopPropagation')) {\n    shouldStopPropagation = triggerDef.stopPropagation !== false;\n  }\n\n  return function(event) {\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n\n    if (shouldStopPropagation) {\n      event.stopPropagation();\n    }\n\n    view.triggerMethod(eventName, view, event);\n  };\n}\n\nexport default {\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  _getViewTriggers(view, triggers) {\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return _.reduce(triggers, (events, value, key) => {\n      key = getUniqueEventName(key);\n      events[key] = buildViewTrigger(view, value);\n      return events;\n    }, {});\n  }\n\n};\n","import _ from 'underscore';\n// allows for the use of the @ui. syntax within\n// a given key for triggers and events\n// swaps the @ui with the associated selector.\n// Returns a new, non-mutated, parsed events hash.\nconst normalizeUIKeys = function(hash, ui) {\n  return _.reduce(hash, (memo, val, key) => {\n    const normalizedKey = normalizeUIString(key, ui);\n    memo[normalizedKey] = val;\n    return memo;\n  }, {});\n};\n\n// utility method for parsing @ui. syntax strings\n// into associated selector\nconst normalizeUIString = function(uiString, ui) {\n  return uiString.replace(/@ui\\.[a-zA-Z-_$0-9]*/g, (r) => {\n    return ui[r.slice(4)];\n  });\n};\n\n// allows for the use of the @ui. syntax within\n// a given value for regions\n// swaps the @ui with the associated selector\nconst normalizeUIValues = function(hash, ui, properties) {\n  _.each(hash, (val, key) => {\n    if (_.isString(val)) {\n      hash[key] = normalizeUIString(val, ui);\n    } else if (_.isObject(val) && _.isArray(properties)) {\n      _.extend(val, normalizeUIValues(_.pick(val, properties), ui));\n      /* Value is an object, and we got an array of embedded property names to normalize. */\n      _.each(properties, (property) => {\n        const propertyVal = val[property];\n        if (_.isString(propertyVal)) {\n          val[property] = normalizeUIString(propertyVal, ui);\n        }\n      });\n    }\n  });\n  return hash;\n};\n\nexport default {\n\n  // normalize the keys of passed hash with the views `ui` selectors.\n  // `{\"@ui.foo\": \"bar\"}`\n  normalizeUIKeys(hash) {\n    const uiBindings = this._getUIBindings();\n    return normalizeUIKeys(hash, uiBindings);\n  },\n\n  // normalize the passed string with the views `ui` selectors.\n  // `\"@ui.bar\"`\n  normalizeUIString(uiString) {\n    const uiBindings = this._getUIBindings();\n    return normalizeUIString(uiString, uiBindings);\n  },\n\n  // normalize the values of passed hash with the views `ui` selectors.\n  // `{foo: \"@ui.bar\"}`\n  normalizeUIValues(hash, properties) {\n    const uiBindings = this._getUIBindings();\n    return normalizeUIValues(hash, uiBindings, properties);\n  },\n\n  _getUIBindings() {\n    const uiBindings = _.result(this, '_uiBindings');\n    const ui = _.result(this, 'ui');\n    return uiBindings || ui;\n  },\n\n  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n  // the associated jQuery selectors.\n  _bindUIElements() {\n    if (!this.ui) { return; }\n\n    // store the ui hash in _uiBindings so they can be reset later\n    // and so re-rendering the view will be able to find the bindings\n    if (!this._uiBindings) {\n      this._uiBindings = this.ui;\n    }\n\n    // get the bindings result, as a function or otherwise\n    const bindings = _.result(this, '_uiBindings');\n\n    // empty the ui so we don't have anything to start with\n    this._ui = {};\n\n    // bind each of the selectors\n    _.each(bindings, (selector, key) => {\n      this._ui[key] = this.$(selector);\n    });\n\n    this.ui = this._ui;\n  },\n\n  _unbindUIElements() {\n    if (!this.ui || !this._uiBindings) { return; }\n\n    // delete all of the existing ui bindings\n    _.each(this.ui, ($el, name) => {\n      delete this.ui[name];\n    });\n\n    // reset the ui element to the original bindings configuration\n    this.ui = this._uiBindings;\n    delete this._uiBindings;\n    delete this._ui;\n  },\n\n  _getUI(name) {\n    return this._ui[name];\n  }\n};\n","// DomApi\n//  ---------\nimport _ from 'underscore';\nimport Backbone from 'backbone';\n\n// Performant method for returning the jQuery instance\nfunction getEl(el) {\n  return el instanceof Backbone.$ ? el : Backbone.$(el);\n}\n\n// Static setter\nexport function setDomApi(mixin) {\n  this.prototype.Dom = _.extend({}, this.prototype.Dom, mixin);\n}\n\nexport default {\n\n  // Returns a new HTML DOM node instance\n  createBuffer() {\n    return document.createDocumentFragment();\n  },\n\n  // Lookup the `selector` string\n  // Selector may also be a DOM element\n  // Returns an array-like object of nodes\n  getEl(selector) {\n    return getEl(selector);\n  },\n\n  // Finds the `selector` string with the el\n  // Returns an array-like object of nodes\n  findEl(el, selector, _$el = getEl(el)) {\n    return _$el.find(selector);\n  },\n\n  // Returns true if the el contains the node childEl\n  hasEl(el, childEl) {\n    return el.contains(childEl && childEl.parentNode);\n  },\n\n  // Detach `el` from the DOM without removing listeners\n  detachEl(el, _$el = getEl(el)) {\n    _$el.detach();\n  },\n\n  // Remove `oldEl` from the DOM and put `newEl` in its place\n  replaceEl(newEl, oldEl) {\n    if (newEl === oldEl) {\n      return;\n    }\n\n    const parent = oldEl.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    parent.replaceChild(newEl, oldEl);\n  },\n\n  // Swaps the location of `el1` and `el2` in the DOM\n  swapEl(el1, el2) {\n    if (el1 === el2) {\n      return;\n    }\n\n    const parent1 = el1.parentNode;\n    const parent2 = el2.parentNode;\n\n    if (!parent1 || !parent2) {\n      return;\n    }\n\n    const next1 = el1.nextSibling;\n    const next2 = el2.nextSibling;\n\n    parent1.insertBefore(el2, next1);\n    parent2.insertBefore(el1, next2);\n  },\n\n  // Replace the contents of `el` with the HTML string of `html`\n  setContents(el, html, _$el = getEl(el)) {\n    _$el.html(html);\n  },\n\n  // Takes the DOM node `el` and appends the DOM node `contents`\n  // to the end of the element's contents.\n  appendContents(el, contents, {_$el = getEl(el), _$contents = getEl(contents)} = {}) {\n    _$el.append(_$contents);\n  },\n\n  // Does the el have child nodes\n  hasContents(el) {\n    return el.hasChildNodes();\n  },\n\n  // Remove the inner contents of `el` from the DOM while leaving\n  // `el` itself in the DOM.\n  detachContents(el, _$el = getEl(el)) {\n    _$el.contents().detach();\n  }\n};\n","// ViewMixin\n//  ---------\n\nimport Backbone from 'backbone';\nimport _ from 'underscore';\nimport { triggerMethod } from '../common/trigger-method';\nimport BehaviorsMixin from './behaviors';\nimport CommonMixin from './common';\nimport DelegateEntityEventsMixin from './delegate-entity-events';\nimport TriggersMixin from './triggers';\nimport UIMixin from './ui';\nimport { isEnabled } from '../config/features';\nimport DomApi from '../config/dom';\n\n// MixinOptions\n// - behaviors\n// - childViewEventPrefix\n// - childViewEvents\n// - childViewTriggers\n// - collectionEvents\n// - modelEvents\n// - triggers\n// - ui\n\n\nconst ViewMixin = {\n  Dom: DomApi,\n\n  supportsRenderLifecycle: true,\n  supportsDestroyLifecycle: true,\n\n  _isDestroyed: false,\n\n  isDestroyed() {\n    return !!this._isDestroyed;\n  },\n\n  _isRendered: false,\n\n  isRendered() {\n    return !!this._isRendered;\n  },\n\n  _isAttached: false,\n\n  isAttached() {\n    return !!this._isAttached;\n  },\n\n  // Overriding Backbone.View's `delegateEvents` to handle\n  // `events` and `triggers`\n  delegateEvents(eventsArg) {\n\n    this._proxyBehaviorViewProperties();\n    this._buildEventProxies();\n\n    const viewEvents = this._getEvents(eventsArg);\n\n    if (typeof eventsArg === 'undefined') {\n      this.events = viewEvents;\n    }\n\n    const combinedEvents = _.extend({},\n      this._getBehaviorEvents(),\n      viewEvents,\n      this._getBehaviorTriggers(),\n      this.getTriggers()\n    );\n\n    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n\n    return this;\n  },\n\n  _getEvents(eventsArg) {\n    const events = eventsArg || this.events;\n\n    if (_.isFunction(events)) {\n      return this.normalizeUIKeys(events.call(this));\n    }\n\n    return this.normalizeUIKeys(events);\n  },\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  getTriggers() {\n    if (!this.triggers) { return; }\n\n    // Allow `triggers` to be configured as a function\n    const triggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return this._getViewTriggers(this, triggers);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents() {\n    this._delegateEntityEvents(this.model, this.collection);\n\n    // bind each behaviors model and collection events\n    this._delegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n  undelegateEntityEvents() {\n    this._undelegateEntityEvents(this.model, this.collection);\n\n    // unbind each behaviors model and collection events\n    this._undelegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Handle destroying the view and its children.\n  destroy(...args) {\n    if (this._isDestroyed) { return this; }\n    const shouldTriggerDetach = this._isAttached && !this._shouldDisableEvents;\n\n    this.triggerMethod('before:destroy', this, ...args);\n    if (shouldTriggerDetach) {\n      this.triggerMethod('before:detach', this);\n    }\n\n    // unbind UI elements\n    this.unbindUIElements();\n\n    // remove the view from the DOM\n    this._removeElement();\n\n    if (shouldTriggerDetach) {\n      this._isAttached = false;\n      this.triggerMethod('detach', this);\n    }\n\n    // remove children after the remove to prevent extra paints\n    this._removeChildren();\n\n    this._isDestroyed = true;\n    this._isRendered = false;\n\n    // Destroy behaviors after _isDestroyed flag\n    this._destroyBehaviors(...args);\n\n    this.triggerMethod('destroy', this, ...args);\n\n    this.stopListening();\n\n    return this;\n  },\n\n  // Equates to this.$el.remove\n  _removeElement() {\n    this.$el.off().removeData();\n    this.Dom.detachEl(this.el, this.$el);\n  },\n\n  bindUIElements() {\n    this._bindUIElements();\n    this._bindBehaviorUIElements();\n\n    return this;\n  },\n\n  // This method unbinds the elements specified in the \"ui\" hash\n  unbindUIElements() {\n    this._unbindUIElements();\n    this._unbindBehaviorUIElements();\n\n    return this;\n  },\n\n  getUI(name) {\n    return this._getUI(name);\n  },\n\n  // used as the prefix for child view events\n  // that are forwarded through the layoutview\n  childViewEventPrefix() {\n    return isEnabled('childViewEventPrefix') ? 'childview' : false;\n  },\n\n  // import the `triggerMethod` to trigger events with corresponding\n  // methods if the method exists\n  triggerMethod() {\n    const ret = triggerMethod.apply(this, arguments);\n\n    this._triggerEventOnBehaviors.apply(this, arguments);\n\n    return ret;\n  },\n\n  // Cache `childViewEvents` and `childViewTriggers`\n  _buildEventProxies() {\n    this._childViewEvents = _.result(this, 'childViewEvents');\n    this._childViewTriggers = _.result(this, 'childViewTriggers');\n  },\n\n  _proxyChildViewEvents(view) {\n    this.listenTo(view, 'all', this._childViewEventHandler);\n  },\n\n  _childViewEventHandler(eventName, ...args) {\n    const childViewEvents = this.normalizeMethods(this._childViewEvents);\n\n    // call collectionView childViewEvent if defined\n    if (typeof childViewEvents !== 'undefined' && _.isFunction(childViewEvents[eventName])) {\n      childViewEvents[eventName].apply(this, args);\n    }\n\n    // use the parent view's proxyEvent handlers\n    const childViewTriggers = this._childViewTriggers;\n\n    // Call the event with the proxy name on the parent layout\n    if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n      this.triggerMethod(childViewTriggers[eventName], ...args);\n    }\n\n    const prefix = _.result(this, 'childViewEventPrefix');\n\n    if (prefix !== false) {\n      const childEventName = prefix + ':' + eventName;\n\n      this.triggerMethod(childEventName, ...args);\n    }\n  }\n};\n\n_.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\nexport default ViewMixin;\n","import { triggerMethodOn } from '../common/trigger-method';\n\nexport function renderView(view) {\n  if (view._isRendered) {\n    return;\n  }\n\n  if (!view.supportsRenderLifecycle) {\n    triggerMethodOn(view, 'before:render', view);\n  }\n\n  view.render();\n\n  if (!view.supportsRenderLifecycle) {\n    view._isRendered = true;\n    triggerMethodOn(view, 'render', view);\n  }\n}\n\nexport function destroyView(view) {\n  if (view.destroy) {\n    view.destroy();\n    return;\n  }\n\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'before:destroy', view);\n  }\n\n  const shouldTriggerDetach = view._isAttached && !view._shouldDisableEvents;\n\n  if (shouldTriggerDetach) {\n    triggerMethodOn(view, 'before:detach', view);\n  }\n\n  view.remove();\n\n  if (shouldTriggerDetach) {\n    view._isAttached = false;\n    triggerMethodOn(view, 'detach', view);\n  }\n\n  view._isDestroyed = true;\n\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'destroy', view);\n  }\n}\n","// Region\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport deprecate from './utils/deprecate';\nimport { renderView, destroyView } from './common/view';\nimport monitorViewEvents from './common/monitor-view-events';\nimport isNodeAttached from './common/is-node-attached';\nimport { triggerMethodOn } from './common/trigger-method';\nimport MarionetteObject from './object';\nimport MarionetteError from './error';\nimport View from './view';\nimport DomApi, { setDomApi } from './config/dom';\n\nconst ClassOptions = [\n  'allowMissingEl',\n  'parentEl',\n  'replaceElement'\n];\n\nconst Region = MarionetteObject.extend({\n  Dom: DomApi,\n\n  cidPrefix: 'mnr',\n  replaceElement: false,\n  _isReplaced: false,\n  _isSwappingView: false,\n\n  constructor(options) {\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    // getOption necessary because options.el may be passed as undefined\n    this._initEl = this.el = this.getOption('el');\n\n    // Handle when this.el is passed in as a $ wrapped element.\n    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n\n    if (!this.el) {\n      throw new MarionetteError({\n        name: 'NoElError',\n        message: 'An \"el\" must be specified for a region.'\n      });\n    }\n\n    this.$el = this.getEl(this.el);\n    MarionetteObject.call(this, options);\n  },\n\n  // Displays a backbone view instance inside of the region. Handles calling the `render`\n  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\n  // option can be used to prevent a view from the old view being destroyed on show.\n  show(view, options) {\n    if (!this._ensureElement(options)) {\n      return;\n    }\n\n    view = this._getView(view, options);\n\n    if (view === this.currentView) { return this; }\n\n    this._isSwappingView = !!this.currentView;\n\n    this.triggerMethod('before:show', this, view, options);\n\n    // Assume an attached view is already in the region for pre-existing DOM\n    if (!view._isAttached) {\n      this.empty(options);\n    }\n\n    this._setupChildView(view);\n\n    this.currentView = view;\n\n    renderView(view);\n\n    this._attachView(view, options);\n\n    this.triggerMethod('show', this, view, options);\n\n    this._isSwappingView = false;\n\n    return this;\n  },\n\n  _setupChildView(view) {\n    monitorViewEvents(view);\n\n    this._proxyChildViewEvents(view);\n\n    // We need to listen for if a view is destroyed in a way other than through the region.\n    // If this happens we need to remove the reference to the currentView since once a view\n    // has been destroyed we can not reuse it.\n    view.on('destroy', this._empty, this);\n  },\n\n  _proxyChildViewEvents(view) {\n    const parentView = this._parentView;\n\n    if (!parentView) { return; }\n\n    parentView._proxyChildViewEvents(view);\n  },\n\n  // If the regions parent view is not monitoring its attach/detach events\n  _shouldDisableMonitoring() {\n    return this._parentView && this._parentView.monitorViewEvents === false;\n  },\n\n  _attachView(view, options = {}) {\n    const shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el) && !this._shouldDisableMonitoring();\n    const shouldReplaceEl = typeof options.replaceElement === 'undefined' ? !!_.result(this, 'replaceElement') : !!options.replaceElement;\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    if (shouldReplaceEl) {\n      this._replaceEl(view);\n    } else {\n      this.attachHtml(view);\n    }\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n  },\n\n  _ensureElement(options = {}) {\n    if (!_.isObject(this.el)) {\n      this.$el = this.getEl(this.el);\n      this.el = this.$el[0];\n    }\n\n    if (!this.$el || this.$el.length === 0) {\n      const allowMissingEl = typeof options.allowMissingEl === 'undefined' ? !!_.result(this, 'allowMissingEl') : !!options.allowMissingEl;\n\n      if (allowMissingEl) {\n        return false;\n      } else {\n        throw new MarionetteError(`An \"el\" must exist in DOM for this region ${this.cid}`);\n      }\n    }\n    return true;\n  },\n\n  _getView(view) {\n    if (!view) {\n      throw new MarionetteError({\n        name: 'ViewNotValid',\n        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n      });\n    }\n\n    if (view._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: `View (cid: \"${view.cid}\") has already been destroyed and cannot be used.`\n      });\n    }\n\n    if (view instanceof Backbone.View) {\n      return view;\n    }\n\n    const viewOptions = this._getViewOptions(view);\n\n    return new View(viewOptions);\n  },\n\n  // This allows for a template or a static string to be\n  // used as a template\n  _getViewOptions(viewOptions) {\n    if (_.isFunction(viewOptions)) {\n      return { template: viewOptions };\n    }\n\n    if (_.isObject(viewOptions)) {\n      return viewOptions;\n    }\n\n    const template = function() { return viewOptions; };\n\n    return { template };\n  },\n\n  // Override this method to change how the region finds the DOM element that it manages. Return\n  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n  getEl(el) {\n    const context = _.result(this, 'parentEl');\n\n    if (context && _.isString(el)) {\n      const $el = this.Dom.findEl(context, el);\n      if ($el.length) { return $el; }\n    }\n\n    return this.Dom.getEl(el);\n  },\n\n  _replaceEl(view) {\n    // always restore the el to ensure the regions el is present before replacing\n    this._restoreEl();\n\n    view.on('before:destroy', this._restoreEl, this);\n\n    this.Dom.replaceEl(view.el, this.el);\n\n    this._isReplaced = true;\n  },\n\n  // Restore the region's element in the DOM.\n  _restoreEl() {\n    // There is nothing to replace\n    if (!this._isReplaced) {\n      return;\n    }\n\n    const view = this.currentView;\n\n    if (!view) {\n      return;\n    }\n\n    this._detachView(view);\n\n    this._isReplaced = false;\n  },\n\n  // Check to see if the region's el was replaced.\n  isReplaced() {\n    return !!this._isReplaced;\n  },\n\n  // Check to see if a view is being swapped by another\n  isSwappingView() {\n    return !!this._isSwappingView;\n  },\n\n  // Override this method to change how the new view is appended to the `$el` that the\n  // region is managing\n  attachHtml(view) {\n    this.Dom.appendContents(this.el, view.el, {_$el: this.$el, _$contents: view.$el});\n  },\n\n  // Destroy the current view, if there is one. If there is no current view, it does\n  // nothing and returns immediately.\n  empty(options = { allowMissingEl: true }) {\n    const view = this.currentView;\n\n    // If there is no view in the region we should only detach current html\n    if (!view) {\n      if (this._ensureElement(options)) {\n        this.detachHtml();\n      }\n      return this;\n    }\n\n    const shouldDestroy = !options.preventDestroy;\n\n    if (!shouldDestroy) {\n      deprecate('The preventDestroy option is deprecated. Use Region#detachView');\n    }\n\n    this._empty(view, shouldDestroy);\n    return this;\n  },\n\n  _empty(view, shouldDestroy) {\n    view.off('destroy', this._empty, this);\n    this.triggerMethod('before:empty', this, view);\n\n    this._restoreEl();\n\n    delete this.currentView;\n\n    if (!view._isDestroyed) {\n      if (shouldDestroy) {\n        this.removeView(view);\n      } else {\n        this._detachView(view);\n      }\n      this._stopChildViewEvents(view);\n    }\n\n    this.triggerMethod('empty', this, view);\n  },\n\n  _stopChildViewEvents(view) {\n    const parentView = this._parentView;\n\n    if (!parentView) { return; }\n\n    this._parentView.stopListening(view);\n  },\n\n  destroyView(view) {\n    if (view._isDestroyed) {\n      return view;\n    }\n\n    view._shouldDisableEvents = this._shouldDisableMonitoring();\n    destroyView(view);\n    return view;\n  },\n\n  removeView(view) {\n    this.destroyView(view);\n  },\n\n  // Empties the Region without destroying the view\n  // Returns the detached view\n  detachView() {\n    const view = this.currentView;\n\n    if (!view) {\n      return;\n    }\n\n    this._empty(view);\n\n    return view;\n  },\n\n  _detachView(view) {\n    const shouldTriggerDetach = view._isAttached && !this._shouldDisableMonitoring();;\n    const shouldRestoreEl = this._isReplaced;\n    if (shouldTriggerDetach) {\n      triggerMethodOn(view, 'before:detach', view);\n    }\n\n    if (shouldRestoreEl) {\n      this.Dom.replaceEl(this.el, view.el);\n    } else {\n      this.detachHtml();\n    }\n\n    if (shouldTriggerDetach) {\n      view._isAttached = false;\n      triggerMethodOn(view, 'detach', view);\n    }\n  },\n\n  // Override this method to change how the region detaches current content\n  detachHtml() {\n    this.Dom.detachContents(this.el, this.$el);\n  },\n\n  // Checks whether a view is currently present within the region. Returns `true` if there is\n  // and `false` if no view is present.\n  hasView() {\n    return !!this.currentView;\n  },\n\n  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n  // The next time a view is shown via this region, the region will re-query the DOM for\n  // the region's `el`.\n  reset(options) {\n    this.empty(options);\n\n    if (this.$el) {\n      this.el = this._initEl;\n    }\n\n    delete this.$el;\n    return this;\n  },\n\n  destroy(options) {\n    if (this._isDestroyed) { return this; }\n\n    this.reset(options);\n\n    if (this._name) {\n      this._parentView._removeReferences(this._name);\n    }\n    delete this._parentView;\n    delete this._name;\n\n    return MarionetteObject.prototype.destroy.apply(this, arguments);\n  }\n}, {\n  setDomApi\n});\n\nexport default Region;\n","import _ from 'underscore';\nimport deprecate from '../utils/deprecate';\nimport MarionetteError from '../error';\nimport Region from '../region';\n\n// return the region instance from the definition\nexport default function(definition, defaults) {\n  if (definition instanceof Region) {\n    return definition;\n  }\n\n  return buildRegionFromDefinition(definition, defaults);\n}\n\nfunction buildRegionFromDefinition(definition, defaults) {\n  const opts = _.extend({}, defaults);\n\n  if (_.isString(definition)) {\n    _.extend(opts, { el: definition });\n\n    return buildRegionFromObject(opts);\n  }\n\n  if (_.isFunction(definition)) {\n    _.extend(opts, { regionClass: definition });\n\n    return buildRegionFromObject(opts);\n  }\n\n  if (_.isObject(definition)) {\n    if (definition.selector) {\n      deprecate('The selector option on a Region definition object is deprecated. Use el to pass a selector string');\n    }\n\n    _.extend(opts, { el: definition.selector }, definition);\n\n    return buildRegionFromObject(opts);\n  }\n\n  throw new MarionetteError({\n    message: 'Improper region configuration type.',\n    url: 'marionette.region.html#region-configuration-types'\n  });\n}\n\nfunction buildRegionFromObject(definition) {\n  const RegionClass = definition.regionClass\n\n  const options = _.omit(definition, 'regionClass');\n\n  return new RegionClass(options);\n}\n","import _ from 'underscore';\nimport _invoke from '../utils/invoke';\nimport buildRegion from '../common/build-region';\nimport Region from '../region';\n\n// MixinOptions\n// - regions\n// - regionClass\n\nexport default {\n  regionClass: Region,\n\n  // Internal method to initialize the regions that have been defined in a\n  // `regions` attribute on this View.\n  _initRegions() {\n\n    // init regions hash\n    this.regions = this.regions || {};\n    this._regions = {};\n\n    this.addRegions(_.result(this, 'regions'));\n  },\n\n  // Internal method to re-initialize all of the regions by updating\n  // the `el` that they point to\n  _reInitRegions() {\n    _invoke(this._regions, 'reset');\n  },\n\n  // Add a single region, by name, to the View\n  addRegion(name, definition) {\n    const regions = {};\n    regions[name] = definition;\n    return this.addRegions(regions)[name];\n  },\n\n  // Add multiple regions as a {name: definition, name2: def2} object literal\n  addRegions(regions) {\n    // If there's nothing to add, stop here.\n    if (_.isEmpty(regions)) {\n      return;\n    }\n\n    // Normalize region selectors hash to allow\n    // a user to use the @ui. syntax.\n    regions = this.normalizeUIValues(regions, ['selector', 'el']);\n\n    // Add the regions definitions to the regions property\n    this.regions = _.extend({}, this.regions, regions);\n\n    return this._addRegions(regions);\n  },\n\n  // internal method to build and add regions\n  _addRegions(regionDefinitions) {\n    const defaults = {\n      regionClass: this.regionClass,\n      parentEl: _.partial(_.result, this, 'el')\n    };\n\n    return _.reduce(regionDefinitions, (regions, definition, name) => {\n      regions[name] = buildRegion(definition, defaults);\n      this._addRegion(regions[name], name);\n      return regions;\n    }, {});\n  },\n\n  _addRegion(region, name) {\n    this.triggerMethod('before:add:region', this, name, region);\n\n    region._parentView = this;\n    region._name = name;\n\n    this._regions[name] = region;\n\n    this.triggerMethod('add:region', this, name, region);\n  },\n\n  // Remove a single region from the View, by name\n  removeRegion(name) {\n    const region = this._regions[name];\n\n    this._removeRegion(region, name);\n\n    return region;\n  },\n\n  // Remove all regions from the View\n  removeRegions() {\n    const regions = this._getRegions();\n\n    _.each(this._regions, _.bind(this._removeRegion, this));\n\n    return regions;\n  },\n\n  _removeRegion(region, name) {\n    this.triggerMethod('before:remove:region', this, name, region);\n\n    region.destroy();\n\n    this.triggerMethod('remove:region', this, name, region);\n  },\n\n  // Called in a region's destroy\n  _removeReferences(name) {\n    delete this.regions[name];\n    delete this._regions[name];\n  },\n\n  // Empty all regions in the region manager, but\n  // leave them attached\n  emptyRegions() {\n    const regions = this.getRegions();\n    _invoke(regions, 'empty');\n    return regions;\n  },\n\n  // Checks to see if view contains region\n  // Accepts the region name\n  // hasRegion('main')\n  hasRegion(name) {\n    return !!this.getRegion(name);\n  },\n\n  // Provides access to regions\n  // Accepts the region name\n  // getRegion('main')\n  getRegion(name) {\n    if (!this._isRendered) {\n      this.render();\n    }\n    return this._regions[name];\n  },\n\n  // Get all regions\n  _getRegions() {\n    return _.clone(this._regions);\n  },\n\n  getRegions() {\n    if (!this._isRendered) {\n      this.render();\n    }\n    return this._getRegions();\n  },\n\n  showChildView(name, view, ...args) {\n    const region = this.getRegion(name);\n    return region.show(view, ...args);\n  },\n\n  detachChildView(name) {\n    return this.getRegion(name).detachView();\n  },\n\n  getChildView(name) {\n    return this.getRegion(name).currentView;\n  }\n\n};\n","// Renderer\n// --------\n\nimport _ from 'underscore';\nimport MarionetteError from '../error';\nimport TemplateCache from '../template-cache';\n\n// Render a template with data by passing in the template\n// selector and the data to render.\nconst Renderer = {\n\n  // Render a template with data. The `template` parameter is\n  // passed to the `TemplateCache` object to retrieve the\n  // template function. Override this method to provide your own\n  // custom rendering and template handling for all of Marionette.\n  render(template, data) {\n    if (!template) {\n      throw new MarionetteError({\n        name: 'TemplateNotFoundError',\n        message: 'Cannot render the template since its false, null or undefined.'\n      });\n    }\n\n    const templateFunc = _.isFunction(template) ? template : TemplateCache.get(template);\n\n    return templateFunc(data);\n  }\n};\n\nexport default Renderer;\n","// View\n// ---------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport deprecate from './utils/deprecate';\nimport isNodeAttached from './common/is-node-attached';\nimport monitorViewEvents from './common/monitor-view-events';\nimport ViewMixin from './mixins/view';\nimport RegionsMixin from './mixins/regions';\nimport Renderer from './config/renderer';\nimport { setDomApi } from './config/dom';\n\nconst ClassOptions = [\n  'behaviors',\n  'childViewEventPrefix',\n  'childViewEvents',\n  'childViewTriggers',\n  'collectionEvents',\n  'events',\n  'modelEvents',\n  'regionClass',\n  'regions',\n  'template',\n  'templateContext',\n  'triggers',\n  'ui'\n];\n\n// The standard view. Includes view events, automatic rendering\n// of Underscore templates, nested views, and more.\nconst View = Backbone.View.extend({\n\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this._initRegions();\n\n    const args = Array.prototype.slice.call(arguments);\n    args[0] = this.options;\n    Backbone.View.prototype.constructor.apply(this, args);\n\n    this.delegateEntityEvents();\n\n    this._triggerEventOnBehaviors('initialize', this);\n  },\n\n  // Serialize the view's model *or* collection, if\n  // it exists, for the template\n  serializeData() {\n    if (!this.model && !this.collection) {\n      return {};\n    }\n\n    // If we have a model, we serialize that\n    if (this.model) {\n      return this.serializeModel();\n    }\n\n    // Otherwise, we serialize the collection,\n    // making it available under the `items` property\n    return {\n      items: this.serializeCollection()\n    };\n  },\n\n  // Prepares the special `model` property of a view\n  // for being displayed in the template. By default\n  // we simply clone the attributes. Override this if\n  // you need a custom transformation for your view's model\n  serializeModel() {\n    if (!this.model) { return {}; }\n    return _.clone(this.model.attributes);\n  },\n\n  // Serialize a collection by cloning each of\n  // its model's attributes\n  serializeCollection() {\n    if (!this.collection) { return {}; }\n    return this.collection.map(function(model) { return _.clone(model.attributes); });\n  },\n\n  // Overriding Backbone.View's `setElement` to handle\n  // if an el was previously defined. If so, the view might be\n  // rendered or attached on setElement.\n  setElement() {\n    const hasEl = !!this.el;\n\n    Backbone.View.prototype.setElement.apply(this, arguments);\n\n    if (hasEl) {\n      this._isRendered = this.Dom.hasContents(this.el);\n      this._isAttached = isNodeAttached(this.el);\n    }\n\n    if (this._isRendered) {\n      this.bindUIElements();\n    }\n\n    return this;\n  },\n\n  // Render the view, defaulting to underscore.js templates.\n  // You can override this in your view definition to provide\n  // a very specific rendering for your view. In general, though,\n  // you should override the `Marionette.Renderer` object to\n  // change how Marionette renders views.\n  // Subsequent renders after the first will re-render all nested\n  // views.\n  render() {\n    if (this._isDestroyed) { return this; }\n\n    this.triggerMethod('before:render', this);\n\n    // If this is not the first render call, then we need to\n    // re-initialize the `el` for each region\n    if (this._isRendered) {\n      this._reInitRegions();\n    }\n\n    this._renderTemplate();\n    this.bindUIElements();\n\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n\n    return this;\n  },\n\n  // Internal method to render the template with the serialized data\n  // and template context via the `Marionette.Renderer` object.\n  _renderTemplate() {\n    const template = this.getTemplate();\n\n    // Allow template-less views\n    if (template === false) {\n      deprecate('template:false is deprecated.  Use _.noop.');\n      return;\n    }\n\n    // Add in entity data and template context\n    const data = this.mixinTemplateContext(this.serializeData());\n\n    // Render and add to el\n    const html = this._renderHtml(template, data);\n    this.attachElContent(html);\n  },\n\n  // Renders the data into the template\n  _renderHtml(template, data) {\n    return Renderer.render(template, data, this);\n  },\n\n  // Get the template for this view\n  // instance. You can set a `template` attribute in the view\n  // definition or pass a `template: \"whatever\"` parameter in\n  // to the constructor options.\n  getTemplate() {\n    return this.template;\n  },\n\n  // Mix in template context methods. Looks for a\n  // `templateContext` attribute, which can either be an\n  // object literal, or a function that returns an object\n  // literal. All methods and attributes from this object\n  // are copies to the object passed in.\n  mixinTemplateContext(target = {}) {\n    const templateContext = _.result(this, 'templateContext');\n    return _.extend(target, templateContext);\n  },\n\n  // Attaches the content of a given view.\n  // This method can be overridden to optimize rendering,\n  // or to render in a non standard way.\n  //\n  // For example, using `innerHTML` instead of `$el.html`\n  //\n  // ```js\n  // attachElContent(html) {\n  //   this.el.innerHTML = html;\n  //   return this;\n  // }\n  // ```\n  attachElContent(html) {\n    this.Dom.setContents(this.el, html, this.$el);\n\n    return this;\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this.removeRegions();\n  },\n\n  _getImmediateChildren() {\n    return _.chain(this._getRegions())\n      .map('currentView')\n      .compact()\n      .value();\n  }\n}, {\n  // Sets the renderer for the Marionette.View class\n  setRenderer(renderer) {\n    this.prototype._renderHtml = renderer;\n  },\n\n  setDomApi\n});\n\n_.extend(View.prototype, ViewMixin, RegionsMixin);\n\nexport default View;\n","// Mix in methods from Underscore, for iteration, and other\n// collection related features.\n// Borrowing this code from Backbone.Collection:\n// https://github.com/jashkenas/backbone/blob/1.1.2/backbone.js#L962\n\nimport _ from 'underscore';\n\nconst methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',\n                'select', 'reject', 'every', 'all', 'some', 'any', 'include',\n                'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',\n                'last', 'without', 'isEmpty', 'pluck', 'reduce', 'partition'];\n\nconst emulateCollection = function(object, listProperty) {\n  _.each(methods, function(method) {\n    object[method] = function() {\n      const list = _.result(this, listProperty);\n      const args = Array.prototype.slice.call(arguments);\n      return _[method].apply(_, [list].concat(args));\n    };\n  });\n};\n\nexport default emulateCollection;\n","import _ from 'underscore';\nimport emulateCollection from './utils/emulate-collection';\n\n// Provide a container to store, retrieve and\n// shut down child views.\nconst Container = function(views) {\n  this._views = {};\n  this._indexByModel = {};\n  this._indexByCustom = {};\n  this._updateLength();\n\n  _.each(views, _.bind(this.add, this));\n};\n\nemulateCollection(Container.prototype, '_getViews');\n\n// Container Methods\n// -----------------\n\n_.extend(Container.prototype, {\n\n  _getViews() {\n    return _.values(this._views);\n  },\n\n  // Add a view to this container. Stores the view\n  // by `cid` and makes it searchable by the model\n  // cid (and model itself). Optionally specify\n  // a custom key to store an retrieve the view.\n  add(view, customIndex) {\n    return this._add(view, customIndex)._updateLength();\n  },\n\n  // To be used when avoiding call _updateLength\n  // When you are done adding all your new views\n  // call _updateLength\n  _add(view, customIndex) {\n    const viewCid = view.cid;\n\n    // store the view\n    this._views[viewCid] = view;\n\n    // index it by model\n    if (view.model) {\n      this._indexByModel[view.model.cid] = viewCid;\n    }\n\n    // index by custom\n    if (customIndex) {\n      this._indexByCustom[customIndex] = viewCid;\n    }\n\n    return this;\n  },\n\n  // Find a view by the model that was attached to\n  // it. Uses the model's `cid` to find it.\n  findByModel(model) {\n    return this.findByModelCid(model.cid);\n  },\n\n  // Find a view by the `cid` of the model that was attached to\n  // it. Uses the model's `cid` to find the view `cid` and\n  // retrieve the view using it.\n  findByModelCid(modelCid) {\n    const viewCid = this._indexByModel[modelCid];\n    return this.findByCid(viewCid);\n  },\n\n  // Find a view by a custom indexer.\n  findByCustom(index) {\n    const viewCid = this._indexByCustom[index];\n    return this.findByCid(viewCid);\n  },\n\n  // Find by index. This is not guaranteed to be a\n  // stable index.\n  findByIndex(index) {\n    return _.values(this._views)[index];\n  },\n\n  // retrieve a view by its `cid` directly\n  findByCid(cid) {\n    return this._views[cid];\n  },\n\n  // Remove a view\n  remove(view) {\n    return this._remove(view)._updateLength();\n  },\n\n  // To be used when avoiding call _updateLength\n  // When you are done adding all your new views\n  // call _updateLength\n  _remove(view) {\n    const viewCid = view.cid;\n\n    // delete model index\n    if (view.model) {\n      delete this._indexByModel[view.model.cid];\n    }\n\n    // delete custom index\n    _.some(this._indexByCustom, _.bind(function(cid, key) {\n      if (cid === viewCid) {\n        delete this._indexByCustom[key];\n        return true;\n      }\n    }, this));\n\n    // remove the view from the container\n    delete this._views[viewCid];\n\n    return this;\n  },\n\n  // Update the `.length` attribute on this container\n  _updateLength() {\n    this.length = _.size(this._views);\n\n    return this;\n  }\n});\n\nexport default Container;\n","// Collection View\n// ---------------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport { renderView, destroyView } from './common/view';\nimport isNodeAttached from './common/is-node-attached';\nimport monitorViewEvents from './common/monitor-view-events';\nimport { triggerMethodOn } from './common/trigger-method';\nimport ChildViewContainer from './child-view-container';\nimport MarionetteError from './error';\nimport ViewMixin from './mixins/view';\nimport { setDomApi } from './config/dom';\n\nconst ClassOptions = [\n  'behaviors',\n  'childView',\n  'childViewEventPrefix',\n  'childViewEvents',\n  'childViewOptions',\n  'childViewTriggers',\n  'collectionEvents',\n  'events',\n  'filter',\n  'emptyView',\n  'emptyViewOptions',\n  'modelEvents',\n  'reorderOnSort',\n  'sort',\n  'triggers',\n  'ui',\n  'viewComparator'\n];\n\n// A view that iterates over a Backbone.Collection\n// and renders an individual child view for each model.\nconst CollectionView = Backbone.View.extend({\n\n  // flag for maintaining the sorted order of the collection\n  sort: true,\n\n  // constructor\n  // option to pass `{sort: false}` to prevent the `CollectionView` from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  //\n  // option to pass `{viewComparator: compFunction()}` to allow the `CollectionView`\n  // to use a custom sort order for the collection.\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this.once('render', this._initialEvents);\n    this._initChildViewStorage();\n    this._bufferedChildren = [];\n\n    const args = Array.prototype.slice.call(arguments);\n    args[0] = this.options;\n    Backbone.View.prototype.constructor.apply(this, args);\n\n    this.delegateEntityEvents();\n\n    this._triggerEventOnBehaviors('initialize', this);\n  },\n\n  // Instead of inserting elements one by one into the page, it's much more performant to insert\n  // elements into a document fragment and then insert that document fragment into the page\n  _startBuffering() {\n    this._isBuffering = true;\n  },\n\n  _endBuffering() {\n    const shouldTriggerAttach = this._isAttached && this.monitorViewEvents !== false;\n    const triggerOnChildren = shouldTriggerAttach ? this._getImmediateChildren() : [];\n\n    this._isBuffering = false;\n\n    _.each(triggerOnChildren, child => {\n      triggerMethodOn(child, 'before:attach', child);\n    });\n\n    this.attachBuffer(this, this._createBuffer());\n\n    _.each(triggerOnChildren, child => {\n      child._isAttached = true;\n      triggerMethodOn(child, 'attach', child);\n    });\n\n    this._bufferedChildren = [];\n  },\n\n  _getImmediateChildren() {\n    return _.values(this.children._views);\n  },\n\n  // Configured the initial events that the collection view binds to.\n  _initialEvents() {\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'update', this._onCollectionUpdate);\n      this.listenTo(this.collection, 'reset', this.render);\n\n      if (this.sort) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Handle a child added to the collection\n  _onCollectionAdd(child, collection, opts) {\n    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n    let index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n    // When filtered or when there is no initial index, calculate index.\n    if (this.filter || index === false) {\n      index = _.indexOf(this._filteredSortedModels(index), child);\n    }\n\n    if (this._shouldAddChild(child, index)) {\n      this._destroyEmptyView();\n      this._addChild(child, index)\n    }\n  },\n\n  // Handle collection update model removals\n  _onCollectionUpdate(collection, options) {\n    const changes = options.changes;\n    this._removeChildModels(changes.removed);\n  },\n\n  // Remove the child views and destroy them.\n  // This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  // \"models\" is an array of models and the corresponding views\n  // will be removed and destroyed from the CollectionView\n  _removeChildModels(models) {\n    // Used to determine where to update the remaining\n    // sibling view indices after these views are removed.\n    const removedViews = this._getRemovedViews(models);\n\n    if (!removedViews.length) {\n      return;\n    }\n\n    this.children._updateLength();\n\n    // decrement the index of views after this one\n    this._updateIndices(removedViews, false);\n\n    if (this.isEmpty()) {\n      this._showEmptyView();\n    }\n  },\n\n  // Returns the views that will be used for re-indexing\n  // through CollectionView#_updateIndices.\n  _getRemovedViews(models) {\n\n    // Returning a view means something was removed.\n    return _.reduce(models, (removingViews, model) => {\n      const view = model && this.children.findByModel(model);\n\n      if (!view || view._isDestroyed) {\n        return removingViews;\n      }\n\n      this._removeChildView(view);\n\n      removingViews.push(view);\n\n      return removingViews;\n    }, []);\n  },\n\n  _removeChildView(view) {\n    this.triggerMethod('before:remove:child', this, view);\n\n    this.children._remove(view);\n    view._shouldDisableEvents = this.monitorViewEvents === false;\n    destroyView(view);\n\n    this.stopListening(view);\n    this.triggerMethod('remove:child', this, view);\n  },\n\n  // Overriding Backbone.View's `setElement` to handle\n  // if an el was previously defined. If so, the view might be\n  // attached on setElement.\n  setElement() {\n    const hasEl = !!this.el;\n\n    Backbone.View.prototype.setElement.apply(this, arguments);\n\n    if (hasEl) {\n      this._isAttached = isNodeAttached(this.el);\n    }\n\n    return this;\n  },\n\n  // Render children views. Override this method to provide your own implementation of a\n  // render function for the collection view.\n  render() {\n    if (this._isDestroyed) { return this; }\n    this.triggerMethod('before:render', this);\n    this._renderChildren();\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n  // collection view, we are only adding or removing the related childrenViews.\n  setFilter(filter, {preventRender} = {}) {\n    const canBeRendered = this._isRendered && !this._isDestroyed;\n    const filterChanged = this.filter !== filter;\n    const shouldRender = canBeRendered && filterChanged && !preventRender;\n\n    if (shouldRender) {\n      const previousModels = this._filteredSortedModels();\n      this.filter = filter;\n      const models = this._filteredSortedModels();\n      this._applyModelDeltas(models, previousModels);\n    } else {\n      this.filter = filter;\n    }\n\n    return this;\n  },\n\n  // `removeFilter` is actually an alias for removing filters.\n  removeFilter(options) {\n    return this.setFilter(null, options);\n  },\n\n  // Calculate and apply difference by cid between `models` and `previousModels`.\n  _applyModelDeltas(models, previousModels) {\n    const currentIds = {};\n    _.each(models, (model, index) => {\n      const addedChildNotExists = !this.children.findByModel(model);\n      if (addedChildNotExists) {\n        this._onCollectionAdd(model, this.collection, {at: index});\n      }\n      currentIds[model.cid] = true;\n    });\n\n    const removeModels = _.filter(previousModels, (prevModel) => {\n      return !currentIds[prevModel.cid] && this.children.findByModel(prevModel);\n    });\n\n    this._removeChildModels(removeModels);\n  },\n\n  // Reorder DOM after sorting. When your element's rendering do not use their index,\n  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n  // rendering all the collectionView.\n  reorder() {\n    const children = this.children;\n    const models = this._filteredSortedModels();\n\n    if (!models.length && this._showingEmptyView) { return this; }\n\n    const anyModelsAdded = _.some(models, function(model) {\n      return !children.findByModel(model);\n    });\n\n    // If there are any new models added due to filtering we need to add child views,\n    // so render as normal.\n    if (anyModelsAdded) {\n      this.render();\n    } else {\n\n      const filteredOutModels = [];\n\n      // Get the DOM nodes in the same order as the models and\n      // find the model that were children before but aren't in this new order.\n      const elsToReorder = _.reduce(this.children._views, function(viewEls, view) {\n        const index = _.indexOf(models, view.model);\n\n        if (index === -1) {\n          filteredOutModels.push(view.model);\n          return viewEls;\n        }\n\n        view._index = index;\n\n        viewEls[index] = view.el;\n\n        return viewEls;\n      }, new Array(models.length));\n\n      this.triggerMethod('before:reorder', this);\n\n      const elBuffer = this.Dom.createBuffer();\n\n      _.each(elsToReorder, (el) => {\n        this.Dom.appendContents(elBuffer, el);\n      });\n\n      // Since append moves elements that are already in the DOM, appending the elements\n      // will effectively reorder them.\n      this._appendReorderedChildren(elBuffer);\n\n      // remove any views that have been filtered out\n      this._removeChildModels(filteredOutModels);\n\n      this.triggerMethod('reorder', this);\n    }\n    return this;\n  },\n\n  // Render view after sorting. Override this method to change how the view renders\n  // after a `sort` on the collection.\n  resortView() {\n    if (this.reorderOnSort) {\n      this.reorder();\n    } else {\n      this._renderChildren();\n    }\n    return this;\n  },\n\n  // Internal method. This checks for any changes in the order of the collection.\n  // If the index of any view doesn't match, it will render.\n  _sortViews() {\n    const models = this._filteredSortedModels();\n\n    // check for any changes in sort order of views\n    const orderChanged = _.find(models, (item, index) => {\n      const view = this.children.findByModel(item);\n      return !view || view._index !== index;\n    });\n\n    if (orderChanged) {\n      this.resortView();\n    }\n  },\n\n  // Internal reference to what index a `emptyView` is.\n  _emptyViewIndex: -1,\n\n  // Internal method. Separated so that CompositeView can append to the childViewContainer\n  // if necessary\n  _appendReorderedChildren(children) {\n    this.Dom.appendContents(this.el, children, {_$el: this.$el});\n  },\n\n  // Internal method. Separated so that CompositeView can have more control over events\n  // being triggered, around the rendering process\n  _renderChildren() {\n    if (this._isRendered) {\n      this._destroyEmptyView();\n      this._destroyChildren();\n    }\n\n    const models = this._filteredSortedModels();\n    if (this.isEmpty({processedModels: models})) {\n      this._showEmptyView();\n    } else {\n      this.triggerMethod('before:render:children', this);\n      this._startBuffering();\n      this._showCollection(models);\n      this._endBuffering();\n      this.triggerMethod('render:children', this);\n    }\n  },\n\n  _createView(model, index) {\n    const ChildView = this._getChildView(model);\n    const childViewOptions = this._getChildViewOptions(model, index);\n    const view = this.buildChildView(model, ChildView, childViewOptions);\n    return view;\n  },\n\n  _setupChildView(view, index) {\n    monitorViewEvents(view);\n\n    // set up the child view event forwarding\n    this._proxyChildViewEvents(view);\n\n    if (this.sort) {\n      view._index = index;\n    }\n  },\n\n  // Internal method to loop through collection and show each child view.\n  _showCollection(models) {\n    _.each(models, _.bind(this._addChild, this));\n    this.children._updateLength();\n  },\n\n  // Allow the collection to be sorted by a custom view comparator\n  _filteredSortedModels(addedAt) {\n    if (!this.collection || !this.collection.length) { return []; }\n\n    const viewComparator = this.getViewComparator();\n    let models = this.collection.models;\n    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n    if (viewComparator) {\n      let addedModel;\n      // Preserve `at` location, even for a sorted view\n      if (addedAt) {\n        addedModel = models[addedAt];\n        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n      }\n      models = this._sortModelsBy(models, viewComparator);\n      if (addedModel) {\n        models.splice(addedAt, 0, addedModel);\n      }\n    }\n\n    // Filter after sorting in case the filter uses the index\n    models = this._filterModels(models);\n\n    return models;\n  },\n\n  getViewComparator() {\n    return this.viewComparator;\n  },\n\n  // Filter an array of models, if a filter exists\n  _filterModels(models) {\n    if (this.filter) {\n      models = _.filter(models, (model, index) => {\n        return this._shouldAddChild(model, index);\n      });\n    }\n    return models;\n  },\n\n  _sortModelsBy(models, comparator) {\n    if (typeof comparator === 'string') {\n      return _.sortBy(models, (model) => {\n        return model.get(comparator);\n      });\n    } else if (comparator.length === 1) {\n      return _.sortBy(models, _.bind(comparator, this));\n    } else {\n      return _.clone(models).sort(_.bind(comparator, this));\n    }\n  },\n\n  // Internal method to show an empty view in place of a collection of child views,\n  // when the collection is empty\n  _showEmptyView() {\n    const EmptyView = this._getEmptyView();\n\n    if (EmptyView && !this._showingEmptyView) {\n      this._showingEmptyView = true;\n\n      const model = new Backbone.Model();\n      let emptyViewOptions =\n        this.emptyViewOptions || this.childViewOptions;\n      if (_.isFunction(emptyViewOptions)) {\n        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n      }\n\n      const view = this.buildChildView(model, EmptyView, emptyViewOptions);\n\n      this.triggerMethod('before:render:empty', this, view);\n      this.addChildView(view, 0);\n      this.triggerMethod('render:empty', this, view);\n    }\n  },\n\n  // Internal method to destroy an existing emptyView instance if one exists. Called when\n  // a collection view has been rendered empty, and then a child is added to the collection.\n  _destroyEmptyView() {\n    if (this._showingEmptyView) {\n      this.triggerMethod('before:remove:empty', this);\n\n      this._destroyChildren();\n      delete this._showingEmptyView;\n\n      this.triggerMethod('remove:empty', this);\n    }\n  },\n\n  // Retrieve the empty view class\n  _getEmptyView() {\n    const emptyView = this.emptyView;\n\n    if (!emptyView) { return; }\n\n    return this._getView(emptyView);\n  },\n\n  // Retrieve the `childView` class\n  // The `childView` property can be either a view class or a function that\n  // returns a view class. If it is a function, it will receive the model that\n  // will be passed to the view instance (created from the returned view class)\n  _getChildView(child) {\n    let childView = this.childView;\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'NoChildViewError',\n        message: 'A \"childView\" must be specified'\n      });\n    }\n\n    childView = this._getView(childView, child);\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n    return childView;\n  },\n\n  // First check if the `view` is a view class (the common case)\n  // Then check if it's a function (which we assume that returns a view class)\n  _getView(view, child) {\n    if (view.prototype instanceof Backbone.View || view === Backbone.View) {\n      return view;\n    } else if (_.isFunction(view)) {\n      return view.call(this, child);\n    }\n  },\n\n  // Internal method for building and adding a child view\n  _addChild(child, index) {\n    const view = this._createView(child, index);\n    this.addChildView(view, index);\n\n    return view;\n  },\n\n  _getChildViewOptions(child, index) {\n    if (_.isFunction(this.childViewOptions)) {\n      return this.childViewOptions(child, index);\n    }\n\n    return this.childViewOptions;\n  },\n\n  // Render the child's view and add it to the HTML for the collection view at a given index.\n  // This will also update the indices of later views in the collection in order to keep the\n  // children in sync with the collection.\n  addChildView(view, index) {\n    this.triggerMethod('before:add:child', this, view);\n    this._setupChildView(view, index);\n\n    // Store the child view itself so we can properly remove and/or destroy it later\n    if (this._isBuffering) {\n      // Add to children, but don't update children's length.\n      this.children._add(view);\n    } else {\n      // increment indices of views after this one\n      this._updateIndices(view, true);\n      this.children.add(view);\n    }\n\n    renderView(view);\n\n    this._attachView(view, index);\n\n    this.triggerMethod('add:child', this, view);\n\n    return view;\n  },\n\n  // Internal method. This decrements or increments the indices of views after the added/removed\n  // view to keep in sync with the collection.\n  _updateIndices(views, increment) {\n    if (!this.sort) {\n      return;\n    }\n\n    if (!increment) {\n      _.each(_.sortBy(this.children._views, '_index'), (view, index) => {\n        view._index = index;\n      });\n\n      return;\n    }\n\n    const view = _.isArray(views) ? _.max(views, '_index') : views;\n\n    if (_.isObject(view)) {\n      // update the indexes of views after this one\n      _.each(this.children._views, (laterView) => {\n        if (laterView._index >= view._index) {\n          laterView._index += 1;\n        }\n      });\n    }\n  },\n\n  _attachView(view, index) {\n    // Only trigger attach if already attached and not buffering,\n    // otherwise _endBuffering() or Region#show() handles this.\n    const shouldTriggerAttach = !view._isAttached && !this._isBuffering && this._isAttached && this.monitorViewEvents !== false;\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    this.attachHtml(this, view, index);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n  },\n\n  // Build a `childView` for a model in the collection.\n  buildChildView(child, ChildViewClass, childViewOptions) {\n    const options = _.extend({model: child}, childViewOptions);\n    return new ChildViewClass(options);\n  },\n\n  // Remove the child view and destroy it. This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  removeChildView(view) {\n    if (!view || view._isDestroyed) {\n      return view;\n    }\n\n    this._removeChildView(view);\n    this.children._updateLength();\n    // decrement the index of views after this one\n    this._updateIndices(view, false);\n    return view;\n  },\n\n  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n  isEmpty(options) {\n    let models;\n    if (_.result(options, 'processedModels')) {\n      models = options.processedModels;\n    } else {\n      models = this.collection ? this.collection.models : [];\n      models = this._filterModels(models);\n    }\n    return models.length === 0;\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(collectionView, buffer) {\n    this.Dom.appendContents(collectionView.el, buffer, {_$el: collectionView.$el});\n  },\n\n  // Create a fragment buffer from the currently buffered children\n  _createBuffer() {\n    const elBuffer = this.Dom.createBuffer();\n    _.each(this._bufferedChildren, (b) => {\n      this.Dom.appendContents(elBuffer, b.el, {_$contents: b.$el});\n    });\n    return elBuffer;\n  },\n\n  // Append the HTML to the collection's `el`. Override this method to do something other\n  // than `.append`.\n  attachHtml(collectionView, childView, index) {\n    if (collectionView._isBuffering) {\n      // buffering happens on reset events and initial renders\n      // in order to reduce the number of inserts into the\n      // document, which are expensive.\n      collectionView._bufferedChildren.splice(index, 0, childView);\n    } else {\n      // If we've already rendered the main collection, append\n      // the new child into the correct order if we need to. Otherwise\n      // append to the end.\n      if (!collectionView._insertBefore(childView, index)) {\n        collectionView._insertAfter(childView);\n      }\n    }\n  },\n\n  // Internal method. Check whether we need to insert the view into the correct position.\n  _insertBefore(childView, index) {\n    let currentView;\n    const findPosition = this.sort && (index < this.children.length - 1);\n    if (findPosition) {\n      // Find the view after this one\n      currentView = _.find(this.children._views, (view) => {\n        return view._index === index + 1;\n      });\n    }\n\n    if (currentView) {\n      this.beforeEl(currentView.el, childView.el);\n      return true;\n    }\n\n    return false;\n  },\n\n  // Override to handle DOM inserting differently\n  beforeEl(el, siblings) {\n    this.$(el).before(siblings);\n  },\n\n  // Internal method. Append a view to the end of the $el\n  _insertAfter(childView) {\n    this.Dom.appendContents(this.el, childView.el, {_$el: this.$el, _$contents: childView.$el});\n  },\n\n  // Internal method to set up the `children` object for storing all of the child views\n  _initChildViewStorage() {\n    this.children = new ChildViewContainer();\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this._destroyChildren();\n  },\n\n  // Destroy the child views that this collection view is holding on to, if any\n  _destroyChildren(options) {\n    if (!this.children.length) {\n      return;\n    }\n\n    this.triggerMethod('before:destroy:children', this);\n    _.each(this.children._views, _.bind(this._removeChildView, this));\n    this.children._updateLength();\n    this.triggerMethod('destroy:children', this);\n  },\n\n  // Return true if the given child should be shown. Return false otherwise.\n  // The filter will be passed (child, index, collection), where\n  //  'child' is the given model\n  //  'index' is the index of that model in the collection\n  //  'collection' is the collection referenced by this CollectionView\n  _shouldAddChild(child, index) {\n    const filter = this.filter;\n    return !_.isFunction(filter) || filter.call(this, child, index, this.collection);\n  }\n}, {\n  setDomApi\n});\n\n_.extend(CollectionView.prototype, ViewMixin);\n\nexport default CollectionView;\n","import _ from 'underscore';\nimport emulateCollection from './utils/emulate-collection';\n\n// Provide a container to store, retrieve and\n// shut down child views.\nconst Container = function() {\n  this._init();\n};\n\nemulateCollection(Container.prototype, '_views');\n\nfunction stringComparator(comparator, view) {\n  return view.model && view.model.get(comparator);\n}\n\n// Container Methods\n// -----------------\n\n_.extend(Container.prototype, {\n\n  // Initializes an empty container\n  _init() {\n    this._views = [];\n    this._viewsByCid = {};\n    this._indexByModel = {};\n    this._updateLength();\n  },\n\n  // Add a view to this container. Stores the view\n  // by `cid` and makes it searchable by the model\n  // cid (and model itself). Additionally it stores\n  // the view by index in the _views array\n  _add(view, index = this._views.length) {\n    const viewCid = view.cid;\n\n    // store the view\n    this._viewsByCid[viewCid] = view;\n\n    // index it by model\n    if (view.model) {\n      this._indexByModel[view.model.cid] = viewCid;\n    }\n\n    // add to end by default\n    this._views.splice(index, 0, view);\n\n    this._updateLength();\n  },\n\n  // Sort (mutate) and return the array of the child views.\n  _sort(comparator) {\n    if (typeof comparator === 'string') {\n      comparator = _.partial(stringComparator, comparator);\n      return this._sortBy(comparator);\n    }\n\n    if (comparator.length === 1) {\n      return this._sortBy(comparator);\n    }\n\n    return this._views.sort(comparator);\n  },\n\n  // Makes `_.sortBy` mutate the array to match `this._views.sort`\n  _sortBy(comparator) {\n    const sortedViews = _.sortBy(this._views, comparator);\n\n    this._set(sortedViews);\n\n    return sortedViews;\n  },\n\n  // Replace array contents without overwriting the reference.\n  _set(views) {\n    this._views.length = 0;\n\n    this._views.push.apply(this._views, views.slice(0));\n\n    this._updateLength();\n  },\n\n  // Swap views by index\n  _swap(view1, view2) {\n    const view1Index = this.findIndexByView(view1);\n    const view2Index = this.findIndexByView(view2);\n\n    if (view1Index === -1 || view2Index === -1) {\n      return;\n    }\n\n    const swapView = this._views[view1Index];\n    this._views[view1Index] = this._views[view2Index];\n    this._views[view2Index] = swapView;\n  },\n\n  // Find a view by the model that was attached to it.\n  // Uses the model's `cid` to find it.\n  findByModel(model) {\n    return this.findByModelCid(model.cid);\n  },\n\n  // Find a view by the `cid` of the model that was attached to it.\n  // Uses the model's `cid` to find the view `cid` and\n  // retrieve the view using it.\n  findByModelCid(modelCid) {\n    const viewCid = this._indexByModel[modelCid];\n    return this.findByCid(viewCid);\n  },\n\n  // Find a view by index.\n  findByIndex(index) {\n    return this._views[index];\n  },\n\n  // Find the index of a view instance\n  findIndexByView(view) {\n    return this._views.indexOf(view);\n  },\n\n  // Retrieve a view by its `cid` directly\n  findByCid(cid) {\n    return this._viewsByCid[cid];\n  },\n\n  hasView(view) {\n    return !!this.findByCid(view.cid);\n  },\n\n  // Remove a view and clean up index references.\n  _remove(view) {\n    if (!this._viewsByCid[view.cid]) {\n      return;\n    }\n\n    // delete model index\n    if (view.model) {\n      delete this._indexByModel[view.model.cid];\n    }\n\n    // remove the view from the container\n    delete this._viewsByCid[view.cid];\n\n    const index = this.findIndexByView(view);\n    this._views.splice(index, 1);\n\n    this._updateLength();\n  },\n\n  // Update the `.length` attribute on this container\n  _updateLength() {\n    this.length = this._views.length;\n  }\n});\n\nexport default Container;\n","// Next Collection View\n// ---------------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport { renderView, destroyView } from './common/view';\nimport isNodeAttached from './common/is-node-attached';\nimport monitorViewEvents from './common/monitor-view-events';\nimport { triggerMethodOn } from './common/trigger-method';\nimport ChildViewContainer from './next-child-view-container';\nimport MarionetteError from './error';\nimport Region from './region';\nimport ViewMixin from './mixins/view';\nimport { setDomApi } from './config/dom';\n\nconst ClassOptions = [\n  'behaviors',\n  'childView',\n  'childViewEventPrefix',\n  'childViewEvents',\n  'childViewOptions',\n  'childViewTriggers',\n  'collectionEvents',\n  'emptyView',\n  'emptyViewOptions',\n  'events',\n  'modelEvents',\n  'sortWithCollection',\n  'triggers',\n  'ui',\n  'viewComparator',\n  'viewFilter'\n];\n\n// A view that iterates over a Backbone.Collection\n// and renders an individual child view for each model.\nconst CollectionView = Backbone.View.extend({\n  // flag for maintaining the sorted order of the collection\n  sortWithCollection: true,\n\n  // constructor\n  constructor(options) {\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    monitorViewEvents(this);\n\n    this.once('render', this._initialEvents);\n\n    // This children container isn't really used by a render, but it provides\n    // the ability to check `this.children.length` prior to rendering\n    // It also allows for cases where only addChildView is used\n    this._initChildViewStorage();\n    this._initBehaviors();\n\n    const args = Array.prototype.slice.call(arguments);\n    args[0] = this.options;\n    Backbone.View.prototype.constructor.apply(this, args);\n\n    this._initEmptyRegion();\n\n    this.delegateEntityEvents();\n\n    this._triggerEventOnBehaviors('initialize', this);\n  },\n\n  // Internal method to set up the `children` object for storing all of the child views\n  _initChildViewStorage() {\n    this.children = new ChildViewContainer();\n  },\n\n  // Create an region to show the emptyView\n  _initEmptyRegion() {\n    this.emptyRegion = new Region({ el: this.el, replaceElement: false });\n\n    this.emptyRegion._parentView = this;\n  },\n\n  // Configured the initial events that the collection view binds to.\n  _initialEvents() {\n    this.listenTo(this.collection, {\n      'sort': this._onCollectionSort,\n      'reset': this._onCollectionReset,\n      'update': this._onCollectionUpdate\n    });\n  },\n\n  // Internal method. This checks for any changes in the order of the collection.\n  // If the index of any view doesn't match, it will re-sort.\n  _onCollectionSort() {\n    if (!this.sortWithCollection || this.viewComparator === false) {\n      return;\n    }\n\n    // If the data is changing we will handle the sort later\n    if (this.collection.length !== this.children.length) {\n      return;\n    }\n\n    // Additional check if the data is changing\n    const hasAddedModel = this.collection.some(model => {\n      return !this.children.findByModel(model);\n    });\n\n    if (hasAddedModel) {\n      return;\n    }\n\n    // If the only thing happening here is sorting, sort.\n    this.sort();\n  },\n\n  _onCollectionReset() {\n    this.render();\n  },\n\n  // Handle collection update model additions and  removals\n  _onCollectionUpdate(collection, options) {\n    const changes = options.changes;\n\n    // Remove first since it'll be a shorter array lookup.\n    const removedViews = this._removeChildModels(changes.removed);\n\n    this._addedViews = this._addChildModels(changes.added);\n\n    this._detachChildren(removedViews);\n\n    this._showChildren();\n\n    // Destroy removed child views after all of the render is complete\n    this._removeChildViews(removedViews);\n  },\n\n  _removeChildModels(models) {\n    return _.map(models, _.bind(this._removeChildModel, this));\n  },\n\n  _removeChildModel(model) {\n    const view = this.children.findByModel(model);\n\n    this._removeChild(view);\n\n    return view;\n  },\n\n  _removeChild(view) {\n    this.triggerMethod('before:remove:child', this, view);\n\n    this.children._remove(view);\n\n    this.triggerMethod('remove:child', this, view);\n  },\n\n  // Added views are returned for consistency with _removeChildModels\n  _addChildModels(models) {\n    return _.map(models, _.bind(this._addChildModel, this));\n  },\n\n  _addChildModel(model) {\n    const view = this._createChildView(model);\n\n    this._addChild(view);\n\n    return view;\n  },\n\n  _createChildView(model) {\n    const ChildView = this._getChildView(model);\n    const childViewOptions = this._getChildViewOptions(model);\n    const view = this.buildChildView(model, ChildView, childViewOptions);\n\n    return view;\n  },\n\n  _addChild(view, index) {\n    this.triggerMethod('before:add:child', this, view);\n\n    this._setupChildView(view);\n    this.children._add(view, index);\n\n    this.triggerMethod('add:child', this, view);\n  },\n\n  // Retrieve the `childView` class\n  // The `childView` property can be either a view class or a function that\n  // returns a view class. If it is a function, it will receive the model that\n  // will be passed to the view instance (created from the returned view class)\n  _getChildView(child) {\n    let childView = this.childView;\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'NoChildViewError',\n        message: 'A \"childView\" must be specified'\n      });\n    }\n\n    childView = this._getView(childView, child);\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n    return childView;\n  },\n\n  // First check if the `view` is a view class (the common case)\n  // Then check if it's a function (which we assume that returns a view class)\n  _getView(view, child) {\n    if (view.prototype instanceof Backbone.View || view === Backbone.View) {\n      return view;\n    } else if (_.isFunction(view)) {\n      return view.call(this, child);\n    }\n  },\n\n  _getChildViewOptions(child) {\n    if (_.isFunction(this.childViewOptions)) {\n      return this.childViewOptions(child);\n    }\n\n    return this.childViewOptions;\n  },\n\n  // Build a `childView` for a model in the collection.\n  // Override to customize the build\n  buildChildView(child, ChildViewClass, childViewOptions) {\n    const options = _.extend({model: child}, childViewOptions);\n    return new ChildViewClass(options);\n  },\n\n  _setupChildView(view) {\n    monitorViewEvents(view);\n\n    // We need to listen for if a view is destroyed in a way other\n    // than through the CollectionView.\n    // If this happens we need to remove the reference to the view\n    // since once a view has been destroyed we can not reuse it.\n    view.on('destroy', this.removeChildView, this);\n\n    // set up the child view event forwarding\n    this._proxyChildViewEvents(view);\n  },\n\n  // used by ViewMixin's `_childViewEventHandler`\n  _getImmediateChildren() {\n    return this.children._views;\n  },\n\n  // Overriding Backbone.View's `setElement` to handle\n  // if an el was previously defined. If so, the view might be\n  // attached on setElement.\n  setElement() {\n    const hasEl = !!this.el;\n\n    Backbone.View.prototype.setElement.apply(this, arguments);\n\n    if (hasEl) {\n      this._isAttached = isNodeAttached(this.el);\n    }\n\n    return this;\n  },\n\n  // Render children views.\n  render() {\n    if (this._isDestroyed) { return this; }\n    this.triggerMethod('before:render', this);\n\n    this._destroyChildren();\n\n    // After all children have been destroyed re-init the container\n    this.children._init();\n\n    if (this.collection) {\n      this._addChildModels(this.collection.models);\n    }\n\n    this._showChildren();\n\n    this._isRendered = true;\n\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  // Sorts the children then filters and renders the results.\n  sort() {\n    if (this._isDestroyed) { return this; }\n\n    if (!this.children.length) { return this; }\n\n    this._showChildren();\n\n    return this;\n  },\n\n  _showChildren() {\n    if (this.isEmpty()) {\n      this._showEmptyView();\n      return;\n    }\n\n    this._sortChildren();\n\n    this.filter();\n  },\n\n  // Returns true if the collectionView is considered empty.\n  // This is called twice during a render. Once to check the data,\n  // and again when views are filtered. Override this function to\n  // customize what empty means.\n  isEmpty(allViewsFiltered) {\n    return allViewsFiltered || !this.children.length;\n  },\n\n  _showEmptyView() {\n    const EmptyView = this._getEmptyView();\n\n    if (!EmptyView) {\n      return;\n    }\n\n    const options = this._getEmptyViewOptions();\n\n    this.emptyRegion.show(new EmptyView(options));\n  },\n\n  // Retrieve the empty view class\n  _getEmptyView() {\n    const emptyView = this.emptyView;\n\n    if (!emptyView) { return; }\n\n    return this._getView(emptyView);\n  },\n\n  // Remove the emptyView\n  _destroyEmptyView() {\n\n    // Only empty if a view is show so the region\n    // doesn't detach any other unrelated HTML\n    if (this.emptyRegion.hasView()) {\n      this.emptyRegion.empty();\n    }\n  },\n\n  //\n  _getEmptyViewOptions() {\n    const emptyViewOptions = this.emptyViewOptions || this.childViewOptions;\n\n    if (_.isFunction(emptyViewOptions)) {\n      return emptyViewOptions.call(this);\n    }\n\n    return emptyViewOptions;\n  },\n\n  // Sorts views by viewComparator and sets the children to the new order\n  _sortChildren() {\n    if (this.viewComparator === false) { return; }\n\n    this.triggerMethod('before:sort', this);\n\n    let viewComparator = this.getComparator();\n\n    if (_.isFunction(viewComparator)) {\n      // Must use native bind to preserve length\n      viewComparator = viewComparator.bind(this);\n    }\n\n    this.children._sort(viewComparator);\n\n    this.triggerMethod('sort', this);\n  },\n\n  // Sets the view's `viewComparator` and applies the sort if the view is ready.\n  // To prevent the render pass `{ preventRender: true }` as the 2nd argument.\n  setComparator(comparator, {preventRender} = {}) {\n    const comparatorChanged = this.viewComparator !== comparator;\n    const shouldSort = comparatorChanged && !preventRender;\n\n    this.viewComparator = comparator;\n\n    if (shouldSort) {\n      this.sort();\n    }\n\n    return this;\n  },\n\n  // Clears the `viewComparator` and follows the same rules for rendering as `setComparator`.\n  removeComparator(options) {\n    return this.setComparator(null, options);\n  },\n\n  // If viewComparator is overriden it will be returned here.\n  // Additionally override this function to provide custom\n  // viewComparator logic\n  getComparator() {\n    return this.viewComparator || this._viewComparator;\n  },\n\n  // Default internal view comparator that order the views by\n  // the order of the collection\n  _viewComparator(view) {\n    if (!this.collection) { return; }\n    return this.collection.indexOf(view.model);\n  },\n\n  // This method re-filters the children views and re-renders the results\n  filter() {\n    if (this._isDestroyed) { return this; }\n\n    if (!this.children.length) { return this; }\n\n    const filteredViews = this._filterChildren();\n\n    this._renderChildren(filteredViews);\n\n    return this;\n  },\n\n  _isAddedAtEnd(addedView, index, addedViews) {\n    const viewIndex = this.children._views.length - addedViews.length + index;\n    return addedView === this.children._views[viewIndex];\n  },\n\n  _filterChildren() {\n    const viewFilter = this._getFilter();\n    const addedViews = this._addedViews;\n\n    delete this._addedViews;\n\n    if (!viewFilter) {\n      if (addedViews && _.every(addedViews, _.bind(this._isAddedAtEnd, this))) {\n        return addedViews;\n      }\n\n      return this.children._views;\n    }\n\n    this.triggerMethod('before:filter', this);\n\n    const filteredViews = _.partition(this.children._views, _.bind(viewFilter, this));\n\n    this._detachChildren(filteredViews[1]);\n\n    this.triggerMethod('filter', this);\n\n    return filteredViews[0];\n  },\n\n  // This method returns a function for the viewFilter\n  _getFilter() {\n    const viewFilter = this.getFilter();\n\n    if (!viewFilter) { return false; }\n\n    if (_.isFunction(viewFilter)) {\n      return viewFilter;\n    }\n\n    // Support filter predicates `{ fooFlag: true }`\n    if (_.isObject(viewFilter)) {\n      const matcher = _.matches(viewFilter);\n      return function(view) {\n        return matcher(view.model && view.model.attributes);\n      };\n    }\n\n    // Filter by model attribute\n    if (_.isString(viewFilter)) {\n      return function(view) {\n        return view.model && view.model.get(viewFilter);\n      };\n    }\n\n    throw new MarionetteError({\n      name: 'InvalidViewFilterError',\n      message: '\"viewFilter\" must be a function, predicate object literal, a string indicating a model attribute, or falsy'\n    });\n  },\n\n  // Override this function to provide custom\n  // viewFilter logic\n  getFilter() {\n    return this.viewFilter;\n  },\n\n  // Sets the view's `viewFilter` and applies the filter if the view is ready.\n  // To prevent the render pass `{ preventRender: true }` as the 2nd argument.\n  setFilter(filter, {preventRender} = {}) {\n    const filterChanged = this.viewFilter !== filter;\n    const shouldRender = filterChanged && !preventRender;\n\n    this.viewFilter = filter;\n\n    if (shouldRender) {\n      this.filter();\n    }\n\n    return this;\n  },\n\n  // Clears the `viewFilter` and follows the same rules for rendering as `setFilter`.\n  removeFilter(options) {\n    return this.setFilter(null, options);\n  },\n\n  _detachChildren(detachingViews) {\n    _.each(detachingViews, _.bind(this._detachChildView, this));\n  },\n\n  _detachChildView(view) {\n    const shouldTriggerDetach = view._isAttached && this.monitorViewEvents !== false;\n    if (shouldTriggerDetach) {\n      triggerMethodOn(view, 'before:detach', view);\n    }\n\n    this.detachHtml(view);\n\n    if (shouldTriggerDetach) {\n      view._isAttached = false;\n      triggerMethodOn(view, 'detach', view);\n    }\n  },\n\n  // Override this method to change how the collectionView detaches a child view\n  detachHtml(view) {\n    this.Dom.detachEl(view.el, view.$el);\n  },\n\n  _renderChildren(views) {\n    if (this.isEmpty(!views.length)) {\n      this._showEmptyView();\n      return;\n    }\n\n    this._destroyEmptyView();\n\n    this.triggerMethod('before:render:children', this, views);\n\n    const els = this._getBuffer(views);\n\n    this._attachChildren(els, views);\n\n    this.triggerMethod('render:children', this, views);\n  },\n\n  _attachChildren(els, views) {\n    const shouldTriggerAttach = this._isAttached && this.monitorViewEvents !== false;\n\n    views = shouldTriggerAttach ? views : [];\n\n    _.each(views, view => {\n      if (view._isAttached) { return; }\n      triggerMethodOn(view, 'before:attach', view);\n    });\n\n    this.attachHtml(els);\n\n    _.each(views, view => {\n      if (view._isAttached) { return; }\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    });\n  },\n\n  // Renders each view in children and creates a fragment buffer from them\n  _getBuffer(views) {\n    const elBuffer = this.Dom.createBuffer();\n\n    _.each(views, view => {\n      renderView(view);\n      this.Dom.appendContents(elBuffer, view.el, {_$contents: view.$el});\n    });\n\n    return elBuffer;\n  },\n\n  // Override this method to do something other than `.append`.\n  // You can attach any HTML at this point including the els.\n  attachHtml(els) {\n    this.Dom.appendContents(this.el, els, {_$el: this.$el});\n  },\n\n  swapChildViews(view1, view2) {\n    if (!this.children.hasView(view1) || !this.children.hasView(view2)) {\n      throw new MarionetteError({\n        name: 'ChildSwapError',\n        message: 'Both views must be children of the collection view'\n      });\n    }\n\n    this.children._swap(view1, view2);\n    this.Dom.swapEl(view1.el, view2.el);\n\n    // If the views are not filtered the same, refilter\n    if (this.Dom.hasEl(this.el, view1.el) !== this.Dom.hasEl(this.el, view2.el)) {\n      this.filter();\n    }\n\n    return this;\n  },\n\n  // Render the child's view and add it to the HTML for the collection view at a given index, based on the current sort\n  addChildView(view, index) {\n    if (!view || view._isDestroyed) {\n      return view;\n    }\n\n    this._addChild(view, index);\n    this._addedViews = [view];\n    this._showChildren();\n\n    return view;\n  },\n\n  // Detach a view from the children.  Best used when adding a\n  // childView from `addChildView`\n  detachChildView(view) {\n    this.removeChildView(view, { shouldDetach: true });\n\n    return view;\n  },\n\n  // Remove the child view and destroy it.  Best used when adding a\n  // childView from `addChildView`\n  // The options argument is for internal use only\n  removeChildView(view, options) {\n    if (!view) {\n      return view;\n    }\n\n    this._removeChildView(view, options);\n\n    this._removeChild(view);\n\n    if (this.isEmpty()) {\n      this._showEmptyView();\n    }\n\n    return view;\n  },\n\n  _removeChildViews(views) {\n    _.each(views, _.bind(this._removeChildView, this));\n  },\n\n  _removeChildView(view, {shouldDetach} = {}) {\n    view.off('destroy', this.removeChildView, this);\n\n    if (shouldDetach) {\n      this._detachChildView(view);\n    } else {\n      this._destroyChildView(view);\n    }\n\n    this.stopListening(view);\n  },\n\n  _destroyChildView(view) {\n    if (view._isDestroyed) {\n      return;\n    }\n\n    view._shouldDisableEvents = this.monitorViewEvents === false;\n    destroyView(view);\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this._destroyChildren();\n    this.emptyRegion.destroy();\n    delete this._addedViews;\n  },\n\n  // Destroy the child views that this collection view is holding on to, if any\n  _destroyChildren() {\n    if (!this.children || !this.children.length) {\n      return;\n    }\n\n    this.triggerMethod('before:destroy:children', this);\n    if (this.monitorViewEvents === false) {\n      this.Dom.detachContents();\n    }\n    _.each(this.children._views, _.bind(this._removeChildView, this));\n    this.triggerMethod('destroy:children', this);\n  }\n}, {\n  setDomApi\n});\n\n_.extend(CollectionView.prototype, ViewMixin);\n\nexport default CollectionView;\n","// Composite View\n// --------------\n\nimport _ from 'underscore';\nimport deprecate from './utils/deprecate';\nimport MarionetteError from './error';\nimport CollectionView from './collection-view';\nimport View from './view';\n\nconst ClassOptions = [\n  'childViewContainer',\n  'template',\n  'templateContext'\n];\n\n// Used for rendering a branch-leaf, hierarchical structure.\n// Extends directly from CollectionView\n// @deprecated\nconst CompositeView = CollectionView.extend({\n\n  // Setting up the inheritance chain which allows changes to\n  // Marionette.CollectionView.prototype.constructor which allows overriding\n  // option to pass '{sort: false}' to prevent the CompositeView from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  constructor(options) {\n    deprecate('CompositeView is deprecated. Convert to View at your earliest convenience');\n\n    this.mergeOptions(options, ClassOptions);\n\n    CollectionView.prototype.constructor.apply(this, arguments);\n  },\n\n  // Configured the initial events that the composite view\n  // binds to. Override this method to prevent the initial\n  // events, or to add your own initial events.\n  _initialEvents() {\n\n    // Bind only after composite view is rendered to avoid adding child views\n    // to nonexistent childViewContainer\n\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'update', this._onCollectionUpdate);\n      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n      if (this.sort) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Retrieve the `childView` to be used when rendering each of\n  // the items in the collection. The default is to return\n  // `this.childView` or Marionette.CompositeView if no `childView`\n  // has been defined. As happens in CollectionView, `childView` can\n  // be a function (which should return a view class).\n  _getChildView(child) {\n    let childView = this.childView;\n\n    // for CompositeView, if `childView` is not specified, we'll get the same\n    // composite view class rendered for each child in the collection\n    // then check if the `childView` is a view class (the common case)\n    // finally check if it's a function (which we assume that returns a view class)\n    if (!childView) {\n      return this.constructor;\n    }\n\n    childView = this._getView(childView, child);\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n    return childView;\n  },\n\n  // Return the serialized model\n  serializeData() {\n    return this.serializeModel();\n  },\n\n  // Renders the model and the collection.\n  render() {\n    if (this._isDestroyed) { return this; }\n    this._isRendering = true;\n    this.resetChildViewContainer();\n\n    this.triggerMethod('before:render', this);\n\n    this._renderTemplate();\n    this.bindUIElements();\n    this.renderChildren();\n\n    this._isRendering = false;\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  renderChildren() {\n    if (this._isRendered || this._isRendering) {\n      CollectionView.prototype._renderChildren.call(this);\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(compositeView, buffer) {\n    const $container = this.getChildViewContainer(compositeView);\n    this.Dom.appendContents($container[0], buffer, {_$el: $container});\n  },\n\n  // Internal method. Append a view to the end of the $el.\n  // Overidden from CollectionView to ensure view is appended to\n  // childViewContainer\n  _insertAfter(childView) {\n    const $container = this.getChildViewContainer(this, childView);\n    this.Dom.appendContents($container[0], childView.el, {_$el: $container, _$contents: childView.$el});\n  },\n\n  // Internal method. Append reordered childView'.\n  // Overidden from CollectionView to ensure reordered views\n  // are appended to childViewContainer\n  _appendReorderedChildren(children) {\n    const $container = this.getChildViewContainer(this);\n    this.Dom.appendContents($container[0], children, {_$el: $container});\n  },\n\n  // Internal method to ensure an `$childViewContainer` exists, for the\n  // `attachHtml` method to use.\n  getChildViewContainer(containerView, childView) {\n    if (!!containerView.$childViewContainer) {\n      return containerView.$childViewContainer;\n    }\n\n    let container;\n    const childViewContainer = containerView.childViewContainer;\n    if (childViewContainer) {\n\n      const selector = _.result(containerView, 'childViewContainer');\n\n      if (selector.charAt(0) === '@' && containerView.ui) {\n        container = containerView.ui[selector.substr(4)];\n      } else {\n        container = this.$(selector);\n      }\n\n      if (container.length <= 0) {\n        throw new MarionetteError({\n          name: 'ChildViewContainerMissingError',\n          message: `The specified \"childViewContainer\" was not found: ${containerView.childViewContainer}`\n        });\n      }\n\n    } else {\n      container = containerView.$el;\n    }\n\n    containerView.$childViewContainer = container;\n    return container;\n  },\n\n  // Internal method to reset the `$childViewContainer` on render\n  resetChildViewContainer() {\n    if (this.$childViewContainer) {\n      this.$childViewContainer = undefined;\n    }\n  }\n});\n\n// To prevent duplication but allow the best View organization\n// Certain View methods are mixed directly into the deprecated CompositeView\nconst MixinFromView = _.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', '_renderHtml', 'mixinTemplateContext', 'attachElContent');\n_.extend(CompositeView.prototype, MixinFromView);\n\nexport default CompositeView;\n","// Behavior\n// --------\n\n// A Behavior is an isolated set of DOM /\n// user interactions that can be mixed into any View.\n// Behaviors allow you to blackbox View specific interactions\n// into portable logical chunks, keeping your views simple and your code DRY.\n\nimport _ from 'underscore';\nimport deprecate from './utils/deprecate';\nimport getUniqueEventName from './utils/get-unique-event-name';\nimport MarionetteObject from './object';\nimport DelegateEntityEventsMixin from './mixins/delegate-entity-events';\nimport TriggersMixin from './mixins/triggers';\nimport UIMixin from './mixins/ui';\n\nconst ClassOptions = [\n  'collectionEvents',\n  'events',\n  'modelEvents',\n  'triggers',\n  'ui'\n];\n\nconst Behavior = MarionetteObject.extend({\n  cidPrefix: 'mnb',\n\n  constructor(options, view) {\n    // Setup reference to the view.\n    // this comes in handle when a behavior\n    // wants to directly talk up the chain\n    // to the view.\n    this.view = view;\n\n    if (this.defaults) {\n      deprecate('Behavior defaults are deprecated. For similar functionality set options on the Behavior class.');\n    }\n\n    this.defaults = _.clone(_.result(this, 'defaults', {}));\n\n    this._setOptions(this.defaults, options);\n    this.mergeOptions(this.options, ClassOptions);\n\n    // Construct an internal UI hash using\n    // the behaviors UI hash and then the view UI hash.\n    // This allows the user to use UI hash elements\n    // defined in the parent view as well as those\n    // defined in the given behavior.\n    // This order will help the reuse and share of a behavior\n    // between multiple views, while letting a view override a\n    // selector under an UI key.\n    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui'));\n\n    MarionetteObject.apply(this, arguments);\n  },\n\n  // proxy behavior $ method to the view\n  // this is useful for doing jquery DOM lookups\n  // scoped to behaviors view.\n  $() {\n    return this.view.$.apply(this.view, arguments);\n  },\n\n  // Stops the behavior from listening to events.\n  // Overrides Object#destroy to prevent additional events from being triggered.\n  destroy() {\n    this.stopListening();\n\n    this.view._removeBehavior(this);\n\n    return this;\n  },\n\n  proxyViewProperties() {\n    this.$el = this.view.$el;\n    this.el = this.view.el;\n\n    return this;\n  },\n\n  bindUIElements() {\n    this._bindUIElements();\n\n    return this;\n  },\n\n  unbindUIElements() {\n    this._unbindUIElements();\n\n    return this;\n  },\n\n  getUI(name) {\n    return this._getUI(name);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents() {\n    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  undelegateEntityEvents() {\n    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  getEvents() {\n    // Normalize behavior events hash to allow\n    // a user to use the @ui. syntax.\n    const behaviorEvents = this.normalizeUIKeys(_.result(this, 'events'));\n\n    // binds the handler to the behavior and builds a unique eventName\n    return _.reduce(behaviorEvents, (events, behaviorHandler, key) => {\n      if (!_.isFunction(behaviorHandler)) {\n        behaviorHandler = this[behaviorHandler];\n      }\n      if (!behaviorHandler) { return; }\n      key = getUniqueEventName(key);\n      events[key] = _.bind(behaviorHandler, this);\n      return events;\n    }, {});\n  },\n\n  // Internal method to build all trigger handlers for a given behavior\n  getTriggers() {\n    if (!this.triggers) { return; }\n\n    // Normalize behavior triggers hash to allow\n    // a user to use the @ui. syntax.\n    const behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    return this._getViewTriggers(this.view, behaviorTriggers);\n  }\n\n});\n\n_.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\nexport default Behavior;\n","// Application\n// -----------\nimport buildRegion from './common/build-region';\nimport MarionetteObject from './object';\nimport Region from './region';\n\nconst ClassOptions = [\n  'region',\n  'regionClass'\n];\n\n// A container for a Marionette application.\nconst Application = MarionetteObject.extend({\n  cidPrefix: 'mna',\n\n  constructor(options) {\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    this._initRegion();\n\n    MarionetteObject.prototype.constructor.apply(this, arguments);\n  },\n\n  regionClass: Region,\n\n  _initRegion() {\n    const region = this.region;\n\n    if (!region) { return; }\n\n    const defaults = {\n      regionClass: this.regionClass\n    };\n\n    this._region = buildRegion(region, defaults);\n  },\n\n  getRegion() {\n    return this._region;\n  },\n\n  showView(view, ...args) {\n    const region = this.getRegion();\n    return region.show(view, ...args);\n  },\n\n  getView() {\n    return this.getRegion().currentView;\n  },\n\n  // kick off all of the application's processes.\n  start(options) {\n    this.triggerMethod('before:start', this, options);\n    this.triggerMethod('start', this, options);\n    return this;\n  }\n\n});\n\nexport default Application;\n","// App Router\n// ----------\n\n// Reduce the boilerplate code of handling route events\n// and then calling a single method on another object,\n// called a controller.\n// Have your routers configured to call the method on\n// your controller, directly.\n//\n// Configure an AppRouter with `appRoutes`.\n//\n// App routers can only take one `controller` object.\n// It is recommended that you divide your controller\n// objects in to smaller pieces of related functionality\n// and have multiple routers / controllers, instead of\n// just one giant router and controller.\n//\n// You can also add standard routes to an AppRouter.\n\nimport Backbone from 'backbone';\nimport _ from 'underscore';\nimport { triggerMethod } from './common/trigger-method';\nimport MarionetteError from './error';\nimport CommonMixin from './mixins/common';\n\nconst ClassOptions = [\n  'appRoutes',\n  'controller'\n];\n\nconst AppRouter = Backbone.Router.extend({\n\n  constructor(options) {\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    Backbone.Router.apply(this, arguments);\n\n    const appRoutes = this.appRoutes;\n    const controller = this._getController();\n    this.processAppRoutes(controller, appRoutes);\n    this.on('route', this._processOnRoute, this);\n  },\n\n  // Similar to route method on a Backbone Router but\n  // method is called on the controller\n  appRoute(route, methodName) {\n    const controller = this._getController();\n    this._addAppRoute(controller, route, methodName);\n    return this;\n  },\n\n  // process the route event and trigger the onRoute\n  // method call, if it exists\n  _processOnRoute(routeName, routeArgs) {\n    // make sure an onRoute before trying to call it\n    if (_.isFunction(this.onRoute)) {\n      // find the path that matches the current route\n      const routePath = _.invert(this.appRoutes)[routeName];\n      this.onRoute(routeName, routePath, routeArgs);\n    }\n  },\n\n  // Internal method to process the `appRoutes` for the\n  // router, and turn them in to routes that trigger the\n  // specified method on the specified `controller`.\n  processAppRoutes(controller, appRoutes) {\n    if (!appRoutes) { return this; }\n\n    const routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n\n    _.each(routeNames, route => {\n      this._addAppRoute(controller, route, appRoutes[route]);\n    });\n\n    return this;\n  },\n\n  _getController() {\n    return this.controller;\n  },\n\n  _addAppRoute(controller, route, methodName) {\n    const method = controller[methodName];\n\n    if (!method) {\n      throw new MarionetteError(`Method \"${methodName}\" was not found on the controller`);\n    }\n\n    this.route(route, methodName, _.bind(method, controller));\n  },\n\n  triggerMethod: triggerMethod\n});\n\n_.extend(AppRouter.prototype, CommonMixin);\n\nexport default AppRouter;\n","import MarionetteError from '../error';\n\n// Placeholder method to be extended by the user.\n// The method should define the object that stores the behaviors.\n// i.e.\n//\n// ```js\n// Marionette.Behaviors.behaviorsLookup: function() {\n//   return App.Behaviors\n// }\n// ```\nexport default function behaviorsLookup() {\n  throw new MarionetteError({\n    message: 'You must define where your behaviors are stored.',\n    url: 'marionette.behaviors.md#behaviorslookup'\n  });\n}\n","import Backbone from 'backbone';\nimport {version} from '../package.json';\n\nimport proxy from './utils/proxy';\nimport extend from './utils/extend';\nimport deprecate from './utils/deprecate';\n\nimport isNodeAttached from './common/is-node-attached';\nimport mergeOptions from './common/merge-options';\nimport getOption from './common/get-option';\nimport normalizeMethods from './common/normalize-methods';\nimport monitorViewEvents from './common/monitor-view-events';\n\nimport {\n  bindEvents,\n  unbindEvents\n} from './common/bind-events';\n\nimport {\n  bindRequests,\n  unbindRequests\n} from './common/bind-requests';\n\nimport {\n  triggerMethod,\n  triggerMethodOn\n} from './common/trigger-method';\n\n\nimport MarionetteObject from './object';\nimport TemplateCache from './template-cache';\nimport View from './view';\nimport CollectionView from './collection-view';\nimport NextCollectionView from './next-collection-view';\nimport CompositeView from './composite-view';\nimport Behavior from './behavior';\nimport Region from './region';\nimport Application from './application';\nimport AppRouter from './app-router';\nimport MarionetteError from './error';\n\nimport behaviorsLookup from './config/behaviors-lookup';\nimport DomApi from './config/dom';\nimport Renderer from './config/renderer';\n\nimport {\n  FEATURES,\n  isEnabled,\n  setEnabled\n} from './config/features';\n\nconst previousMarionette = Backbone.Marionette;\nconst Marionette = Backbone.Marionette = {};\n\n// This allows you to run multiple instances of Marionette on the same\n// webapp. After loading the new version, call `noConflict()` to\n// get a reference to it. At the same time the old version will be\n// returned to Backbone.Marionette.\nMarionette.noConflict = function() {\n  Backbone.Marionette = previousMarionette;\n  return this;\n};\n\n// Utilities\nMarionette.bindEvents = proxy(bindEvents);\nMarionette.unbindEvents = proxy(unbindEvents);\nMarionette.bindRequests = proxy(bindRequests);\nMarionette.unbindRequests = proxy(unbindRequests);\nMarionette.mergeOptions = proxy(mergeOptions);\nMarionette.getOption = proxy(getOption);\nMarionette.normalizeMethods = proxy(normalizeMethods);\nMarionette.extend = extend;\nMarionette.isNodeAttached = isNodeAttached;\nMarionette.deprecate = deprecate;\nMarionette.triggerMethod = proxy(triggerMethod);\nMarionette.triggerMethodOn = triggerMethodOn;\nMarionette.isEnabled = isEnabled;\nMarionette.setEnabled = setEnabled;\nMarionette.monitorViewEvents = monitorViewEvents;\n\nMarionette.Behaviors = {};\nMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\n\n// Classes\nMarionette.Application = Application;\nMarionette.AppRouter = AppRouter;\nMarionette.Renderer = Renderer;\nMarionette.TemplateCache = TemplateCache;\nMarionette.View = View;\nMarionette.CollectionView = CollectionView;\nMarionette.NextCollectionView = NextCollectionView;\nMarionette.CompositeView = CompositeView;\nMarionette.Behavior = Behavior;\nMarionette.Region = Region;\nMarionette.Error = MarionetteError;\nMarionette.Object = MarionetteObject;\n\n// Configuration\nMarionette.DEV_MODE = false;\nMarionette.FEATURES = FEATURES;\nMarionette.VERSION = version;\nMarionette.DomApi = DomApi;\nMarionette.setDomApi = function(mixin) {\n  CollectionView.setDomApi(mixin);\n  CompositeView.setDomApi(mixin);\n  NextCollectionView.setDomApi(mixin);\n  Region.setDomApi(mixin);\n  View.setDomApi(mixin);\n};\n\nexport default Marionette;\n"],"names":["proxy","method","context","args","apply","extend","Backbone","Model","deprecate","message","test","_","isObject","prev","next","url","Marionette","DEV_MODE","undefined","_cache","_warn","_console","console","warn","log","noop","arguments","isNodeAttached","el","document","documentElement","contains","parentNode","mergeOptions","options","keys","each","key","option","getOption","optionName","normalizeMethods","hash","reduce","normalizedHash","name","isFunction","splitter","getEventName","match","prefix","eventName","toUpperCase","getOnMethodName","memoize","event","replace","triggerMethod","methodName","call","result","trigger","triggerMethodOn","triggerMethodChildren","view","shouldTrigger","_getImmediateChildren","child","shouldTriggerAttach","_isAttached","shouldAttach","shouldTriggerDetach","shouldDetach","triggerDOMRefresh","_isRendered","triggerDOMRemove","handleBeforeAttach","handleAttach","handleBeforeDetach","handleDetach","handleBeforeRender","handleRender","monitorViewEvents","_areViewEventsMonitored","on","errorProps","MarionetteError","Error","version","error","pick","captureStackTrace","urlRoot","bindFromStrings","target","entity","evt","methods","actionName","methodNames","split","iterateEvents","bindings","isString","bindEvents","unbindEvents","iterateReplies","channel","normalizedRadioRequests","bindRequests","unbindRequests","setOptions","channelName","Radio","_channel","radioEvents","radioRequests","_destroyRadio","stopReplying","ClassOptions","MarionetteObject","hasOwnProperty","_setOptions","_setCid","_initRadio","initialize","prototype","Events","CommonMixin","RadioMixin","_isDestroyed","cid","uniqueId","cidPrefix","stopListening","TemplateCache","templateId","cachedTemplate","templateCaches","load","i","length","compiledTemplate","template","loadTemplate","compileTemplate","$template","$","html","rawTemplate","invokeMap","invoke","getBehaviorClass","behaviorClass","Behaviors","behaviorsLookup","parseBehaviors","behaviors","chain","map","BehaviorClass","_options","behavior","nestedBehaviors","concat","flatten","value","_behaviors","_getBehaviors","triggers","_invoke","memo","_triggers","events","_events","without","model","collection","_undelegateEntityEvents","modelEvents","collectionEvents","delegateEventSplitter","uniqueName","selector","getUniqueEventName","FEATURES","isEnabled","setEnabled","state","buildViewTrigger","triggerDef","shouldPreventDefault","preventDefault","shouldStopPropagation","stopPropagation","normalizeUIKeys","ui","val","normalizedKey","normalizeUIString","uiString","r","slice","normalizeUIValues","properties","isArray","property","propertyVal","uiBindings","_getUIBindings","_uiBindings","_ui","$el","getEl","setDomApi","mixin","Dom","createDocumentFragment","_$el","find","childEl","detach","newEl","oldEl","parent","replaceChild","el1","el2","parent1","parent2","next1","nextSibling","next2","insertBefore","contents","_$contents","append","hasChildNodes","ViewMixin","DomApi","eventsArg","_proxyBehaviorViewProperties","_buildEventProxies","viewEvents","_getEvents","combinedEvents","_getBehaviorEvents","_getBehaviorTriggers","getTriggers","View","delegateEvents","_getViewTriggers","_delegateEntityEvents","_delegateBehaviorEntityEvents","_undelegateBehaviorEntityEvents","_shouldDisableEvents","unbindUIElements","_removeElement","_removeChildren","_destroyBehaviors","off","removeData","detachEl","_bindUIElements","_bindBehaviorUIElements","_unbindUIElements","_unbindBehaviorUIElements","_getUI","ret","_triggerEventOnBehaviors","_childViewEvents","_childViewTriggers","listenTo","_childViewEventHandler","childViewEvents","childViewTriggers","childEventName","BehaviorsMixin","DelegateEntityEventsMixin","TriggersMixin","UIMixin","renderView","supportsRenderLifecycle","render","destroyView","destroy","supportsDestroyLifecycle","remove","Region","_initEl","_ensureElement","_getView","currentView","_isSwappingView","empty","_setupChildView","_attachView","_proxyChildViewEvents","_empty","parentView","_parentView","_shouldDisableMonitoring","shouldReplaceEl","replaceElement","_replaceEl","attachHtml","allowMissingEl","viewOptions","_getViewOptions","findEl","_restoreEl","replaceEl","_isReplaced","_detachView","appendContents","detachHtml","shouldDestroy","preventDestroy","removeView","_stopChildViewEvents","shouldRestoreEl","detachContents","reset","_name","_removeReferences","definition","defaults","buildRegionFromDefinition","opts","buildRegionFromObject","regionClass","RegionClass","omit","regions","_regions","addRegions","isEmpty","_addRegions","regionDefinitions","partial","buildRegion","_addRegion","region","_removeRegion","_getRegions","bind","getRegions","getRegion","clone","show","detachView","Renderer","data","templateFunc","get","_initBehaviors","_initRegions","Array","constructor","delegateEntityEvents","serializeModel","serializeCollection","attributes","hasEl","setElement","hasContents","bindUIElements","_reInitRegions","_renderTemplate","getTemplate","mixinTemplateContext","serializeData","_renderHtml","attachElContent","templateContext","setContents","removeRegions","compact","renderer","RegionsMixin","emulateCollection","object","listProperty","list","Container","views","_views","_indexByModel","_indexByCustom","_updateLength","add","values","customIndex","_add","viewCid","findByModelCid","modelCid","findByCid","index","_remove","some","size","CollectionView","once","_initialEvents","_initChildViewStorage","_bufferedChildren","_isBuffering","triggerOnChildren","attachBuffer","_createBuffer","children","_onCollectionAdd","_onCollectionUpdate","sort","_sortViews","at","indexOf","filter","_filteredSortedModels","_shouldAddChild","_destroyEmptyView","_addChild","changes","_removeChildModels","removed","models","removedViews","_getRemovedViews","_updateIndices","_showEmptyView","removingViews","findByModel","_removeChildView","push","_renderChildren","preventRender","canBeRendered","filterChanged","shouldRender","previousModels","_applyModelDeltas","setFilter","currentIds","addedChildNotExists","removeModels","prevModel","_showingEmptyView","anyModelsAdded","filteredOutModels","elsToReorder","viewEls","_index","elBuffer","createBuffer","_appendReorderedChildren","reorderOnSort","reorder","orderChanged","item","resortView","_destroyChildren","processedModels","_startBuffering","_showCollection","_endBuffering","ChildView","_getChildView","childViewOptions","_getChildViewOptions","buildChildView","addedAt","viewComparator","getViewComparator","Math","min","max","addedModel","_sortModelsBy","splice","_filterModels","comparator","sortBy","EmptyView","_getEmptyView","emptyViewOptions","_emptyViewIndex","addChildView","emptyView","childView","_createView","increment","laterView","ChildViewClass","collectionView","buffer","b","_insertBefore","_insertAfter","findPosition","beforeEl","siblings","before","ChildViewContainer","_init","stringComparator","_viewsByCid","_sortBy","sortedViews","_set","view1","view2","view1Index","findIndexByView","view2Index","swapView","_initEmptyRegion","emptyRegion","_onCollectionSort","_onCollectionReset","sortWithCollection","hasAddedModel","_addedViews","_addChildModels","added","_detachChildren","_showChildren","_removeChildViews","_removeChildModel","_removeChild","_addChildModel","_createChildView","removeChildView","_sortChildren","allViewsFiltered","_getEmptyViewOptions","hasView","getComparator","_sort","comparatorChanged","shouldSort","setComparator","_viewComparator","filteredViews","_filterChildren","addedView","addedViews","viewIndex","viewFilter","_getFilter","every","_isAddedAtEnd","partition","getFilter","matcher","matches","detachingViews","_detachChildView","els","_getBuffer","_attachChildren","_swap","swapEl","_destroyChildView","CompositeView","renderChildren","_isRendering","resetChildViewContainer","compositeView","$container","getChildViewContainer","containerView","$childViewContainer","container","childViewContainer","charAt","substr","MixinFromView","Behavior","_removeBehavior","behaviorEvents","behaviorHandler","behaviorTriggers","Application","_initRegion","_region","AppRouter","Router","appRoutes","controller","_getController","processAppRoutes","_processOnRoute","route","_addAppRoute","routeName","routeArgs","onRoute","routePath","invert","routeNames","reverse","previousMarionette","noConflict","NextCollectionView","Object","VERSION"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}