{"version":3,"sources":["backbone.marionette.min.js","/source/src/trigger-method.js","/source/src/monitor-view-events.js","/source/src/bind-entity-events.js","/source/src/bind-radio-requests.js","/source/src/mixins/behaviors.js","/source/src/utils/getUniqueEventName.js","/source/src/mixins/triggers.js","/source/src/utils/destroyBackboneView.js","/source/src/config/behaviors-lookup.js","/source/src/config/features.js","/source/src/utils/_proxy.js","/source/src/utils/extend.js","/source/src/utils/isNodeAttached.js","/source/src/utils/mergeOptions.js","/source/src/utils/getOption.js","/source/src/utils/normalizeMethods.js","/source/src/utils/deprecate.js","/source/src/utils/_setOptions.js","/source/src/error.js","/source/src/mixins/common.js","/source/node_modules/backbone.radio/build/backbone.radio.js","/source/src/mixins/radio.js","/source/src/object.js","/source/src/template-cache.js","/source/src/renderer.js","/source/src/utils/_invoke.js","/source/src/mixins/delegate-entity-events.js","/source/src/mixins/ui.js","/source/src/mixins/view.js","/source/src/region.js","/source/src/mixins/regions.js","/source/src/view.js","/source/node_modules/backbone.babysitter/lib/backbone.babysitter.js","/source/src/collection-view.js","/source/src/composite-view.js","/source/src/behavior.js","/source/src/application.js","/source/src/app-router.js","/source/src/backbone.marionette.js"],"names":["global","factory","exports","module","require","define","amd","Marionette","Backbone","_","this","__commonjs","fn","__commonjs_global","getEventName","match","prefix","eventName","toUpperCase","triggerMethod","event","result","methodName","replace","splitter","method","getOption","call","_len","arguments","length","args","Array","_key","isFunction","apply","trigger","concat","triggerMethodOn","context","fnc","_len2","_key2","triggerMethodChildren","view","shouldTrigger","_getImmediateChildren","each","child","shouldTriggerAttach","_isAttached","shouldAttach","shouldTriggerDetach","shouldDetach","monitorViewEvents","handleBeforeAttach","handleAttach","triggerDOMRefresh","handleBeforeDetach","handleDetach","handleRender","_isRendered","_areViewEventsMonitored","on","before:attach","attach","before:detach","detach","render","bindFromStrings","target","entity","evt","methods","actionName","methodNames","split","MarionetteError","iterateEvents","bindings","isObject","message","url","isString","bindEntityEvents","unbindEntityEvents","iterateReplies","channel","normalizedRadioRequests","normalizeMethods","bindRadioRequests","unbindRadioRequests","getBehaviorClass","options","key","behaviorClass","Behaviors","behaviorsLookup","parseBehaviors","behaviors","chain","map","BehaviorClass","_options","behavior","nestedBehaviors","flatten","value","uniqueName","selector","uniqueId","join","buildViewTrigger","triggerDef","shouldPreventDefault","preventDefault","shouldStopPropagation","stopPropagation","e","destroyBackboneView","supportsDestroyLifecycle","remove","_isDestroyed","isEnabled","name","FEATURES","setEnabled","state","window","babelHelpers","toConsumableArray","arr","isArray","i","arr2","from","version","proxy","extend","Model","isNodeAttached","el","$","contains","document","documentElement","mergeOptions","keys","pick","optionName","undefined","hash","_this","reduce","normalizedHash","deprecate","test","prev","next","DEV_MODE","_cache","_warn","_console","console","warn","log","_setOptions","errorProps","Error","urlRoot","constructor","error","captureStackTrace","toString","CommonMixin","backbone_radio","require$$1","require$$0","Radio","removeHandler","store","callback","_callback","removeHandlers","names","matched","_partial","channelName","_logs","partial","makeCallback","Symbol","iterator","obj","previousRadio","VERSION","noConflict","DEBUG","_debugText","warning","debugLog","eventSplitter","_eventsApi","action","rest","results","l","_callHandler","a1","a2","a3","drop","tuneIn","_tunedIn","tuneOut","off","Requests","request","requests","_requests","handler","reply","replyOnce","self","once","stopReplying","_channels","Channel","prototype","Events","reset","stopListening","systems","system","channels","invoke","RadioMixin","_initRadio","_channel","radioEvents","bindRadioEvents","radioRequests","_destroyRadio","getChannel","unbindRadioEvents","ClassOptions","MarionetteObject","cid","cidPrefix","initialize","isDestroyed","destroy","TemplateCache","templateId","templateCaches","get","cachedTemplate","load","clear","compiledTemplate","template","loadTemplate","compileTemplate","$template","html","rawTemplate","Renderer","data","templateFunc","_invoke","invokeMap","BehaviorsMixin","_initBehaviors","_behaviors","_getBehaviorTriggers","triggers","_getBehaviorEvents","events","_proxyBehaviorViewProperties","_delegateBehaviorEntityEvents","_undelegateBehaviorEntityEvents","_destroyBehaviors","_bindBehaviorUIElements","_unbindBehaviorUIElements","_triggerEventOnBehaviors","DelegateEntityEventsMixin","_delegateEntityEvents","model","collection","_undelegateEntityEvents","modelEvents","collectionEvents","delegateEventSplitter","getUniqueEventName","TriggersMixin","_getViewTriggers","_normalizeUIKeys","ui","memo","val","normalizedKey","normalizeUIString","uiString","r","slice","_normalizeUIValues","properties","property","propertyVal","UIMixin","normalizeUIKeys","uiBindings","_getUIBindings","normalizeUIValues","_bindUIElements","_uiBindings","_ui","_unbindUIElements","_this2","$el","_getUI","ViewMixin","supportsRenderLifecycle","isRendered","isAttached","setElement","hasEl","View","delegateEvents","eventsArg","_buildEventProxies","viewEvents","_getEvents","combinedEvents","getTriggers","delegateEntityEvents","undelegateEntityEvents","_ensureViewIsIntact","unbindUIElements","_removeElement","_removeChildren","bindUIElements","getUI","childViewEventPrefix","ret","_triggerMethod","_triggerEventOnParentLayout","_childViewEvents","_childViewTriggers","layoutView","_parentView","eventPrefix","prefixedEventName","_len3","_key3","childViewEvents","childViewTriggers","parent","_parent","Region","replaceElement","_isReplaced","_initEl","getEl","show","_ensureElement","_ensureView","currentView","empty","_renderView","_attachView","shouldReplaceEl","attachHtml","allowMissingEl","_replaceEl","_restoreEl","parentNode","replaceChild","isReplaced","shouldReplace","appendChild","_removeView","detachHtml","_ref","preventDestroy","shouldPreventDestroy","_detachView","contents","hasView","RegionsMixin","regionClass","_initRegions","regions","_regions","addRegions","_reInitRegions","addRegion","definition","isEmpty","_addRegions","regionDefinitions","_buildRegion","_addRegion","_buildRegionFromDefinition","_buildRegionFromObject","_buildRegionFromRegionClass","RegionClass","omit","defaults","parentEl","region","removeRegion","_removeRegion","removeRegions","getRegions","bind","emptyRegions","hasRegion","getRegion","clone","showChildView","getChildView","serializeData","serializeModel","items","serializeCollection","attributes","_renderTemplate","getTemplate","mixinTemplateContext","attachElContent","templateContext","compact","backbone_babysitter","root","previousChildViewContainer","ChildViewContainer","Container","views","_views","_indexByModel","_indexByCustom","_updateLength","add","customIndex","viewCid","findByModel","findByModelCid","modelCid","findByCid","findByCustom","index","findByIndex","values","any","tail","size","toArray","CollectionView","sort","_initialEvents","_initChildViewStorage","_bufferedChildren","_startBuffering","_isBuffering","_endBuffering","triggerOnChildren","attachBuffer","_createBuffer","children","listenTo","_onCollectionAdd","_onCollectionRemove","_sortViews","opts","at","indexOf","filter","_filteredSortedModels","_shouldAddChild","_destroyEmptyView","ChildView","_getChildView","_addChild","removeChildView","_checkEmpty","_renderChildren","setFilter","preventRender","canBeRendered","filterChanged","shouldRender","previousModels","models","_applyModelDeltas","removeFilter","currentIds","addedChildNotExists","prevModel","removedChildExists","reorder","_showingEmptyView","anyModelsAdded","some","elsToReorder","_index","filteredOutViews","_appendReorderedChildren","resortView","reorderOnSort","_this3","orderChanged","find","item","_emptyViewIndex","append","_destroyChildren","checkEmpty","processedModels","_showEmptyView","_showCollection","_this4","addedAt","viewComparator","getViewComparator","Math","min","max","addedModel","_sortModelsBy","splice","_filterModels","_this5","comparator","sortBy","EmptyView","getEmptyView","emptyViewOptions","childViewOptions","buildChildView","_addChildView","emptyView","childView","_getChildViewOptions","addChildView","_updateIndices","increment","laterView","_proxyChildEvents","ChildViewClass","collectionView","buffer","elBuffer","createDocumentFragment","b","_insertBefore","_insertAfter","findPosition","before","_ref2","shouldCheckEmpty","childViews","identity","childEventName","CompositeView","renderChildren","_isRendering","resetChildViewContainer","compositeView","$container","getChildViewContainer","containerView","$childViewContainer","container","childViewContainer","charAt","substr","MixinFromView","Behavior","proxyViewProperties","getEvents","behaviorEvents","behaviorHandler","behaviorTriggers","Application","_initRegion","_region","showView","getView","start","AppRouter","Router","appRoutes","controller","_getController","processAppRoutes","_processOnRoute","appRoute","route","_addAppRoute","routeName","routeArgs","onRoute","routePath","invert","routeNames","reverse","previousMarionette","Object"],"mappings":"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","file":"backbone.marionette.min.js","sourcesContent":["// MarionetteJS (Backbone.Marionette)\n// ----------------------------------\n// v3.0.0-pre.4\n//\n// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.\n// Distributed under MIT license\n//\n// http://marionettejs.com\n\n\n/*!\n* Includes BabySitter\n* https://github.com/marionettejs/backbone.babysitter/\n*\n* Includes Radio\n* https://github.com/marionettejs/backbone.radio/\n*/\n\n\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('backbone'), require('underscore')) :\n\ttypeof define === 'function' && define.amd ? define(['backbone', 'underscore'], factory) :\n\t(global.Marionette = global['Mn'] = factory(global.Backbone,global._));\n}(this, function (Backbone,_) { 'use strict';\n\n\tBackbone = 'default' in Backbone ? Backbone['default'] : Backbone;\n\t_ = 'default' in _ ? _['default'] : _;\n\n\tvar __commonjs_global = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this;\n\tfunction __commonjs(fn, module) { return module = { exports: {} }, fn(module, module.exports, __commonjs_global), module.exports; }\n\n\n\tvar babelHelpers = {};\n\n\tbabelHelpers.toConsumableArray = function (arr) {\n\t  if (Array.isArray(arr)) {\n\t    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n\t    return arr2;\n\t  } else {\n\t    return Array.from(arr);\n\t  }\n\t};\n\n\tbabelHelpers;\n\n\tvar version = \"3.0.0-pre.4\";\n\n\t//Internal utility for creating context style global utils\n\tvar proxy = function proxy(method) {\n\t  return function (context) {\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    return method.apply(context, args);\n\t  };\n\t};\n\n\t// Borrow the Backbone `extend` method so we can use it as needed\n\tvar extend = Backbone.Model.extend;\n\n\t// Determine if `el` is a child of the document\n\tvar isNodeAttached = function isNodeAttached(el) {\n\t  return Backbone.$.contains(document.documentElement, el);\n\t};\n\n\t// Merge `keys` from `options` onto `this`\n\tvar mergeOptions = function mergeOptions(options, keys) {\n\t  if (!options) {\n\t    return;\n\t  }\n\t  _.extend(this, _.pick(options, keys));\n\t};\n\n\t// Marionette.getOption\n\t// --------------------\n\n\t// Retrieve an object, function or other value from the\n\t// object or its `options`, with `options` taking precedence.\n\tvar getOption = function getOption(optionName) {\n\t  if (!optionName) {\n\t    return;\n\t  }\n\t  if (this.options && this.options[optionName] !== undefined) {\n\t    return this.options[optionName];\n\t  } else {\n\t    return this[optionName];\n\t  }\n\t};\n\n\t// Marionette.normalizeMethods\n\t// ----------------------\n\n\t// Pass in a mapping of events => functions or function names\n\t// and return a mapping of events => functions\n\tvar normalizeMethods = function normalizeMethods(hash) {\n\t  var _this = this;\n\n\t  return _.reduce(hash, function (normalizedHash, method, name) {\n\t    if (!_.isFunction(method)) {\n\t      method = _this[method];\n\t    }\n\t    if (method) {\n\t      normalizedHash[name] = method;\n\t    }\n\t    return normalizedHash;\n\t  }, {});\n\t};\n\n\tvar deprecate = function deprecate(message, test) {\n\t  if (_.isObject(message)) {\n\t    message = message.prev + ' is going to be removed in the future. ' + 'Please use ' + message.next + ' instead.' + (message.url ? ' See: ' + message.url : '');\n\t  }\n\n\t  if (!Marionette.DEV_MODE) {\n\t    return;\n\t  }\n\n\t  if ((test === undefined || !test) && !deprecate._cache[message]) {\n\t    deprecate._warn('Deprecation warning: ' + message);\n\t    deprecate._cache[message] = true;\n\t  }\n\t};\n\n\tdeprecate._console = typeof console !== 'undefined' ? console : {};\n\tdeprecate._warn = function () {\n\t  var warn = deprecate._console.warn || deprecate._console.log || function () {};\n\t  return warn.apply(deprecate._console, arguments);\n\t};\n\tdeprecate._cache = {};\n\n\t// split the event name on the \":\"\n\tvar splitter = /(^|:)(\\w)/gi;\n\n\t// take the event section (\"section1:section2:section3\")\n\t// and turn it in to uppercase name onSection1Section2Section3\n\tfunction getEventName(match, prefix, eventName) {\n\t  return eventName.toUpperCase();\n\t}\n\n\t// Trigger an event and/or a corresponding method name. Examples:\n\t//\n\t// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n\t// call the \"onFoo\" method.\n\t//\n\t// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n\t// call the \"onFooBar\" method.\n\tfunction triggerMethod(event) {\n\t  // get the method name from the event name\n\t  var methodName = 'on' + event.replace(splitter, getEventName);\n\t  var method = getOption.call(this, methodName);\n\t  var result;\n\n\t  // call the onMethodName if it exists\n\n\t  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t    args[_key - 1] = arguments[_key];\n\t  }\n\n\t  if (_.isFunction(method)) {\n\t    // pass all args, except the event name\n\t    result = method.apply(this, args);\n\t  }\n\n\t  // trigger the event\n\t  this.trigger.apply(this, [event].concat(args));\n\n\t  return result;\n\t}\n\n\t// triggerMethodOn invokes triggerMethod on a specific context\n\t//\n\t// e.g. `Marionette.triggerMethodOn(view, 'show')`\n\t// will trigger a \"show\" event or invoke onShow the view.\n\tfunction triggerMethodOn(context) {\n\t  var fnc = _.isFunction(context.triggerMethod) ? context.triggerMethod : triggerMethod;\n\n\t  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t    args[_key2 - 1] = arguments[_key2];\n\t  }\n\n\t  return fnc.apply(context, args);\n\t}\n\n\t// Trigger method on children unless a pure Backbone.View\n\tfunction triggerMethodChildren(view, event, shouldTrigger) {\n\t  if (!view._getImmediateChildren) {\n\t    return;\n\t  }\n\t  _.each(view._getImmediateChildren(), function (child) {\n\t    if (!shouldTrigger(child)) {\n\t      return;\n\t    }\n\t    triggerMethodOn(child, event, child);\n\t  });\n\t}\n\n\tfunction shouldTriggerAttach(view) {\n\t  return !view._isAttached;\n\t}\n\n\tfunction shouldAttach(view) {\n\t  if (!shouldTriggerAttach(view)) {\n\t    return false;\n\t  }\n\t  view._isAttached = true;\n\t  return true;\n\t}\n\n\tfunction shouldTriggerDetach(view) {\n\t  return view._isAttached;\n\t}\n\n\tfunction shouldDetach(view) {\n\t  if (!shouldTriggerDetach(view)) {\n\t    return false;\n\t  }\n\t  view._isAttached = false;\n\t  return true;\n\t}\n\n\t// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n\t// whenever a rendered view is attached or an attached view is rendered.\n\tfunction monitorViewEvents(view) {\n\t  if (view._areViewEventsMonitored) {\n\t    return;\n\t  }\n\n\t  view._areViewEventsMonitored = true;\n\n\t  function handleBeforeAttach() {\n\t    triggerMethodChildren(view, 'before:attach', shouldTriggerAttach);\n\t  }\n\n\t  function handleAttach() {\n\t    triggerMethodChildren(view, 'attach', shouldAttach);\n\t    triggerDOMRefresh();\n\t  }\n\n\t  function handleBeforeDetach() {\n\t    triggerMethodChildren(view, 'before:detach', shouldTriggerDetach);\n\t  }\n\n\t  function handleDetach() {\n\t    triggerMethodChildren(view, 'detach', shouldDetach);\n\t  }\n\n\t  function handleRender() {\n\t    triggerDOMRefresh();\n\t  }\n\n\t  function triggerDOMRefresh() {\n\t    if (view._isAttached && view._isRendered) {\n\t      triggerMethodOn(view, 'dom:refresh', view);\n\t    }\n\t  }\n\n\t  view.on({\n\t    'before:attach': handleBeforeAttach,\n\t    'attach': handleAttach,\n\t    'before:detach': handleBeforeDetach,\n\t    'detach': handleDetach,\n\t    'render': handleRender\n\t  });\n\t}\n\n\t// Internal utility for setting options consistently across Mn\n\tvar _setOptions = function _setOptions() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\n\t  this.options = _.extend.apply(_, [{}, _.result(this, 'options')].concat(args));\n\t};\n\n\tvar errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\n\tvar MarionetteError = extend.call(Error, {\n\t  urlRoot: 'http://marionettejs.com/docs/v' + version + '/',\n\n\t  constructor: function MarionetteError(message, options) {\n\t    if (_.isObject(message)) {\n\t      options = message;\n\t      message = options.message;\n\t    } else if (!options) {\n\t      options = {};\n\t    }\n\n\t    var error = Error.call(this, message);\n\t    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n\t    this.captureStackTrace();\n\n\t    if (options.url) {\n\t      this.url = this.urlRoot + options.url;\n\t    }\n\t  },\n\n\t  captureStackTrace: function captureStackTrace() {\n\t    if (Error.captureStackTrace) {\n\t      Error.captureStackTrace(this, MarionetteError);\n\t    }\n\t  },\n\n\t  toString: function toString() {\n\t    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n\t  }\n\t});\n\n\tMarionetteError.extend = extend;\n\n\t// Bind/unbind the event to handlers specified as a string of\n\t// handler names on the target object\n\tfunction bindFromStrings(target, entity, evt, methods, actionName) {\n\t  var methodNames = methods.split(/\\s+/);\n\n\t  _.each(methodNames, function (methodName) {\n\t    var method = target[methodName];\n\t    if (!method) {\n\t      throw new MarionetteError('Method \"' + methodName + '\" was configured as an event handler, but does not exist.');\n\t    }\n\n\t    target[actionName](entity, evt, method);\n\t  });\n\t}\n\n\t// generic looping function\n\tfunction iterateEvents(target, entity, bindings, actionName) {\n\t  if (!entity || !bindings) {\n\t    return;\n\t  }\n\n\t  // type-check bindings\n\t  if (!_.isObject(bindings)) {\n\t    throw new MarionetteError({\n\t      message: 'Bindings must be an object.',\n\t      url: 'marionette.functions.html#marionettebindentityevents'\n\t    });\n\t  }\n\n\t  // iterate the bindings and bind/unbind them\n\t  _.each(bindings, function (method, evt) {\n\n\t    // allow for a list of method names as a string\n\t    if (_.isString(method)) {\n\t      bindFromStrings(target, entity, evt, method, actionName);\n\t      return;\n\t    }\n\n\t    target[actionName](entity, evt, method);\n\t  });\n\t}\n\n\tfunction bindEntityEvents(entity, bindings) {\n\t  iterateEvents(this, entity, bindings, 'listenTo');\n\t  return this;\n\t}\n\n\tfunction unbindEntityEvents(entity, bindings) {\n\t  iterateEvents(this, entity, bindings, 'stopListening');\n\t  return this;\n\t}\n\n\tvar CommonMixin = {\n\n\t  // Imports the \"normalizeMethods\" to transform hashes of\n\t  // events=>function references/names to a hash of events=>function references\n\t  normalizeMethods: normalizeMethods,\n\n\t  _setOptions: _setOptions,\n\n\t  // A handy way to merge passed-in options onto the instance\n\t  mergeOptions: mergeOptions,\n\n\t  // Enable getting options from this or this.options by name.\n\t  getOption: getOption,\n\n\t  // Enable binding view's events from another entity.\n\t  bindEntityEvents: bindEntityEvents,\n\n\t  // Enable unbinding view's events from another entity.\n\t  unbindEntityEvents: unbindEntityEvents\n\t};\n\n\tvar backbone_radio = __commonjs(function (module, exports, global) {\n\t// Backbone.Radio v2.0.0-pre.1\n\n\t(function (global, factory) {\n\t  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(_, Backbone) :\n\t  typeof define === 'function' && define.amd ? define(['underscore', 'backbone'], factory) :\n\t  (global.Backbone = global.Backbone || {}, global.Backbone.Radio = factory(global._,global.Backbone));\n\t}(__commonjs_global, function (_,Backbone) { 'use strict';\n\n\t  _ = 'default' in _ ? _['default'] : _;\n\t  Backbone = 'default' in Backbone ? Backbone['default'] : Backbone;\n\n\t  var babelHelpers = {};\n\t  babelHelpers.typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n\t    return typeof obj;\n\t  } : function (obj) {\n\t    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n\t  };\n\t  babelHelpers;\n\n\t  var previousRadio = Backbone.Radio;\n\n\t  var Radio = Backbone.Radio = {};\n\n\t  Radio.VERSION = '2.0.0-pre.1';\n\n\t  // This allows you to run multiple instances of Radio on the same\n\t  // webapp. After loading the new version, call `noConflict()` to\n\t  // get a reference to it. At the same time the old version will be\n\t  // returned to Backbone.Radio.\n\t  Radio.noConflict = function () {\n\t    Backbone.Radio = previousRadio;\n\t    return this;\n\t  };\n\n\t  // Whether or not we're in DEBUG mode or not. DEBUG mode helps you\n\t  // get around the issues of lack of warnings when events are mis-typed.\n\t  Radio.DEBUG = false;\n\n\t  // Format debug text.\n\t  Radio._debugText = function (warning, eventName, channelName) {\n\t    return warning + (channelName ? ' on the ' + channelName + ' channel' : '') + ': \"' + eventName + '\"';\n\t  };\n\n\t  // This is the method that's called when an unregistered event was called.\n\t  // By default, it logs warning to the console. By overriding this you could\n\t  // make it throw an Error, for instance. This would make firing a nonexistent event\n\t  // have the same consequence as firing a nonexistent method on an Object.\n\t  Radio.debugLog = function (warning, eventName, channelName) {\n\t    if (Radio.DEBUG && console && console.warn) {\n\t      console.warn(Radio._debugText(warning, eventName, channelName));\n\t    }\n\t  };\n\n\t  var eventSplitter = /\\s+/;\n\n\t  // An internal method used to handle Radio's method overloading for Requests.\n\t  // It's borrowed from Backbone.Events. It differs from Backbone's overload\n\t  // API (which is used in Backbone.Events) in that it doesn't support space-separated\n\t  // event names.\n\t  Radio._eventsApi = function (obj, action, name, rest) {\n\t    if (!name) {\n\t      return false;\n\t    }\n\n\t    var results = {};\n\n\t    // Handle event maps.\n\t    if ((typeof name === 'undefined' ? 'undefined' : babelHelpers.typeof(name)) === 'object') {\n\t      for (var key in name) {\n\t        var result = obj[action].apply(obj, [key, name[key]].concat(rest));\n\t        eventSplitter.test(key) ? _.extend(results, result) : results[key] = result;\n\t      }\n\t      return results;\n\t    }\n\n\t    // Handle space separated event names.\n\t    if (eventSplitter.test(name)) {\n\t      var names = name.split(eventSplitter);\n\t      for (var i = 0, l = names.length; i < l; i++) {\n\t        results[names[i]] = obj[action].apply(obj, [names[i]].concat(rest));\n\t      }\n\t      return results;\n\t    }\n\n\t    return false;\n\t  };\n\n\t  // An optimized way to execute callbacks.\n\t  Radio._callHandler = function (callback, context, args) {\n\t    var a1 = args[0],\n\t        a2 = args[1],\n\t        a3 = args[2];\n\t    switch (args.length) {\n\t      case 0:\n\t        return callback.call(context);\n\t      case 1:\n\t        return callback.call(context, a1);\n\t      case 2:\n\t        return callback.call(context, a1, a2);\n\t      case 3:\n\t        return callback.call(context, a1, a2, a3);\n\t      default:\n\t        return callback.apply(context, args);\n\t    }\n\t  };\n\n\t  // A helper used by `off` methods to the handler from the store\n\t  function removeHandler(store, name, callback, context) {\n\t    var event = store[name];\n\t    if ((!callback || callback === event.callback || callback === event.callback._callback) && (!context || context === event.context)) {\n\t      delete store[name];\n\t      return true;\n\t    }\n\t  }\n\n\t  function removeHandlers(store, name, callback, context) {\n\t    store || (store = {});\n\t    var names = name ? [name] : _.keys(store);\n\t    var matched = false;\n\n\t    for (var i = 0, length = names.length; i < length; i++) {\n\t      name = names[i];\n\n\t      // If there's no event by this name, log it and continue\n\t      // with the loop\n\t      if (!store[name]) {\n\t        continue;\n\t      }\n\n\t      if (removeHandler(store, name, callback, context)) {\n\t        matched = true;\n\t      }\n\t    }\n\n\t    return matched;\n\t  }\n\n\t  /*\n\t   * tune-in\n\t   * -------\n\t   * Get console logs of a channel's activity\n\t   *\n\t   */\n\n\t  var _logs = {};\n\n\t  // This is to produce an identical function in both tuneIn and tuneOut,\n\t  // so that Backbone.Events unregisters it.\n\t  function _partial(channelName) {\n\t    return _logs[channelName] || (_logs[channelName] = _.partial(Radio.log, channelName));\n\t  }\n\n\t  _.extend(Radio, {\n\n\t    // Log information about the channel and event\n\t    log: function log(channelName, eventName) {\n\t      if (typeof console === 'undefined') {\n\t        return;\n\t      }\n\t      var args = _.drop(arguments, 2);\n\t      console.log('[' + channelName + '] \"' + eventName + '\"', args);\n\t    },\n\n\t    // Logs all events on this channel to the console. It sets an\n\t    // internal value on the channel telling it we're listening,\n\t    // then sets a listener on the Backbone.Events\n\t    tuneIn: function tuneIn(channelName) {\n\t      var channel = Radio.channel(channelName);\n\t      channel._tunedIn = true;\n\t      channel.on('all', _partial(channelName));\n\t      return this;\n\t    },\n\n\t    // Stop logging all of the activities on this channel to the console\n\t    tuneOut: function tuneOut(channelName) {\n\t      var channel = Radio.channel(channelName);\n\t      channel._tunedIn = false;\n\t      channel.off('all', _partial(channelName));\n\t      delete _logs[channelName];\n\t      return this;\n\t    }\n\t  });\n\n\t  /*\n\t   * Backbone.Radio.Requests\n\t   * -----------------------\n\t   * A messaging system for requesting data.\n\t   *\n\t   */\n\n\t  function makeCallback(callback) {\n\t    return _.isFunction(callback) ? callback : function () {\n\t      return callback;\n\t    };\n\t  }\n\n\t  Radio.Requests = {\n\n\t    // Make a request\n\t    request: function request(name) {\n\t      var args = _.rest(arguments);\n\t      var results = Radio._eventsApi(this, 'request', name, args);\n\t      if (results) {\n\t        return results;\n\t      }\n\t      var channelName = this.channelName;\n\t      var requests = this._requests;\n\n\t      // Check if we should log the request, and if so, do it\n\t      if (channelName && this._tunedIn) {\n\t        Radio.log.apply(this, [channelName, name].concat(args));\n\t      }\n\n\t      // If the request isn't handled, log it in DEBUG mode and exit\n\t      if (requests && (requests[name] || requests['default'])) {\n\t        var handler = requests[name] || requests['default'];\n\t        args = requests[name] ? args : arguments;\n\t        return Radio._callHandler(handler.callback, handler.context, args);\n\t      } else {\n\t        Radio.debugLog('An unhandled request was fired', name, channelName);\n\t      }\n\t    },\n\n\t    // Set up a handler for a request\n\t    reply: function reply(name, callback, context) {\n\t      if (Radio._eventsApi(this, 'reply', name, [callback, context])) {\n\t        return this;\n\t      }\n\n\t      this._requests || (this._requests = {});\n\n\t      if (this._requests[name]) {\n\t        Radio.debugLog('A request was overwritten', name, this.channelName);\n\t      }\n\n\t      this._requests[name] = {\n\t        callback: makeCallback(callback),\n\t        context: context || this\n\t      };\n\n\t      return this;\n\t    },\n\n\t    // Set up a handler that can only be requested once\n\t    replyOnce: function replyOnce(name, callback, context) {\n\t      if (Radio._eventsApi(this, 'replyOnce', name, [callback, context])) {\n\t        return this;\n\t      }\n\n\t      var self = this;\n\n\t      var once = _.once(function () {\n\t        self.stopReplying(name);\n\t        return makeCallback(callback).apply(this, arguments);\n\t      });\n\n\t      return this.reply(name, once, context);\n\t    },\n\n\t    // Remove handler(s)\n\t    stopReplying: function stopReplying(name, callback, context) {\n\t      if (Radio._eventsApi(this, 'stopReplying', name)) {\n\t        return this;\n\t      }\n\n\t      // Remove everything if there are no arguments passed\n\t      if (!name && !callback && !context) {\n\t        delete this._requests;\n\t      } else if (!removeHandlers(this._requests, name, callback, context)) {\n\t        Radio.debugLog('Attempted to remove the unregistered request', name, this.channelName);\n\t      }\n\n\t      return this;\n\t    }\n\t  };\n\n\t  /*\n\t   * Backbone.Radio.channel\n\t   * ----------------------\n\t   * Get a reference to a channel by name.\n\t   *\n\t   */\n\n\t  Radio._channels = {};\n\n\t  Radio.channel = function (channelName) {\n\t    if (!channelName) {\n\t      throw new Error('You must provide a name for the channel.');\n\t    }\n\n\t    if (Radio._channels[channelName]) {\n\t      return Radio._channels[channelName];\n\t    } else {\n\t      return Radio._channels[channelName] = new Radio.Channel(channelName);\n\t    }\n\t  };\n\n\t  /*\n\t   * Backbone.Radio.Channel\n\t   * ----------------------\n\t   * A Channel is an object that extends from Backbone.Events,\n\t   * and Radio.Requests.\n\t   *\n\t   */\n\n\t  Radio.Channel = function (channelName) {\n\t    this.channelName = channelName;\n\t  };\n\n\t  _.extend(Radio.Channel.prototype, Backbone.Events, Radio.Requests, {\n\n\t    // Remove all handlers from the messaging systems of this channel\n\t    reset: function reset() {\n\t      this.off();\n\t      this.stopListening();\n\t      this.stopReplying();\n\t      return this;\n\t    }\n\t  });\n\n\t  /*\n\t   * Top-level API\n\t   * -------------\n\t   * Supplies the 'top-level API' for working with Channels directly\n\t   * from Backbone.Radio.\n\t   *\n\t   */\n\n\t  var channel;\n\t  var args;\n\t  var systems = [Backbone.Events, Radio.Requests];\n\t  _.each(systems, function (system) {\n\t    _.each(system, function (method, methodName) {\n\t      Radio[methodName] = function (channelName) {\n\t        args = _.rest(arguments);\n\t        channel = this.channel(channelName);\n\t        return channel[methodName].apply(channel, args);\n\t      };\n\t    });\n\t  });\n\n\t  Radio.reset = function (channelName) {\n\t    var channels = !channelName ? this._channels : [this._channels[channelName]];\n\t    _.invoke(channels, 'reset');\n\t  };\n\n\t  return Radio;\n\n\t}));\n\t});\n\n\tvar Radio = (backbone_radio && typeof backbone_radio === 'object' && 'default' in backbone_radio ? backbone_radio['default'] : backbone_radio);\n\n\tfunction iterateReplies(target, channel, bindings, actionName) {\n\t  if (!channel || !bindings) {\n\t    return;\n\t  }\n\n\t  // type-check bindings\n\t  if (!_.isObject(bindings)) {\n\t    throw new MarionetteError({\n\t      message: 'Bindings must be an object.',\n\t      url: 'marionette.functions.html#marionettebindradiorequests'\n\t    });\n\t  }\n\n\t  var normalizedRadioRequests = normalizeMethods.call(target, bindings);\n\n\t  channel[actionName](normalizedRadioRequests, target);\n\t}\n\n\tfunction bindRadioRequests(channel, bindings) {\n\t  iterateReplies(this, channel, bindings, 'reply');\n\t  return this;\n\t}\n\n\tfunction unbindRadioRequests(channel, bindings) {\n\t  iterateReplies(this, channel, bindings, 'stopReplying');\n\t  return this;\n\t}\n\n\t// MixinOptions\n\t// - channelName\n\t// - radioEvents\n\t// - radioRequests\n\n\tvar RadioMixin = {\n\n\t  _initRadio: function _initRadio() {\n\t    var channelName = _.result(this, 'channelName');\n\n\t    if (!channelName) {\n\t      return;\n\t    }\n\n\t    var channel = this._channel = Radio.channel(channelName);\n\n\t    var radioEvents = _.result(this, 'radioEvents');\n\t    this.bindRadioEvents(channel, radioEvents);\n\n\t    var radioRequests = _.result(this, 'radioRequests');\n\t    this.bindRadioRequests(channel, radioRequests);\n\n\t    this.on('destroy', this._destroyRadio);\n\t  },\n\n\t  _destroyRadio: function _destroyRadio() {\n\t    this._channel.stopReplying(null, null, this);\n\t  },\n\n\t  getChannel: function getChannel() {\n\t    return this._channel;\n\t  },\n\n\t  // Proxy `bindRadioEvents`\n\t  bindRadioEvents: bindEntityEvents,\n\n\t  // Proxy `unbindRadioEvents`\n\t  unbindRadioEvents: unbindEntityEvents,\n\n\t  // Proxy `bindRadioRequests`\n\t  bindRadioRequests: bindRadioRequests,\n\n\t  // Proxy `unbindRadioRequests`\n\t  unbindRadioRequests: unbindRadioRequests\n\n\t};\n\n\tvar ClassOptions = ['channelName', 'radioEvents', 'radioRequests'];\n\n\t// A Base Class that other Classes should descend from.\n\t// Object borrows many conventions and utilities from Backbone.\n\tvar MarionetteObject = function MarionetteObject(options) {\n\t  this._setOptions(options);\n\t  this.mergeOptions(options, ClassOptions);\n\t  this.cid = _.uniqueId(this.cidPrefix);\n\t  this._initRadio();\n\t  this.initialize.apply(this, arguments);\n\t};\n\n\tMarionetteObject.extend = extend;\n\n\t// Object Methods\n\t// --------------\n\n\t// Ensure it can trigger events with Backbone.Events\n\t_.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\n\t  cidPrefix: 'mno',\n\n\t  // for parity with Marionette.AbstractView lifecyle\n\t  _isDestroyed: false,\n\n\t  isDestroyed: function isDestroyed() {\n\t    return this._isDestroyed;\n\t  },\n\n\t  //this is a noop method intended to be overridden by classes that extend from this base\n\t  initialize: function initialize() {},\n\n\t  destroy: function destroy() {\n\t    if (this._isDestroyed) {\n\t      return this;\n\t    }\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    this.triggerMethod.apply(this, ['before:destroy', this].concat(args));\n\n\t    this._isDestroyed = true;\n\t    this.triggerMethod.apply(this, ['destroy', this].concat(args));\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\n\t  triggerMethod: triggerMethod\n\t});\n\n\t// Manage templates stored in `<script>` blocks,\n\t// caching them for faster access.\n\tvar TemplateCache = function TemplateCache(templateId) {\n\t  this.templateId = templateId;\n\t};\n\n\t// TemplateCache object-level methods. Manage the template\n\t// caches from these method calls instead of creating\n\t// your own TemplateCache instances\n\t_.extend(TemplateCache, {\n\t  templateCaches: {},\n\n\t  // Get the specified template by id. Either\n\t  // retrieves the cached version, or loads it\n\t  // from the DOM.\n\t  get: function get(templateId, options) {\n\t    var cachedTemplate = this.templateCaches[templateId];\n\n\t    if (!cachedTemplate) {\n\t      cachedTemplate = new TemplateCache(templateId);\n\t      this.templateCaches[templateId] = cachedTemplate;\n\t    }\n\n\t    return cachedTemplate.load(options);\n\t  },\n\n\t  // Clear templates from the cache. If no arguments\n\t  // are specified, clears all templates:\n\t  // `clear()`\n\t  //\n\t  // If arguments are specified, clears each of the\n\t  // specified templates from the cache:\n\t  // `clear(\"#t1\", \"#t2\", \"...\")`\n\t  clear: function clear() {\n\t    var i;\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    var length = args.length;\n\n\t    if (length > 0) {\n\t      for (i = 0; i < length; i++) {\n\t        delete this.templateCaches[args[i]];\n\t      }\n\t    } else {\n\t      this.templateCaches = {};\n\t    }\n\t  }\n\t});\n\n\t// TemplateCache instance methods, allowing each\n\t// template cache object to manage its own state\n\t// and know whether or not it has been loaded\n\t_.extend(TemplateCache.prototype, {\n\n\t  // Internal method to load the template\n\t  load: function load(options) {\n\t    // Guard clause to prevent loading this template more than once\n\t    if (this.compiledTemplate) {\n\t      return this.compiledTemplate;\n\t    }\n\n\t    // Load the template and compile it\n\t    var template = this.loadTemplate(this.templateId, options);\n\t    this.compiledTemplate = this.compileTemplate(template, options);\n\n\t    return this.compiledTemplate;\n\t  },\n\n\t  // Load a template from the DOM, by default. Override\n\t  // this method to provide your own template retrieval\n\t  // For asynchronous loading with AMD/RequireJS, consider\n\t  // using a template-loader plugin as described here:\n\t  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n\t  loadTemplate: function loadTemplate(templateId, options) {\n\t    var $template = Backbone.$(templateId);\n\n\t    if (!$template.length) {\n\t      throw new MarionetteError({\n\t        name: 'NoTemplateError',\n\t        message: 'Could not find template: \"' + templateId + '\"'\n\t      });\n\t    }\n\t    return $template.html();\n\t  },\n\n\t  // Pre-compile the template before caching it. Override\n\t  // this method if you do not need to pre-compile a template\n\t  // (JST / RequireJS for example) or if you want to change\n\t  // the template engine used (Handebars, etc).\n\t  compileTemplate: function compileTemplate(rawTemplate, options) {\n\t    return _.template(rawTemplate, options);\n\t  }\n\t});\n\n\t// Render a template with data by passing in the template\n\t// selector and the data to render.\n\tvar Renderer = {\n\n\t  // Render a template with data. The `template` parameter is\n\t  // passed to the `TemplateCache` object to retrieve the\n\t  // template function. Override this method to provide your own\n\t  // custom rendering and template handling for all of Marionette.\n\t  render: function render(template, data) {\n\t    if (!template) {\n\t      throw new MarionetteError({\n\t        name: 'TemplateNotFoundError',\n\t        message: 'Cannot render the template since its false, null or undefined.'\n\t      });\n\t    }\n\n\t    var templateFunc = _.isFunction(template) ? template : TemplateCache.get(template);\n\n\t    return templateFunc(data);\n\t  }\n\t};\n\n\tvar _invoke = _.invokeMap || _.invoke;\n\n\t// MixinOptions\n\t// - behaviors\n\n\t// Takes care of getting the behavior class\n\t// given options and a key.\n\t// If a user passes in options.behaviorClass\n\t// default to using that.\n\t// If a user passes in a Behavior Class directly, use that\n\t// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\n\tfunction getBehaviorClass(options, key) {\n\t  if (options.behaviorClass) {\n\t    return options.behaviorClass;\n\t    //treat functions as a Behavior constructor\n\t  } else if (_.isFunction(options)) {\n\t      return options;\n\t    }\n\n\t  // behaviorsLookup can be either a flat object or a method\n\t  if (_.isFunction(Marionette.Behaviors.behaviorsLookup)) {\n\t    return Marionette.Behaviors.behaviorsLookup(options, key)[key];\n\t  }\n\n\t  return Marionette.Behaviors.behaviorsLookup[key];\n\t}\n\n\t// Iterate over the behaviors object, for each behavior\n\t// instantiate it and get its grouped behaviors.\n\t// This accepts a list of behaviors in either an object or array form\n\tfunction parseBehaviors(view, behaviors) {\n\t  return _.chain(behaviors).map(function (options, key) {\n\t    var BehaviorClass = getBehaviorClass(options, key);\n\t    //if we're passed a class directly instead of an object\n\t    var _options = options === BehaviorClass ? {} : options;\n\t    var behavior = new BehaviorClass(_options, view);\n\t    var nestedBehaviors = parseBehaviors(view, _.result(behavior, 'behaviors'));\n\n\t    return [behavior].concat(nestedBehaviors);\n\t  }).flatten().value();\n\t}\n\n\tvar BehaviorsMixin = {\n\t  _initBehaviors: function _initBehaviors() {\n\t    var behaviors = _.result(this, 'behaviors');\n\n\t    // Behaviors defined on a view can be a flat object literal\n\t    // or it can be a function that returns an object.\n\t    this._behaviors = _.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\n\t  },\n\n\t  _getBehaviorTriggers: function _getBehaviorTriggers() {\n\t    var triggers = _invoke(this._behaviors, 'getTriggers');\n\t    return _.extend.apply(_, [{}].concat(babelHelpers.toConsumableArray(triggers)));\n\t  },\n\n\t  _getBehaviorEvents: function _getBehaviorEvents() {\n\t    var events = _invoke(this._behaviors, 'getEvents');\n\t    return _.extend.apply(_, [{}].concat(babelHelpers.toConsumableArray(events)));\n\t  },\n\n\t  // proxy behavior $el to the view's $el.\n\t  _proxyBehaviorViewProperties: function _proxyBehaviorViewProperties() {\n\t    _invoke(this._behaviors, 'proxyViewProperties');\n\t  },\n\n\t  // delegate modelEvents and collectionEvents\n\t  _delegateBehaviorEntityEvents: function _delegateBehaviorEntityEvents() {\n\t    _invoke(this._behaviors, 'delegateEntityEvents');\n\t  },\n\n\t  // undelegate modelEvents and collectionEvents\n\t  _undelegateBehaviorEntityEvents: function _undelegateBehaviorEntityEvents() {\n\t    _invoke(this._behaviors, 'undelegateEntityEvents');\n\t  },\n\n\t  _destroyBehaviors: function _destroyBehaviors(args) {\n\t    // Call destroy on each behavior after\n\t    // destroying the view.\n\t    // This unbinds event listeners\n\t    // that behaviors have registered for.\n\t    _invoke.apply(undefined, [this._behaviors, 'destroy'].concat(babelHelpers.toConsumableArray(args)));\n\t  },\n\n\t  _bindBehaviorUIElements: function _bindBehaviorUIElements() {\n\t    _invoke(this._behaviors, 'bindUIElements');\n\t  },\n\n\t  _unbindBehaviorUIElements: function _unbindBehaviorUIElements() {\n\t    _invoke(this._behaviors, 'unbindUIElements');\n\t  },\n\n\t  _triggerEventOnBehaviors: function _triggerEventOnBehaviors() {\n\t    var behaviors = this._behaviors;\n\t    // Use good ol' for as this is a very hot function\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {\n\t      triggerMethod.apply(behaviors[i], args);\n\t    }\n\t  }\n\t};\n\n\t// MixinOptions\n\t// - collectionEvents\n\t// - modelEvents\n\n\tvar DelegateEntityEventsMixin = {\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  _delegateEntityEvents: function _delegateEntityEvents(model, collection) {\n\t    this._undelegateEntityEvents(model, collection);\n\n\t    var modelEvents = _.result(this, 'modelEvents');\n\t    bindEntityEvents.call(this, model, modelEvents);\n\n\t    var collectionEvents = _.result(this, 'collectionEvents');\n\t    bindEntityEvents.call(this, collection, collectionEvents);\n\t  },\n\n\t  _undelegateEntityEvents: function _undelegateEntityEvents(model, collection) {\n\t    var modelEvents = _.result(this, 'modelEvents');\n\t    unbindEntityEvents.call(this, model, modelEvents);\n\n\t    var collectionEvents = _.result(this, 'collectionEvents');\n\t    unbindEntityEvents.call(this, collection, collectionEvents);\n\t  }\n\t};\n\n\t// Borrow event splitter from Backbone\n\tvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n\tfunction uniqueName(eventName, selector) {\n\t  return [eventName + _.uniqueId('.evt'), selector].join(' ');\n\t}\n\n\t// Set event name to be namespaced using a unique index\n\t// to generate a non colliding event namespace\n\t// http://api.jquery.com/event.namespace/\n\tvar getUniqueEventName = function getUniqueEventName(eventName) {\n\t  var match = eventName.match(delegateEventSplitter);\n\t  return uniqueName(match[1], match[2]);\n\t};\n\n\t// Internal method to create an event handler for a given `triggerDef` like\n\t// 'click:foo'\n\tfunction buildViewTrigger(view, triggerDef) {\n\t  if (_.isString(triggerDef)) {\n\t    triggerDef = { event: triggerDef };\n\t  }\n\n\t  var eventName = triggerDef.event;\n\t  var shouldPreventDefault = triggerDef.preventDefault !== false;\n\t  var shouldStopPropagation = triggerDef.stopPropagation !== false;\n\n\t  return function (e) {\n\t    if (shouldPreventDefault) {\n\t      e.preventDefault();\n\t    }\n\n\t    if (shouldStopPropagation) {\n\t      e.stopPropagation();\n\t    }\n\n\t    view.triggerMethod(eventName, view);\n\t  };\n\t}\n\n\tvar TriggersMixin = {\n\n\t  // Configure `triggers` to forward DOM events to view\n\t  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n\t  _getViewTriggers: function _getViewTriggers(view, triggers) {\n\t    // Configure the triggers, prevent default\n\t    // action and stop propagation of DOM events\n\t    return _.reduce(triggers, function (events, value, key) {\n\t      key = getUniqueEventName(key);\n\t      events[key] = buildViewTrigger(view, value);\n\t      return events;\n\t    }, {});\n\t  }\n\n\t};\n\n\t// allows for the use of the @ui. syntax within\n\t// a given key for triggers and events\n\t// swaps the @ui with the associated selector.\n\t// Returns a new, non-mutated, parsed events hash.\n\tvar _normalizeUIKeys = function _normalizeUIKeys(hash, ui) {\n\t  return _.reduce(hash, function (memo, val, key) {\n\t    var normalizedKey = normalizeUIString(key, ui);\n\t    memo[normalizedKey] = val;\n\t    return memo;\n\t  }, {});\n\t};\n\n\t// utility method for parsing @ui. syntax strings\n\t// into associated selector\n\tvar normalizeUIString = function normalizeUIString(uiString, ui) {\n\t  return uiString.replace(/@ui\\.[a-zA-Z_$0-9]*/g, function (r) {\n\t    return ui[r.slice(4)];\n\t  });\n\t};\n\n\t// allows for the use of the @ui. syntax within\n\t// a given value for regions\n\t// swaps the @ui with the associated selector\n\tvar _normalizeUIValues = function _normalizeUIValues(hash, ui, properties) {\n\t  _.each(hash, function (val, key) {\n\t    if (_.isString(val)) {\n\t      hash[key] = normalizeUIString(val, ui);\n\t    } else if (_.isObject(val) && _.isArray(properties)) {\n\t      _.extend(val, _normalizeUIValues(_.pick(val, properties), ui));\n\t      /* Value is an object, and we got an array of embedded property names to normalize. */\n\t      _.each(properties, function (property) {\n\t        var propertyVal = val[property];\n\t        if (_.isString(propertyVal)) {\n\t          val[property] = normalizeUIString(propertyVal, ui);\n\t        }\n\t      });\n\t    }\n\t  });\n\t  return hash;\n\t};\n\n\tvar UIMixin = {\n\n\t  // normalize the keys of passed hash with the views `ui` selectors.\n\t  // `{\"@ui.foo\": \"bar\"}`\n\t  normalizeUIKeys: function normalizeUIKeys(hash) {\n\t    var uiBindings = this._getUIBindings();\n\t    return _normalizeUIKeys(hash, uiBindings);\n\t  },\n\n\t  // normalize the values of passed hash with the views `ui` selectors.\n\t  // `{foo: \"@ui.bar\"}`\n\t  normalizeUIValues: function normalizeUIValues(hash, properties) {\n\t    var uiBindings = this._getUIBindings();\n\t    return _normalizeUIValues(hash, uiBindings, properties);\n\t  },\n\n\t  _getUIBindings: function _getUIBindings() {\n\t    var uiBindings = _.result(this, '_uiBindings');\n\t    var ui = _.result(this, 'ui');\n\t    return uiBindings || ui;\n\t  },\n\n\t  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n\t  // the associated jQuery selectors.\n\t  _bindUIElements: function _bindUIElements() {\n\t    var _this = this;\n\n\t    if (!this.ui) {\n\t      return;\n\t    }\n\n\t    // store the ui hash in _uiBindings so they can be reset later\n\t    // and so re-rendering the view will be able to find the bindings\n\t    if (!this._uiBindings) {\n\t      this._uiBindings = this.ui;\n\t    }\n\n\t    // get the bindings result, as a function or otherwise\n\t    var bindings = _.result(this, '_uiBindings');\n\n\t    // empty the ui so we don't have anything to start with\n\t    this._ui = {};\n\n\t    // bind each of the selectors\n\t    _.each(bindings, function (selector, key) {\n\t      _this._ui[key] = _this.$(selector);\n\t    });\n\n\t    this.ui = this._ui;\n\t  },\n\n\t  _unbindUIElements: function _unbindUIElements() {\n\t    var _this2 = this;\n\n\t    if (!this.ui || !this._uiBindings) {\n\t      return;\n\t    }\n\n\t    // delete all of the existing ui bindings\n\t    _.each(this.ui, function ($el, name) {\n\t      delete _this2.ui[name];\n\t    });\n\n\t    // reset the ui element to the original bindings configuration\n\t    this.ui = this._uiBindings;\n\t    delete this._uiBindings;\n\t    delete this._ui;\n\t  },\n\n\t  _getUI: function _getUI(name) {\n\t    return this._ui[name];\n\t  }\n\t};\n\n\t// MixinOptions\n\t// - behaviors\n\t// - childViewEventPrefix\n\t// - childViewEvents\n\t// - childViewTriggers\n\t// - collectionEvents\n\t// - modelEvents\n\t// - triggers\n\t// - ui\n\n\tvar ViewMixin = {\n\t  supportsRenderLifecycle: true,\n\t  supportsDestroyLifecycle: true,\n\n\t  _isDestroyed: false,\n\n\t  isDestroyed: function isDestroyed() {\n\t    return !!this._isDestroyed;\n\t  },\n\n\n\t  _isRendered: false,\n\n\t  isRendered: function isRendered() {\n\t    return !!this._isRendered;\n\t  },\n\n\n\t  _isAttached: false,\n\n\t  isAttached: function isAttached() {\n\t    return !!this._isAttached;\n\t  },\n\n\n\t  // Overriding Backbone.View's `setElement` to handle\n\t  // if an el was previously defined. If so, the view might be\n\t  // rendered or attached on setElement.\n\t  setElement: function setElement() {\n\t    var hasEl = !!this.el;\n\n\t    Backbone.View.prototype.setElement.apply(this, arguments);\n\n\t    if (hasEl) {\n\t      this._isRendered = !!this.$el.length;\n\t      this._isAttached = isNodeAttached(this.el);\n\t    }\n\n\t    return this;\n\t  },\n\n\n\t  // Overriding Backbone.View's `delegateEvents` to handle\n\t  // `events` and `triggers`\n\t  delegateEvents: function delegateEvents(eventsArg) {\n\n\t    this._proxyBehaviorViewProperties();\n\t    this._buildEventProxies();\n\n\t    var viewEvents = this._getEvents(eventsArg);\n\n\t    if (typeof eventsArg === 'undefined') {\n\t      this.events = viewEvents;\n\t    }\n\n\t    var combinedEvents = _.extend({}, this._getBehaviorEvents(), viewEvents, this._getBehaviorTriggers(), this.getTriggers());\n\n\t    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n\n\t    return this;\n\t  },\n\n\n\t  _getEvents: function _getEvents(eventsArg) {\n\t    var events = eventsArg || this.events;\n\n\t    if (_.isFunction(events)) {\n\t      return this.normalizeUIKeys(events());\n\t    }\n\n\t    return this.normalizeUIKeys(events);\n\t  },\n\n\t  // Configure `triggers` to forward DOM events to view\n\t  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n\t  getTriggers: function getTriggers() {\n\t    if (!this.triggers) {\n\t      return;\n\t    }\n\n\t    // Allow `triggers` to be configured as a function\n\t    var triggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n\t    // Configure the triggers, prevent default\n\t    // action and stop propagation of DOM events\n\t    return this._getViewTriggers(this, triggers);\n\t  },\n\n\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  delegateEntityEvents: function delegateEntityEvents() {\n\t    this._delegateEntityEvents(this.model, this.collection);\n\n\t    // bind each behaviors model and collection events\n\t    this._delegateBehaviorEntityEvents();\n\n\t    return this;\n\t  },\n\n\n\t  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n\t  undelegateEntityEvents: function undelegateEntityEvents() {\n\t    this._undelegateEntityEvents(this.model, this.collection);\n\n\t    // unbind each behaviors model and collection events\n\t    this._undelegateBehaviorEntityEvents();\n\n\t    return this;\n\t  },\n\n\n\t  // Internal helper method to verify whether the view hasn't been destroyed\n\t  _ensureViewIsIntact: function _ensureViewIsIntact() {\n\t    if (this._isDestroyed) {\n\t      throw new MarionetteError({\n\t        name: 'ViewDestroyedError',\n\t        message: 'View (cid: \"' + this.cid + '\") has already been destroyed and cannot be used.'\n\t      });\n\t    }\n\t  },\n\n\n\t  // Handle destroying the view and its children.\n\t  destroy: function destroy() {\n\t    if (this._isDestroyed) {\n\t      return this;\n\t    }\n\t    var shouldTriggerDetach = !!this._isAttached;\n\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\n\t    this.triggerMethod.apply(this, ['before:destroy', this].concat(args));\n\t    if (shouldTriggerDetach) {\n\t      this.triggerMethod('before:detach', this);\n\t    }\n\n\t    // unbind UI elements\n\t    this.unbindUIElements();\n\n\t    // remove the view from the DOM\n\t    // https://github.com/jashkenas/backbone/blob/1.2.3/backbone.js#L1235\n\t    this._removeElement();\n\n\t    if (shouldTriggerDetach) {\n\t      this._isAttached = false;\n\t      this.triggerMethod('detach', this);\n\t    }\n\n\t    // remove children after the remove to prevent extra paints\n\t    this._removeChildren();\n\n\t    this._destroyBehaviors(args);\n\n\t    this._isDestroyed = true;\n\t    this._isRendered = false;\n\t    this.triggerMethod.apply(this, ['destroy', this].concat(args));\n\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\t  bindUIElements: function bindUIElements() {\n\t    this._bindUIElements();\n\t    this._bindBehaviorUIElements();\n\n\t    return this;\n\t  },\n\n\n\t  // This method unbinds the elements specified in the \"ui\" hash\n\t  unbindUIElements: function unbindUIElements() {\n\t    this._unbindUIElements();\n\t    this._unbindBehaviorUIElements();\n\n\t    return this;\n\t  },\n\t  getUI: function getUI(name) {\n\t    this._ensureViewIsIntact();\n\t    return this._getUI(name);\n\t  },\n\n\n\t  // used as the prefix for child view events\n\t  // that are forwarded through the layoutview\n\t  childViewEventPrefix: 'childview',\n\n\t  // import the `triggerMethod` to trigger events with corresponding\n\t  // methods if the method exists\n\t  triggerMethod: function triggerMethod$$() {\n\t    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t      args[_key2] = arguments[_key2];\n\t    }\n\n\t    var ret = triggerMethod.apply(this, args);\n\n\t    this._triggerEventOnBehaviors.apply(this, args);\n\t    this._triggerEventOnParentLayout.apply(this, args);\n\n\t    return ret;\n\t  },\n\n\n\t  // Cache `childViewEvents` and `childViewTriggers`\n\t  _buildEventProxies: function _buildEventProxies() {\n\t    this._childViewEvents = _.result(this, 'childViewEvents');\n\t    this._childViewTriggers = _.result(this, 'childViewTriggers');\n\t  },\n\n\t  _triggerEventOnParentLayout: function _triggerEventOnParentLayout(eventName) {\n\t    var layoutView = this._parentView();\n\t    if (!layoutView) {\n\t      return;\n\t    }\n\n\t    // invoke triggerMethod on parent view\n\t    var eventPrefix = _.result(layoutView, 'childViewEventPrefix');\n\t    var prefixedEventName = eventPrefix + ':' + eventName;\n\n\t    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n\t      args[_key3 - 1] = arguments[_key3];\n\t    }\n\n\t    layoutView.triggerMethod.apply(layoutView, [prefixedEventName].concat(args));\n\n\t    // use the parent view's childViewEvents handler\n\t    var childViewEvents = layoutView.normalizeMethods(layoutView._childViewEvents);\n\n\t    if (!!childViewEvents && _.isFunction(childViewEvents[eventName])) {\n\t      childViewEvents[eventName].apply(layoutView, args);\n\t    }\n\n\t    // use the parent view's proxyEvent handlers\n\t    var childViewTriggers = layoutView._childViewTriggers;\n\n\t    // Call the event with the proxy name on the parent layout\n\t    if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n\t      layoutView.triggerMethod.apply(layoutView, [childViewTriggers[eventName]].concat(args));\n\t    }\n\t  },\n\n\n\t  // Walk the _parent tree until we find a view (if one exists).\n\t  // Returns the parent view hierarchically closest to this view.\n\t  _parentView: function _parentView() {\n\t    var parent = this._parent;\n\n\t    while (parent) {\n\t      if (parent instanceof View) {\n\t        return parent;\n\t      }\n\t      parent = parent._parent;\n\t    }\n\t  }\n\t};\n\n\t_.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\n\tfunction destroyBackboneView(view) {\n\t  if (!view.supportsDestroyLifecycle) {\n\t    triggerMethodOn(view, 'before:destroy', view);\n\t  }\n\n\t  var shouldTriggerDetach = !!view._isAttached;\n\n\t  if (shouldTriggerDetach) {\n\t    triggerMethodOn(view, 'before:detach', view);\n\t  }\n\n\t  view.remove();\n\n\t  if (shouldTriggerDetach) {\n\t    view._isAttached = false;\n\t    triggerMethodOn(view, 'detach', view);\n\t  }\n\n\t  view._isDestroyed = true;\n\n\t  if (!view.supportsDestroyLifecycle) {\n\t    triggerMethodOn(view, 'destroy', view);\n\t  }\n\t}\n\n\tvar ClassOptions$2 = ['allowMissingEl', 'parentEl', 'replaceElement'];\n\n\tvar Region = MarionetteObject.extend({\n\t  cidPrefix: 'mnr',\n\t  replaceElement: false,\n\t  _isReplaced: false,\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\n\t    this.mergeOptions(options, ClassOptions$2);\n\n\t    // getOption necessary because options.el may be passed as undefined\n\t    this._initEl = this.el = this.getOption('el');\n\n\t    // Handle when this.el is passed in as a $ wrapped element.\n\t    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n\n\t    if (!this.el) {\n\t      throw new MarionetteError({\n\t        name: 'NoElError',\n\t        message: 'An \"el\" must be specified for a region.'\n\t      });\n\t    }\n\n\t    this.$el = this.getEl(this.el);\n\t    MarionetteObject.call(this, options);\n\t  },\n\n\n\t  // Displays a backbone view instance inside of the region. Handles calling the `render`\n\t  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\n\t  // option can be used to prevent a view from the old view being destroyed on show.\n\t  show: function show(view, options) {\n\t    if (!this._ensureElement(options)) {\n\t      return;\n\t    }\n\t    this._ensureView(view);\n\t    if (view === this.currentView) {\n\t      return this;\n\t    }\n\n\t    this.triggerMethod('before:show', this, view, options);\n\n\t    monitorViewEvents(view);\n\n\t    this.empty(options);\n\n\t    // We need to listen for if a view is destroyed in a way other than through the region.\n\t    // If this happens we need to remove the reference to the currentView since once a view\n\t    // has been destroyed we can not reuse it.\n\t    view.on('destroy', this.empty, this);\n\n\t    // Make this region the view's parent.\n\t    // It's important that this parent binding happens before rendering so that any events\n\t    // the child may trigger during render can also be triggered on the child's ancestor views.\n\t    view._parent = this;\n\n\t    this._renderView(view);\n\n\t    this._attachView(view, options);\n\n\t    this.triggerMethod('show', this, view, options);\n\t    return this;\n\t  },\n\t  _renderView: function _renderView(view) {\n\t    if (view._isRendered) {\n\t      return;\n\t    }\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      triggerMethodOn(view, 'before:render', view);\n\t    }\n\n\t    view.render();\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      view._isRendered = true;\n\t      triggerMethodOn(view, 'render', view);\n\t    }\n\t  },\n\t  _attachView: function _attachView(view) {\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t    var shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el);\n\t    var shouldReplaceEl = typeof options.replaceElement === 'undefined' ? !!_.result(this, 'replaceElement') : !!options.replaceElement;\n\n\t    if (shouldTriggerAttach) {\n\t      triggerMethodOn(view, 'before:attach', view);\n\t    }\n\n\t    this.attachHtml(view, shouldReplaceEl);\n\n\t    if (shouldTriggerAttach) {\n\t      view._isAttached = true;\n\t      triggerMethodOn(view, 'attach', view);\n\t    }\n\n\t    this.currentView = view;\n\t  },\n\t  _ensureElement: function _ensureElement() {\n\t    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    if (!_.isObject(this.el)) {\n\t      this.$el = this.getEl(this.el);\n\t      this.el = this.$el[0];\n\t    }\n\n\t    if (!this.$el || this.$el.length === 0) {\n\t      var allowMissingEl = typeof options.allowMissingEl === 'undefined' ? !!_.result(this, 'allowMissingEl') : !!options.allowMissingEl;\n\n\t      if (allowMissingEl) {\n\t        return false;\n\t      } else {\n\t        throw new MarionetteError('An \"el\" must exist in DOM for this region ' + this.cid);\n\t      }\n\t    }\n\t    return true;\n\t  },\n\t  _ensureView: function _ensureView(view) {\n\t    if (!view) {\n\t      throw new MarionetteError({\n\t        name: 'ViewNotValid',\n\t        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n\t      });\n\t    }\n\n\t    if (view._isDestroyed) {\n\t      throw new MarionetteError({\n\t        name: 'ViewDestroyedError',\n\t        message: 'View (cid: \"' + view.cid + '\") has already been destroyed and cannot be used.'\n\t      });\n\t    }\n\t  },\n\n\n\t  // Override this method to change how the region finds the DOM element that it manages. Return\n\t  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n\t  getEl: function getEl(el) {\n\t    return Backbone.$(el, _.result(this, 'parentEl'));\n\t  },\n\t  _replaceEl: function _replaceEl(view) {\n\t    // always restore the el to ensure the regions el is present before replacing\n\t    this._restoreEl();\n\n\t    var parent = this.el.parentNode;\n\n\t    parent.replaceChild(view.el, this.el);\n\t    this._isReplaced = true;\n\t  },\n\n\n\t  // Restore the region's element in the DOM.\n\t  _restoreEl: function _restoreEl() {\n\t    if (!this.currentView) {\n\t      return;\n\t    }\n\n\t    var view = this.currentView;\n\t    var parent = view.el.parentNode;\n\n\t    if (!parent) {\n\t      return;\n\t    }\n\n\t    parent.replaceChild(this.el, view.el);\n\t    this._isReplaced = false;\n\t  },\n\t  isReplaced: function isReplaced() {\n\t    return !!this._isReplaced;\n\t  },\n\n\n\t  // Override this method to change how the new view is appended to the `$el` that the\n\t  // region is managing\n\t  attachHtml: function attachHtml(view, shouldReplace) {\n\t    if (shouldReplace) {\n\t      // replace the region's node with the view's node\n\t      this._replaceEl(view);\n\t    } else {\n\t      this.el.appendChild(view.el);\n\t    }\n\t  },\n\n\n\t  // Destroy the current view, if there is one. If there is no current view, it does\n\t  // nothing and returns immediately.\n\t  empty: function empty() {\n\t    var options = arguments.length <= 0 || arguments[0] === undefined ? { allowMissingEl: true } : arguments[0];\n\n\t    var view = this.currentView;\n\n\t    // If there is no view in the region we should only detach current html\n\t    if (!view) {\n\t      if (this._ensureElement(options)) {\n\t        this.detachHtml();\n\t      }\n\t      return this;\n\t    }\n\n\t    view.off('destroy', this.empty, this);\n\t    this.triggerMethod('before:empty', this, view);\n\n\t    if (this._isReplaced) {\n\t      this._restoreEl();\n\t    }\n\n\t    delete this.currentView;\n\n\t    if (!view._isDestroyed) {\n\t      this._removeView(view, options);\n\t    }\n\n\t    delete view._parent;\n\n\t    this.triggerMethod('empty', this, view);\n\t    return this;\n\t  },\n\t  _removeView: function _removeView(view) {\n\t    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t    var preventDestroy = _ref.preventDestroy;\n\n\t    var shouldPreventDestroy = !!preventDestroy;\n\n\t    if (shouldPreventDestroy) {\n\t      this._detachView(view);\n\t      return;\n\t    }\n\n\t    if (view.destroy) {\n\t      view.destroy();\n\t    } else {\n\t      destroyBackboneView(view);\n\t    }\n\t  },\n\t  _detachView: function _detachView(view) {\n\t    var shouldTriggerDetach = !!view._isAttached;\n\n\t    if (shouldTriggerDetach) {\n\t      triggerMethodOn(view, 'before:detach', view);\n\t    }\n\n\t    this.detachHtml();\n\n\t    if (shouldTriggerDetach) {\n\t      view._isAttached = false;\n\t      triggerMethodOn(view, 'detach', view);\n\t    }\n\t  },\n\n\n\t  // Override this method to change how the region detaches current content\n\t  detachHtml: function detachHtml() {\n\t    this.$el.contents().detach();\n\t  },\n\n\n\t  // Checks whether a view is currently present within the region. Returns `true` if there is\n\t  // and `false` if no view is present.\n\t  hasView: function hasView() {\n\t    return !!this.currentView;\n\t  },\n\n\n\t  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n\t  // The next time a view is shown via this region, the region will re-query the DOM for\n\t  // the region's `el`.\n\t  reset: function reset(options) {\n\t    this.empty(options);\n\n\t    if (this.$el) {\n\t      this.el = this._initEl;\n\t    }\n\n\t    delete this.$el;\n\t    return this;\n\t  },\n\n\n\t  destroy: function destroy(options) {\n\t    this.reset(options);\n\t    return MarionetteObject.prototype.destroy.apply(this, arguments);\n\t  }\n\t});\n\n\t// MixinOptions\n\t// - regions\n\t// - regionClass\n\n\tvar RegionsMixin = {\n\t  regionClass: Region,\n\n\t  // Internal method to initialize the regions that have been defined in a\n\t  // `regions` attribute on this View.\n\t  _initRegions: function _initRegions() {\n\n\t    // init regions hash\n\t    this.regions = this.regions || {};\n\t    this._regions = {};\n\n\t    this.addRegions(_.result(this, 'regions'));\n\t  },\n\n\t  // Internal method to re-initialize all of the regions by updating\n\t  // the `el` that they point to\n\t  _reInitRegions: function _reInitRegions() {\n\t    _invoke(this._regions, 'reset');\n\t  },\n\n\t  // Add a single region, by name, to the View\n\t  addRegion: function addRegion(name, definition) {\n\t    var regions = {};\n\t    regions[name] = definition;\n\t    return this.addRegions(regions)[name];\n\t  },\n\n\t  // Add multiple regions as a {name: definition, name2: def2} object literal\n\t  addRegions: function addRegions(regions) {\n\t    // If there's nothing to add, stop here.\n\t    if (_.isEmpty(regions)) {\n\t      return;\n\t    }\n\n\t    // Normalize region selectors hash to allow\n\t    // a user to use the @ui. syntax.\n\t    regions = this.normalizeUIValues(regions, ['selector', 'el']);\n\n\t    // Add the regions definitions to the regions property\n\t    this.regions = _.extend({}, this.regions, regions);\n\n\t    return this._addRegions(regions);\n\t  },\n\n\t  // internal method to build and add regions\n\t  _addRegions: function _addRegions(regionDefinitions) {\n\t    var _this = this;\n\n\t    return _.reduce(regionDefinitions, function (regions, definition, name) {\n\t      regions[name] = _this._buildRegion(definition);\n\t      _this._addRegion(regions[name], name);\n\t      return regions;\n\t    }, {});\n\t  },\n\n\t  // return the region instance from the definition\n\t  _buildRegion: function _buildRegion(definition) {\n\t    if (definition instanceof Region) {\n\t      return definition;\n\t    }\n\n\t    return this._buildRegionFromDefinition(definition);\n\t  },\n\n\t  _buildRegionFromDefinition: function _buildRegionFromDefinition(definition) {\n\t    if (_.isString(definition)) {\n\t      return this._buildRegionFromObject({ el: definition });\n\t    }\n\n\t    if (_.isFunction(definition)) {\n\t      return this._buildRegionFromRegionClass(definition);\n\t    }\n\n\t    if (_.isObject(definition)) {\n\t      return this._buildRegionFromObject(definition);\n\t    }\n\n\t    throw new MarionetteError({\n\t      message: 'Improper region configuration type.',\n\t      url: 'marionette.region.html#region-configuration-types'\n\t    });\n\t  },\n\n\t  _buildRegionFromObject: function _buildRegionFromObject(definition) {\n\t    var RegionClass = definition.regionClass || this.regionClass;\n\n\t    var options = _.omit(definition, 'regionClass');\n\n\t    _.defaults(options, {\n\t      el: definition.selector,\n\t      parentEl: _.partial(_.result, this, 'el')\n\t    });\n\n\t    return new RegionClass(options);\n\t  },\n\n\t  // Build the region directly from a given `RegionClass`\n\t  _buildRegionFromRegionClass: function _buildRegionFromRegionClass(RegionClass) {\n\t    return new RegionClass({\n\t      parentEl: _.partial(_.result, this, 'el')\n\t    });\n\t  },\n\n\t  _addRegion: function _addRegion(region, name) {\n\t    this.triggerMethod('before:add:region', this, name, region);\n\n\t    region._parent = this;\n\n\t    this._regions[name] = region;\n\n\t    this.triggerMethod('add:region', this, name, region);\n\t  },\n\n\t  // Remove a single region from the View, by name\n\t  removeRegion: function removeRegion(name) {\n\t    var region = this._regions[name];\n\n\t    this._removeRegion(region, name);\n\n\t    return region;\n\t  },\n\n\t  // Remove all regions from the View\n\t  removeRegions: function removeRegions() {\n\t    var regions = this.getRegions();\n\n\t    _.each(this._regions, _.bind(this._removeRegion, this));\n\n\t    return regions;\n\t  },\n\n\t  _removeRegion: function _removeRegion(region, name) {\n\t    this.triggerMethod('before:remove:region', this, name, region);\n\n\t    region.empty();\n\t    region.stopListening();\n\n\t    delete this.regions[name];\n\t    delete this._regions[name];\n\n\t    this.triggerMethod('remove:region', this, name, region);\n\t  },\n\n\t  // Empty all regions in the region manager, but\n\t  // leave them attached\n\t  emptyRegions: function emptyRegions() {\n\t    var regions = this.getRegions();\n\t    _invoke(regions, 'empty');\n\t    return regions;\n\t  },\n\n\t  // Checks to see if view contains region\n\t  // Accepts the region name\n\t  // hasRegion('main')\n\t  hasRegion: function hasRegion(name) {\n\t    return !!this.getRegion(name);\n\t  },\n\n\t  // Provides access to regions\n\t  // Accepts the region name\n\t  // getRegion('main')\n\t  getRegion: function getRegion(name) {\n\t    return this._regions[name];\n\t  },\n\n\t  // Get all regions\n\t  getRegions: function getRegions() {\n\t    return _.clone(this._regions);\n\t  },\n\n\t  showChildView: function showChildView(name, view) {\n\t    var region = this.getRegion(name);\n\n\t    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t      args[_key - 2] = arguments[_key];\n\t    }\n\n\t    return region.show.apply(region, [view].concat(args));\n\t  },\n\n\t  getChildView: function getChildView(name) {\n\t    return this.getRegion(name).currentView;\n\t  }\n\n\t};\n\n\tvar ClassOptions$1 = ['behaviors', 'childViewEventPrefix', 'childViewEvents', 'childViewTriggers', 'collectionEvents', 'events', 'modelEvents', 'regionClass', 'regions', 'template', 'templateContext', 'triggers', 'ui'];\n\n\t// The standard view. Includes view events, automatic rendering\n\t// of Underscore templates, nested views, and more.\n\tvar View = Backbone.View.extend({\n\t  constructor: function constructor(options) {\n\t    this.render = _.bind(this.render, this);\n\n\t    this._setOptions(options);\n\n\t    this.mergeOptions(options, ClassOptions$1);\n\n\t    monitorViewEvents(this);\n\n\t    this._initBehaviors();\n\t    this._initRegions();\n\n\t    var args = Array.prototype.slice.call(arguments);\n\t    args[0] = this.options;\n\t    Backbone.View.prototype.constructor.apply(this, args);\n\n\t    this.delegateEntityEvents();\n\t  },\n\n\n\t  // Serialize the view's model *or* collection, if\n\t  // it exists, for the template\n\t  serializeData: function serializeData() {\n\t    if (!this.model && !this.collection) {\n\t      return {};\n\t    }\n\n\t    // If we have a model, we serialize that\n\t    if (this.model) {\n\t      return this.serializeModel();\n\t    }\n\n\t    // Otherwise, we serialize the collection,\n\t    // making it available under the `items` property\n\t    return {\n\t      items: this.serializeCollection()\n\t    };\n\t  },\n\n\n\t  // Prepares the special `model` property of a view\n\t  // for being displayed in the template. By default\n\t  // we simply clone the attributes. Override this if\n\t  // you need a custom transformation for your view's model\n\t  serializeModel: function serializeModel() {\n\t    if (!this.model) {\n\t      return {};\n\t    }\n\t    return _.clone(this.model.attributes);\n\t  },\n\n\n\t  // Serialize a collection by cloning each of\n\t  // its model's attributes\n\t  serializeCollection: function serializeCollection() {\n\t    if (!this.collection) {\n\t      return {};\n\t    }\n\t    return this.collection.map(function (model) {\n\t      return _.clone(model.attributes);\n\t    });\n\t  },\n\n\n\t  // Render the view, defaulting to underscore.js templates.\n\t  // You can override this in your view definition to provide\n\t  // a very specific rendering for your view. In general, though,\n\t  // you should override the `Marionette.Renderer` object to\n\t  // change how Marionette renders views.\n\t  // Subsequent renders after the first will re-render all nested\n\t  // views.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\n\t    this.triggerMethod('before:render', this);\n\n\t    // If this is not the first render call, then we need to\n\t    // re-initialize the `el` for each region\n\t    if (this._isRendered) {\n\t      this._reInitRegions();\n\t    }\n\n\t    this._renderTemplate();\n\t    this.bindUIElements();\n\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\n\t    return this;\n\t  },\n\n\n\t  // Internal method to render the template with the serialized data\n\t  // and template context via the `Marionette.Renderer` object.\n\t  _renderTemplate: function _renderTemplate() {\n\t    var template = this.getTemplate();\n\n\t    // Allow template-less views\n\t    if (template === false) {\n\t      return;\n\t    }\n\n\t    // Add in entity data and template context\n\t    var data = this.mixinTemplateContext(this.serializeData());\n\n\t    // Render and add to el\n\t    var html = Renderer.render(template, data, this);\n\t    this.attachElContent(html);\n\t  },\n\n\n\t  // Get the template for this view\n\t  // instance. You can set a `template` attribute in the view\n\t  // definition or pass a `template: \"whatever\"` parameter in\n\t  // to the constructor options.\n\t  getTemplate: function getTemplate() {\n\t    return this.template;\n\t  },\n\n\n\t  // Mix in template context methods. Looks for a\n\t  // `templateContext` attribute, which can either be an\n\t  // object literal, or a function that returns an object\n\t  // literal. All methods and attributes from this object\n\t  // are copies to the object passed in.\n\t  mixinTemplateContext: function mixinTemplateContext() {\n\t    var target = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    var templateContext = _.result(this, 'templateContext');\n\t    return _.extend(target, templateContext);\n\t  },\n\n\t  // Attaches the content of a given view.\n\t  // This method can be overridden to optimize rendering,\n\t  // or to render in a non standard way.\n\t  //\n\t  // For example, using `innerHTML` instead of `$el.html`\n\t  //\n\t  // ```js\n\t  // attachElContent(html) {\n\t  //   this.el.innerHTML = html;\n\t  //   return this;\n\t  // }\n\t  // ```\n\t  attachElContent: function attachElContent(html) {\n\t    this.$el.html(html);\n\n\t    return this;\n\t  },\n\n\n\t  // called by ViewMixin destroy\n\t  _removeChildren: function _removeChildren() {\n\t    this.removeRegions();\n\t  },\n\n\n\t  _getImmediateChildren: function _getImmediateChildren() {\n\t    return _.chain(this.getRegions()).map('currentView').compact().value();\n\t  }\n\t});\n\n\t_.extend(View.prototype, ViewMixin, RegionsMixin);\n\n\tvar backbone_babysitter = __commonjs(function (module, exports, global) {\n\t// Backbone.BabySitter\n\t// -------------------\n\t// v1.0.0-pre.1\n\t//\n\t// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.\n\t// Distributed under MIT license\n\t//\n\t// http://github.com/marionettejs/backbone.babysitter\n\n\t(function(root, factory) {\n\n\t  if (typeof define === 'function' && define.amd) {\n\t    define(['backbone', 'underscore'], function(Backbone$$, _$$) {\n\t      return factory(Backbone$$, _$$);\n\t    });\n\t  } else if (typeof exports !== 'undefined') {\n\t    var Backbone$$ = Backbone;\n\t    var _$$ = _;\n\t    module.exports = factory(Backbone$$, _$$);\n\t  } else {\n\t    factory(root.Backbone, root._);\n\t  }\n\n\t}(__commonjs_global, function(Backbone$$, _$$) {\n\t  'use strict';\n\n\t  var previousChildViewContainer = Backbone$$.ChildViewContainer;\n\n\t  // BabySitter.ChildViewContainer\n\t  // -----------------------------\n\t  //\n\t  // Provide a container to store, retrieve and\n\t  // shut down child views.\n\t  \n\t  Backbone$$.ChildViewContainer = (function (Backbone$$, _$$) {\n\t  \n\t    // Container Constructor\n\t    // ---------------------\n\t  \n\t    var Container = function(views){\n\t      this._views = {};\n\t      this._indexByModel = {};\n\t      this._indexByCustom = {};\n\t      this._updateLength();\n\t  \n\t      _$$.each(views, this.add, this);\n\t    };\n\t  \n\t    // Container Methods\n\t    // -----------------\n\t  \n\t    _$$.extend(Container.prototype, {\n\t  \n\t      // Add a view to this container. Stores the view\n\t      // by `cid` and makes it searchable by the model\n\t      // cid (and model itself). Optionally specify\n\t      // a custom key to store an retrieve the view.\n\t      add: function(view, customIndex){\n\t        var viewCid = view.cid;\n\t  \n\t        // store the view\n\t        this._views[viewCid] = view;\n\t  \n\t        // index it by model\n\t        if (view.model){\n\t          this._indexByModel[view.model.cid] = viewCid;\n\t        }\n\t  \n\t        // index by custom\n\t        if (customIndex){\n\t          this._indexByCustom[customIndex] = viewCid;\n\t        }\n\t  \n\t        this._updateLength();\n\t        return this;\n\t      },\n\t  \n\t      // Find a view by the model that was attached to\n\t      // it. Uses the model's `cid` to find it.\n\t      findByModel: function(model){\n\t        return this.findByModelCid(model.cid);\n\t      },\n\t  \n\t      // Find a view by the `cid` of the model that was attached to\n\t      // it. Uses the model's `cid` to find the view `cid` and\n\t      // retrieve the view using it.\n\t      findByModelCid: function(modelCid){\n\t        var viewCid = this._indexByModel[modelCid];\n\t        return this.findByCid(viewCid);\n\t      },\n\t  \n\t      // Find a view by a custom indexer.\n\t      findByCustom: function(index){\n\t        var viewCid = this._indexByCustom[index];\n\t        return this.findByCid(viewCid);\n\t      },\n\t  \n\t      // Find by index. This is not guaranteed to be a\n\t      // stable index.\n\t      findByIndex: function(index){\n\t        return _$$.values(this._views)[index];\n\t      },\n\t  \n\t      // retrieve a view by its `cid` directly\n\t      findByCid: function(cid){\n\t        return this._views[cid];\n\t      },\n\t  \n\t      // Remove a view\n\t      remove: function(view){\n\t        var viewCid = view.cid;\n\t  \n\t        // delete model index\n\t        if (view.model){\n\t          delete this._indexByModel[view.model.cid];\n\t        }\n\t  \n\t        // delete custom index\n\t        _$$.any(this._indexByCustom, function(cid, key) {\n\t          if (cid === viewCid) {\n\t            delete this._indexByCustom[key];\n\t            return true;\n\t          }\n\t        }, this);\n\t  \n\t        // remove the view from the container\n\t        delete this._views[viewCid];\n\t  \n\t        // update the length\n\t        this._updateLength();\n\t        return this;\n\t      },\n\t  \n\t      // Call a method on every view in the container,\n\t      // passing parameters to the call method one at a\n\t      // time, like `function.call`.\n\t      call: function(method){\n\t        this.apply(method, _$$.tail(arguments));\n\t      },\n\t  \n\t      // Apply a method on every view in the container,\n\t      // passing parameters to the call method one at a\n\t      // time, like `function.apply`.\n\t      apply: function(method, args){\n\t        _$$.each(this._views, function(view){\n\t          if (_$$.isFunction(view[method])){\n\t            view[method].apply(view, args || []);\n\t          }\n\t        });\n\t      },\n\t  \n\t      // Update the `.length` attribute on this container\n\t      _updateLength: function(){\n\t        this.length = _$$.size(this._views);\n\t      }\n\t    });\n\t  \n\t    // Borrowing this code from Backbone.Collection:\n\t    // http://backbonejs.org/docs/backbone.html#section-106\n\t    //\n\t    // Mix in methods from Underscore, for iteration, and other\n\t    // collection related features.\n\t    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',\n\t      'select', 'reject', 'every', 'all', 'some', 'any', 'include',\n\t      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',\n\t      'last', 'without', 'isEmpty', 'pluck', 'reduce'];\n\t  \n\t    _$$.each(methods, function(method) {\n\t      Container.prototype[method] = function() {\n\t        var views = _$$.values(this._views);\n\t        var args = [views].concat(_$$.toArray(arguments));\n\t        return _$$[method].apply(_$$, args);\n\t      };\n\t    });\n\t  \n\t    // return the public API\n\t    return Container;\n\t  })(Backbone$$, _$$);\n\t  \n\n\t  Backbone$$.ChildViewContainer.VERSION = '1.0.0-pre.1';\n\n\t  Backbone$$.ChildViewContainer.noConflict = function () {\n\t    Backbone$$.ChildViewContainer = previousChildViewContainer;\n\t    return this;\n\t  };\n\n\t  return Backbone$$.ChildViewContainer;\n\n\t}));\n\t});\n\n\tvar ChildViewContainer = (backbone_babysitter && typeof backbone_babysitter === 'object' && 'default' in backbone_babysitter ? backbone_babysitter['default'] : backbone_babysitter);\n\n\tvar ClassOptions$3 = ['behaviors', 'childView', 'childViewEventPrefix', 'childViewEvents', 'childViewOptions', 'childViewTriggers', 'collectionEvents', 'events', 'filter', 'emptyView', 'emptyViewOptions', 'modelEvents', 'reorderOnSort', 'sort', 'triggers', 'ui', 'viewComparator'];\n\n\t// A view that iterates over a Backbone.Collection\n\t// and renders an individual child view for each model.\n\tvar CollectionView = Backbone.View.extend({\n\n\t  // flag for maintaining the sorted order of the collection\n\t  sort: true,\n\n\t  // constructor\n\t  // option to pass `{sort: false}` to prevent the `CollectionView` from\n\t  // maintaining the sorted order of the collection.\n\t  // This will fallback onto appending childView's to the end.\n\t  //\n\t  // option to pass `{comparator: compFunction()}` to allow the `CollectionView`\n\t  // to use a custom sort order for the collection.\n\t  constructor: function constructor(options) {\n\t    this.render = _.bind(this.render, this);\n\n\t    this._setOptions(options);\n\n\t    this.mergeOptions(options, ClassOptions$3);\n\n\t    monitorViewEvents(this);\n\n\t    this._initBehaviors();\n\t    this.once('render', this._initialEvents);\n\t    this._initChildViewStorage();\n\t    this._bufferedChildren = [];\n\n\t    var args = Array.prototype.slice.call(arguments);\n\t    args[0] = this.options;\n\t    Backbone.View.prototype.constructor.apply(this, args);\n\n\t    this.delegateEntityEvents();\n\t  },\n\n\n\t  // Instead of inserting elements one by one into the page, it's much more performant to insert\n\t  // elements into a document fragment and then insert that document fragment into the page\n\t  _startBuffering: function _startBuffering() {\n\t    this._isBuffering = true;\n\t  },\n\t  _endBuffering: function _endBuffering() {\n\t    var shouldTriggerAttach = !!this._isAttached;\n\t    var triggerOnChildren = shouldTriggerAttach ? this._getImmediateChildren() : [];\n\n\t    this._isBuffering = false;\n\n\t    _.each(triggerOnChildren, function (child) {\n\t      triggerMethodOn(child, 'before:attach', child);\n\t    });\n\n\t    this.attachBuffer(this, this._createBuffer());\n\n\t    _.each(triggerOnChildren, function (child) {\n\t      child._isAttached = true;\n\t      triggerMethodOn(child, 'attach', child);\n\t    });\n\n\t    this._bufferedChildren = [];\n\t  },\n\t  _getImmediateChildren: function _getImmediateChildren() {\n\t    return _.values(this.children._views);\n\t  },\n\n\n\t  // Configured the initial events that the collection view binds to.\n\t  _initialEvents: function _initialEvents() {\n\t    if (this.collection) {\n\t      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n\t      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n\t      this.listenTo(this.collection, 'reset', this.render);\n\n\t      if (this.sort) {\n\t        this.listenTo(this.collection, 'sort', this._sortViews);\n\t      }\n\t    }\n\t  },\n\n\n\t  // Handle a child added to the collection\n\t  _onCollectionAdd: function _onCollectionAdd(child, collection, opts) {\n\t    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n\t    var index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n\t    // When filtered or when there is no initial index, calculate index.\n\t    if (this.filter || index === false) {\n\t      index = _.indexOf(this._filteredSortedModels(index), child);\n\t    }\n\n\t    if (this._shouldAddChild(child, index)) {\n\t      this._destroyEmptyView();\n\t      var ChildView = this._getChildView(child);\n\t      this._addChild(child, ChildView, index);\n\t    }\n\t  },\n\n\n\t  // get the child view by model it holds, and remove it\n\t  _onCollectionRemove: function _onCollectionRemove(model) {\n\t    var view = this.children.findByModel(model);\n\t    this.removeChildView(view);\n\t    this._checkEmpty();\n\t  },\n\n\n\t  // Render children views. Override this method to provide your own implementation of a\n\t  // render function for the collection view.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\t    this.triggerMethod('before:render', this);\n\t    this._renderChildren();\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\t    return this;\n\t  },\n\n\n\t  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n\t  // collection view, we are only adding or removing the related childrenViews.\n\t  setFilter: function setFilter(filter) {\n\t    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n\t    var preventRender = _ref.preventRender;\n\n\t    var canBeRendered = this._isRendered && !this._isDestroyed;\n\t    var filterChanged = this.filter !== filter;\n\t    var shouldRender = canBeRendered && filterChanged && !preventRender;\n\n\t    if (shouldRender) {\n\t      this.triggerMethod('before:apply:filter', this);\n\t      var previousModels = this._filteredSortedModels();\n\t      this.filter = filter;\n\t      var models = this._filteredSortedModels();\n\t      this._applyModelDeltas(models, previousModels);\n\t      this.triggerMethod('apply:filter', this);\n\t    } else {\n\t      this.filter = filter;\n\t    }\n\t    return this;\n\t  },\n\n\n\t  // `removeFilter` is actually an alias for removing filters.\n\t  removeFilter: function removeFilter(options) {\n\t    this.setFilter(null, options);\n\t    return this;\n\t  },\n\n\n\t  // Calculate and apply difference by cid between `models` and `previousModels`.\n\t  _applyModelDeltas: function _applyModelDeltas(models, previousModels) {\n\t    var _this = this;\n\n\t    var currentIds = {};\n\t    _.each(models, function (model, index) {\n\t      var addedChildNotExists = !_this.children.findByModel(model);\n\t      if (addedChildNotExists) {\n\t        _this._onCollectionAdd(model, _this.collection, { at: index });\n\t      }\n\t      currentIds[model.cid] = true;\n\t    });\n\t    _.each(previousModels, function (prevModel) {\n\t      var removedChildExists = !currentIds[prevModel.cid] && _this.children.findByModel(prevModel);\n\t      if (removedChildExists) {\n\t        _this._onCollectionRemove(prevModel);\n\t      }\n\t    });\n\t  },\n\n\n\t  // Reorder DOM after sorting. When your element's rendering do not use their index,\n\t  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n\t  // rendering all the collectionView.\n\t  reorder: function reorder() {\n\t    var _this2 = this;\n\n\t    var children = this.children;\n\t    var models = this._filteredSortedModels();\n\n\t    if (!models.length && this._showingEmptyView) {\n\t      return this;\n\t    }\n\n\t    var anyModelsAdded = _.some(models, function (model) {\n\t      return !children.findByModel(model);\n\t    });\n\n\t    // If there are any new models added due to filtering we need to add child views,\n\t    // so render as normal.\n\t    if (anyModelsAdded) {\n\t      this.render();\n\t    } else {\n\t      (function () {\n\t        // Get the DOM nodes in the same order as the models.\n\t        var elsToReorder = _.map(models, function (model, index) {\n\t          var view = children.findByModel(model);\n\t          view._index = index;\n\t          return view.el;\n\t        });\n\n\t        // Find the views that were children before but aren't in this new ordering.\n\t        var filteredOutViews = children.filter(function (view) {\n\t          return !_.contains(elsToReorder, view.el);\n\t        });\n\n\t        _this2.triggerMethod('before:reorder', _this2);\n\n\t        // Since append moves elements that are already in the DOM, appending the elements\n\t        // will effectively reorder them.\n\t        _this2._appendReorderedChildren(elsToReorder);\n\n\t        // remove any views that have been filtered out\n\t        _.each(filteredOutViews, _.bind(_this2.removeChildView, _this2));\n\t        _this2._checkEmpty();\n\n\t        _this2.triggerMethod('reorder', _this2);\n\t      })();\n\t    }\n\t    return this;\n\t  },\n\n\n\t  // Render view after sorting. Override this method to change how the view renders\n\t  // after a `sort` on the collection.\n\t  resortView: function resortView() {\n\t    if (this.reorderOnSort) {\n\t      this.reorder();\n\t    } else {\n\t      this._renderChildren();\n\t    }\n\t    return this;\n\t  },\n\n\n\t  // Internal method. This checks for any changes in the order of the collection.\n\t  // If the index of any view doesn't match, it will render.\n\t  _sortViews: function _sortViews() {\n\t    var _this3 = this;\n\n\t    var models = this._filteredSortedModels();\n\n\t    // check for any changes in sort order of views\n\t    var orderChanged = _.find(models, function (item, index) {\n\t      var view = _this3.children.findByModel(item);\n\t      return !view || view._index !== index;\n\t    });\n\n\t    if (orderChanged) {\n\t      this.resortView();\n\t    }\n\t  },\n\n\n\t  // Internal reference to what index a `emptyView` is.\n\t  _emptyViewIndex: -1,\n\n\t  // Internal method. Separated so that CompositeView can append to the childViewContainer\n\t  // if necessary\n\t  _appendReorderedChildren: function _appendReorderedChildren(children) {\n\t    this.$el.append(children);\n\t  },\n\n\n\t  // Internal method. Separated so that CompositeView can have more control over events\n\t  // being triggered, around the rendering process\n\t  _renderChildren: function _renderChildren() {\n\t    this._destroyEmptyView();\n\t    this._destroyChildren({ checkEmpty: false });\n\n\t    var models = this._filteredSortedModels();\n\t    if (this.isEmpty({ processedModels: models })) {\n\t      this._showEmptyView();\n\t    } else {\n\t      this.triggerMethod('before:render:children', this);\n\t      this._startBuffering();\n\t      this._showCollection(models);\n\t      this._endBuffering();\n\t      this.triggerMethod('render:children', this);\n\t    }\n\t  },\n\n\n\t  // Internal method to loop through collection and show each child view.\n\t  _showCollection: function _showCollection(models) {\n\t    var _this4 = this;\n\n\t    _.each(models, function (child, index) {\n\t      var ChildView = _this4._getChildView(child);\n\t      _this4._addChild(child, ChildView, index);\n\t    });\n\t  },\n\n\n\t  // Allow the collection to be sorted by a custom view comparator\n\t  _filteredSortedModels: function _filteredSortedModels(addedAt) {\n\t    if (!this.collection) {\n\t      return [];\n\t    }\n\n\t    var viewComparator = this.getViewComparator();\n\t    var models = this.collection.models;\n\t    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n\t    if (viewComparator) {\n\t      var addedModel = void 0;\n\t      // Preserve `at` location, even for a sorted view\n\t      if (addedAt) {\n\t        addedModel = models[addedAt];\n\t        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n\t      }\n\t      models = this._sortModelsBy(models, viewComparator);\n\t      if (addedModel) {\n\t        models.splice(addedAt, 0, addedModel);\n\t      }\n\t    }\n\n\t    // Filter after sorting in case the filter uses the index\n\t    models = this._filterModels(models);\n\n\t    return models;\n\t  },\n\t  getViewComparator: function getViewComparator() {\n\t    return this.viewComparator;\n\t  },\n\n\n\t  // Filter an array of models, if a filter exists\n\t  _filterModels: function _filterModels(models) {\n\t    var _this5 = this;\n\n\t    if (this.filter) {\n\t      models = _.filter(models, function (model, index) {\n\t        return _this5._shouldAddChild(model, index);\n\t      });\n\t    }\n\t    return models;\n\t  },\n\t  _sortModelsBy: function _sortModelsBy(models, comparator) {\n\t    if (typeof comparator === 'string') {\n\t      return _.sortBy(models, function (model) {\n\t        return model.get(comparator);\n\t      });\n\t    } else if (comparator.length === 1) {\n\t      return _.sortBy(models, _.bind(comparator, this));\n\t    } else {\n\t      return models.sort(_.bind(comparator, this));\n\t    }\n\t  },\n\n\n\t  // Internal method to show an empty view in place of a collection of child views,\n\t  // when the collection is empty\n\t  _showEmptyView: function _showEmptyView() {\n\t    var EmptyView = this.getEmptyView();\n\n\t    if (EmptyView && !this._showingEmptyView) {\n\t      this._showingEmptyView = true;\n\n\t      var model = new Backbone.Model();\n\t      var emptyViewOptions = this.emptyViewOptions || this.childViewOptions;\n\t      if (_.isFunction(emptyViewOptions)) {\n\t        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n\t      }\n\n\t      var view = this.buildChildView(model, EmptyView, emptyViewOptions);\n\n\t      this.triggerMethod('before:render:empty', this, view);\n\t      this._addChildView(view, 0);\n\t      this.triggerMethod('render:empty', this, view);\n\n\t      view._parent = this;\n\t    }\n\t  },\n\n\n\t  // Internal method to destroy an existing emptyView instance if one exists. Called when\n\t  // a collection view has been rendered empty, and then a child is added to the collection.\n\t  _destroyEmptyView: function _destroyEmptyView() {\n\t    if (this._showingEmptyView) {\n\t      this.triggerMethod('before:remove:empty', this);\n\n\t      this._destroyChildren();\n\t      delete this._showingEmptyView;\n\n\t      this.triggerMethod('remove:empty', this);\n\t    }\n\t  },\n\n\n\t  // Retrieve the empty view class\n\t  getEmptyView: function getEmptyView() {\n\t    return this.emptyView;\n\t  },\n\n\n\t  // Retrieve the `childView` class, either from `this.options.childView` or from\n\t  // the `childView` in the object definition. The \"options\" takes precedence.\n\t  // The `childView` property can be either a view class or a function that\n\t  // returns a view class. If it is a function, it will receive the model that\n\t  // will be passed to the view instance (created from the returned view class)\n\t  _getChildView: function _getChildView(child) {\n\t    var childView = this.childView;\n\n\t    if (!childView) {\n\t      throw new MarionetteError({\n\t        name: 'NoChildViewError',\n\t        message: 'A \"childView\" must be specified'\n\t      });\n\t    }\n\n\t    // first check if the `childView` is a view class (the common case)\n\t    // then check if it's a function (which we assume that returns a view class)\n\t    if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n\t      return childView;\n\t    } else if (_.isFunction(childView)) {\n\t      return childView.call(this, child);\n\t    } else {\n\t      throw new MarionetteError({\n\t        name: 'InvalidChildViewError',\n\t        message: '\"childView\" must be a view class or a function that returns a view class'\n\t      });\n\t    }\n\t  },\n\n\n\t  // Internal method for building and adding a child view\n\t  _addChild: function _addChild(child, ChildView, index) {\n\t    var childViewOptions = this._getChildViewOptions(child, index);\n\n\t    var view = this.buildChildView(child, ChildView, childViewOptions);\n\n\t    this.addChildView(view, index);\n\n\t    return view;\n\t  },\n\t  _getChildViewOptions: function _getChildViewOptions(child, index) {\n\t    if (_.isFunction(this.childViewOptions)) {\n\t      return this.childViewOptions(child, index);\n\t    }\n\n\t    return this.childViewOptions;\n\t  },\n\n\n\t  // Render the child's view and add it to the HTML for the collection view at a given index.\n\t  // This will also update the indices of later views in the collection in order to keep the\n\t  // children in sync with the collection.\n\t  addChildView: function addChildView(view, index) {\n\t    this.triggerMethod('before:add:child', this, view);\n\n\t    // increment indices of views after this one\n\t    this._updateIndices(view, true, index);\n\n\t    view._parent = this;\n\n\t    this._addChildView(view, index);\n\n\t    this.triggerMethod('add:child', this, view);\n\n\t    return view;\n\t  },\n\n\n\t  // Internal method. This decrements or increments the indices of views after the added/removed\n\t  // view to keep in sync with the collection.\n\t  _updateIndices: function _updateIndices(view, increment, index) {\n\t    if (!this.sort) {\n\t      return;\n\t    }\n\n\t    if (increment) {\n\t      // assign the index to the view\n\t      view._index = index;\n\t    }\n\n\t    // update the indexes of views after this one\n\t    this.children.each(function (laterView) {\n\t      if (laterView._index >= view._index) {\n\t        laterView._index += increment ? 1 : -1;\n\t      }\n\t    });\n\t  },\n\n\n\t  // Internal Method. Add the view to children and render it at the given index.\n\t  _addChildView: function _addChildView(view, index) {\n\t    // Only trigger attach if already attached and not buffering,\n\t    // otherwise _endBuffering() or Region#show() handles this.\n\t    var shouldTriggerAttach = !this._isBuffering && this._isAttached;\n\n\t    monitorViewEvents(view);\n\n\t    // set up the child view event forwarding\n\t    this._proxyChildEvents(view);\n\n\t    // Store the child view itself so we can properly remove and/or destroy it later\n\t    this.children.add(view);\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      triggerMethodOn(view, 'before:render', view);\n\t    }\n\n\t    // Render view\n\t    view.render();\n\n\t    if (!view.supportsRenderLifecycle) {\n\t      view._isRendered = true;\n\t      triggerMethodOn(view, 'render', view);\n\t    }\n\n\t    if (shouldTriggerAttach) {\n\t      triggerMethodOn(view, 'before:attach', view);\n\t    }\n\n\t    // Attach view\n\t    this.attachHtml(this, view, index);\n\n\t    if (shouldTriggerAttach) {\n\t      view._isAttached = true;\n\t      triggerMethodOn(view, 'attach', view);\n\t    }\n\t  },\n\n\n\t  // Build a `childView` for a model in the collection.\n\t  buildChildView: function buildChildView(child, ChildViewClass, childViewOptions) {\n\t    var options = _.extend({ model: child }, childViewOptions);\n\t    return new ChildViewClass(options);\n\t  },\n\n\n\t  // Remove the child view and destroy it. This function also updates the indices of later views\n\t  // in the collection in order to keep the children in sync with the collection.\n\t  removeChildView: function removeChildView(view) {\n\t    if (!view || view._isDestroyed) {\n\t      return;\n\t    }\n\n\t    this.triggerMethod('before:remove:child', this, view);\n\n\t    if (view.destroy) {\n\t      view.destroy();\n\t    } else {\n\t      destroyBackboneView(view);\n\t    }\n\n\t    delete view._parent;\n\t    this.stopListening(view);\n\t    this.children.remove(view);\n\t    this.triggerMethod('remove:child', this, view);\n\n\t    // decrement the index of views after this one\n\t    this._updateIndices(view, false);\n\t  },\n\n\n\t  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n\t  isEmpty: function isEmpty(options) {\n\t    var models = void 0;\n\t    if (_.result(options, 'processedModels')) {\n\t      models = options.processedModels;\n\t    } else {\n\t      models = this.collection ? this.collection.models : [];\n\t      models = this._filterModels(models);\n\t    }\n\t    return models.length === 0;\n\t  },\n\n\n\t  // If empty, show the empty view\n\t  _checkEmpty: function _checkEmpty() {\n\t    if (this.isEmpty()) {\n\t      this._showEmptyView();\n\t    }\n\t  },\n\n\n\t  // You might need to override this if you've overridden attachHtml\n\t  attachBuffer: function attachBuffer(collectionView, buffer) {\n\t    collectionView.$el.append(buffer);\n\t  },\n\n\n\t  // Create a fragment buffer from the currently buffered children\n\t  _createBuffer: function _createBuffer() {\n\t    var elBuffer = document.createDocumentFragment();\n\t    _.each(this._bufferedChildren, function (b) {\n\t      elBuffer.appendChild(b.el);\n\t    });\n\t    return elBuffer;\n\t  },\n\n\n\t  // Append the HTML to the collection's `el`. Override this method to do something other\n\t  // than `.append`.\n\t  attachHtml: function attachHtml(collectionView, childView, index) {\n\t    if (collectionView._isBuffering) {\n\t      // buffering happens on reset events and initial renders\n\t      // in order to reduce the number of inserts into the\n\t      // document, which are expensive.\n\t      collectionView._bufferedChildren.splice(index, 0, childView);\n\t    } else {\n\t      // If we've already rendered the main collection, append\n\t      // the new child into the correct order if we need to. Otherwise\n\t      // append to the end.\n\t      if (!collectionView._insertBefore(childView, index)) {\n\t        collectionView._insertAfter(childView);\n\t      }\n\t    }\n\t  },\n\n\n\t  // Internal method. Check whether we need to insert the view into the correct position.\n\t  _insertBefore: function _insertBefore(childView, index) {\n\t    var currentView = void 0;\n\t    var findPosition = this.sort && index < this.children.length - 1;\n\t    if (findPosition) {\n\t      // Find the view after this one\n\t      currentView = this.children.find(function (view) {\n\t        return view._index === index + 1;\n\t      });\n\t    }\n\n\t    if (currentView) {\n\t      currentView.$el.before(childView.el);\n\t      return true;\n\t    }\n\n\t    return false;\n\t  },\n\n\n\t  // Internal method. Append a view to the end of the $el\n\t  _insertAfter: function _insertAfter(childView) {\n\t    this.$el.append(childView.el);\n\t  },\n\n\n\t  // Internal method to set up the `children` object for storing all of the child views\n\t  _initChildViewStorage: function _initChildViewStorage() {\n\t    this.children = new ChildViewContainer();\n\t  },\n\n\n\t  // called by ViewMixin destroy\n\t  _removeChildren: function _removeChildren() {\n\t    this._destroyChildren({ checkEmpty: false });\n\t  },\n\n\n\t  // Destroy the child views that this collection view is holding on to, if any\n\t  _destroyChildren: function _destroyChildren() {\n\t    var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n\t    var checkEmpty = _ref2.checkEmpty;\n\n\t    this.triggerMethod('before:destroy:children', this);\n\t    var shouldCheckEmpty = checkEmpty !== false;\n\t    var childViews = this.children.map(_.identity);\n\n\t    this.children.each(_.bind(this.removeChildView, this));\n\n\t    if (shouldCheckEmpty) {\n\t      this._checkEmpty();\n\t    }\n\n\t    this.triggerMethod('destroy:children', this);\n\t    return childViews;\n\t  },\n\n\n\t  // Return true if the given child should be shown. Return false otherwise.\n\t  // The filter will be passed (child, index, collection), where\n\t  //  'child' is the given model\n\t  //  'index' is the index of that model in the collection\n\t  //  'collection' is the collection referenced by this CollectionView\n\t  _shouldAddChild: function _shouldAddChild(child, index) {\n\t    var filter = this.filter;\n\t    return !_.isFunction(filter) || filter.call(this, child, index, this.collection);\n\t  },\n\n\n\t  // Set up the child view event forwarding. Uses a \"childview:\" prefix in front of all forwarded events.\n\t  _proxyChildEvents: function _proxyChildEvents(view) {\n\t    var prefix = _.result(this, 'childViewEventPrefix');\n\n\t    // Forward all child view events through the parent,\n\t    // prepending \"childview:\" to the event name\n\t    this.listenTo(view, 'all', function (eventName) {\n\n\t      var childEventName = prefix + ':' + eventName;\n\n\t      var childViewEvents = this.normalizeMethods(this._childViewEvents);\n\n\t      // call collectionView childViewEvent if defined\n\n\t      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t        args[_key - 1] = arguments[_key];\n\t      }\n\n\t      if (typeof childViewEvents !== 'undefined' && _.isFunction(childViewEvents[eventName])) {\n\t        childViewEvents[eventName].apply(this, args);\n\t      }\n\n\t      // use the parent view's proxyEvent handlers\n\t      var childViewTriggers = this._childViewTriggers;\n\n\t      // Call the event with the proxy name on the parent layout\n\t      if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n\t        this.triggerMethod.apply(this, [childViewTriggers[eventName]].concat(args));\n\t      }\n\n\t      this.triggerMethod.apply(this, [childEventName].concat(args));\n\t    });\n\t  }\n\t});\n\n\t_.extend(CollectionView.prototype, ViewMixin);\n\n\tvar ClassOptions$4 = ['childViewContainer', 'template', 'templateContext'];\n\n\t// Used for rendering a branch-leaf, hierarchical structure.\n\t// Extends directly from CollectionView and also renders an\n\t// a child view as `modelView`, for the top leaf\n\t// @deprecated\n\tvar CompositeView = CollectionView.extend({\n\n\t  // Setting up the inheritance chain which allows changes to\n\t  // Marionette.CollectionView.prototype.constructor which allows overriding\n\t  // option to pass '{sort: false}' to prevent the CompositeView from\n\t  // maintaining the sorted order of the collection.\n\t  // This will fallback onto appending childView's to the end.\n\n\t  constructor: function constructor(options) {\n\t    deprecate('CompositeView is deprecated. Convert to View at your earliest convenience');\n\n\t    this.mergeOptions(options, ClassOptions$4);\n\n\t    CollectionView.prototype.constructor.apply(this, arguments);\n\t  },\n\n\n\t  // Configured the initial events that the composite view\n\t  // binds to. Override this method to prevent the initial\n\t  // events, or to add your own initial events.\n\t  _initialEvents: function _initialEvents() {\n\n\t    // Bind only after composite view is rendered to avoid adding child views\n\t    // to nonexistent childViewContainer\n\n\t    if (this.collection) {\n\t      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n\t      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n\t      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n\t      if (this.sort) {\n\t        this.listenTo(this.collection, 'sort', this._sortViews);\n\t      }\n\t    }\n\t  },\n\n\n\t  // Retrieve the `childView` to be used when rendering each of\n\t  // the items in the collection. The default is to return\n\t  // `this.childView` or Marionette.CompositeView if no `childView`\n\t  // has been defined. As happens in CollectionView, `childView` can\n\t  // be a function (which should return a view class).\n\t  _getChildView: function _getChildView(child) {\n\t    var childView = this.childView;\n\n\t    // for CompositeView, if `childView` is not specified, we'll get the same\n\t    // composite view class rendered for each child in the collection\n\t    // then check if the `childView` is a view class (the common case)\n\t    // finally check if it's a function (which we assume that returns a view class)\n\t    if (!childView) {\n\t      return this.constructor;\n\t    } else if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n\t      return childView;\n\t    } else if (_.isFunction(childView)) {\n\t      return childView.call(this, child);\n\t    } else {\n\t      throw new MarionetteError({\n\t        name: 'InvalidChildViewError',\n\t        message: '\"childView\" must be a view class or a function that returns a view class'\n\t      });\n\t    }\n\t  },\n\n\n\t  // Return the serialized model\n\t  serializeData: function serializeData() {\n\t    return this.serializeModel();\n\t  },\n\n\n\t  // Renders the model and the collection.\n\t  render: function render() {\n\t    this._ensureViewIsIntact();\n\t    this._isRendering = true;\n\t    this.resetChildViewContainer();\n\n\t    this.triggerMethod('before:render', this);\n\n\t    this._renderTemplate();\n\t    this.bindUIElements();\n\t    this.renderChildren();\n\n\t    this._isRendering = false;\n\t    this._isRendered = true;\n\t    this.triggerMethod('render', this);\n\t    return this;\n\t  },\n\t  renderChildren: function renderChildren() {\n\t    if (this._isRendered || this._isRendering) {\n\t      CollectionView.prototype._renderChildren.call(this);\n\t    }\n\t  },\n\n\n\t  // You might need to override this if you've overridden attachHtml\n\t  attachBuffer: function attachBuffer(compositeView, buffer) {\n\t    var $container = this.getChildViewContainer(compositeView);\n\t    $container.append(buffer);\n\t  },\n\n\n\t  // Internal method. Append a view to the end of the $el.\n\t  // Overidden from CollectionView to ensure view is appended to\n\t  // childViewContainer\n\t  _insertAfter: function _insertAfter(childView) {\n\t    var $container = this.getChildViewContainer(this, childView);\n\t    $container.append(childView.el);\n\t  },\n\n\n\t  // Internal method. Append reordered childView'.\n\t  // Overidden from CollectionView to ensure reordered views\n\t  // are appended to childViewContainer\n\t  _appendReorderedChildren: function _appendReorderedChildren(children) {\n\t    var $container = this.getChildViewContainer(this);\n\t    $container.append(children);\n\t  },\n\n\n\t  // Internal method to ensure an `$childViewContainer` exists, for the\n\t  // `attachHtml` method to use.\n\t  getChildViewContainer: function getChildViewContainer(containerView, childView) {\n\t    if (!!containerView.$childViewContainer) {\n\t      return containerView.$childViewContainer;\n\t    }\n\n\t    var container = void 0;\n\t    var childViewContainer = containerView.childViewContainer;\n\t    if (childViewContainer) {\n\n\t      var selector = _.result(containerView, 'childViewContainer');\n\n\t      if (selector.charAt(0) === '@' && containerView.ui) {\n\t        container = containerView.ui[selector.substr(4)];\n\t      } else {\n\t        container = containerView.$(selector);\n\t      }\n\n\t      if (container.length <= 0) {\n\t        throw new MarionetteError({\n\t          name: 'ChildViewContainerMissingError',\n\t          message: 'The specified \"childViewContainer\" was not found: ' + containerView.childViewContainer\n\t        });\n\t      }\n\t    } else {\n\t      container = containerView.$el;\n\t    }\n\n\t    containerView.$childViewContainer = container;\n\t    return container;\n\t  },\n\n\n\t  // Internal method to reset the `$childViewContainer` on render\n\t  resetChildViewContainer: function resetChildViewContainer() {\n\t    if (this.$childViewContainer) {\n\t      this.$childViewContainer = undefined;\n\t    }\n\t  }\n\t});\n\n\t// To prevent duplication but allow the best View organization\n\t// Certain View methods are mixed directly into the deprecated CompositeView\n\tvar MixinFromView = _.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', 'mixinTemplateContext', 'attachElContent');\n\t_.extend(CompositeView.prototype, MixinFromView);\n\n\tvar ClassOptions$5 = ['collectionEvents', 'events', 'modelEvents', 'triggers', 'ui'];\n\n\tvar Behavior = MarionetteObject.extend({\n\t  cidPrefix: 'mnb',\n\n\t  constructor: function constructor(options, view) {\n\t    // Setup reference to the view.\n\t    // this comes in handle when a behavior\n\t    // wants to directly talk up the chain\n\t    // to the view.\n\t    this.view = view;\n\t    this.defaults = _.clone(_.result(this, 'defaults', {}));\n\t    this._setOptions(this.defaults, options);\n\t    this.mergeOptions(this.options, ClassOptions$5);\n\n\t    // Construct an internal UI hash using\n\t    // the behaviors UI hash and then the view UI hash.\n\t    // This allows the user to use UI hash elements\n\t    // defined in the parent view as well as those\n\t    // defined in the given behavior.\n\t    // This order will help the reuse and share of a behavior\n\t    // between multiple views, while letting a view override a\n\t    // selector under an UI key.\n\t    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui'));\n\n\t    MarionetteObject.apply(this, arguments);\n\t  },\n\n\t  // proxy behavior $ method to the view\n\t  // this is useful for doing jquery DOM lookups\n\t  // scoped to behaviors view.\n\t  $: function $() {\n\t    return this.view.$.apply(this.view, arguments);\n\t  },\n\n\t  // Stops the behavior from listening to events.\n\t  // Overrides Object#destroy to prevent additional events from being triggered.\n\t  destroy: function destroy() {\n\t    this.stopListening();\n\n\t    return this;\n\t  },\n\n\t  proxyViewProperties: function proxyViewProperties() {\n\t    this.$el = this.view.$el;\n\t    this.el = this.view.el;\n\n\t    return this;\n\t  },\n\n\t  bindUIElements: function bindUIElements() {\n\t    this._bindUIElements();\n\n\t    return this;\n\t  },\n\n\t  unbindUIElements: function unbindUIElements() {\n\t    this._unbindUIElements();\n\n\t    return this;\n\t  },\n\n\t  getUI: function getUI(name) {\n\t    this.view._ensureViewIsIntact();\n\t    return this._getUI(name);\n\t  },\n\n\t  // Handle `modelEvents`, and `collectionEvents` configuration\n\t  delegateEntityEvents: function delegateEntityEvents() {\n\t    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n\t    return this;\n\t  },\n\n\t  undelegateEntityEvents: function undelegateEntityEvents() {\n\t    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n\t    return this;\n\t  },\n\n\t  getEvents: function getEvents() {\n\t    // Normalize behavior events hash to allow\n\t    // a user to use the @ui. syntax.\n\t    var behaviorEvents = this.normalizeUIKeys(_.result(this, 'events'));\n\n\t    // binds the handler to the behavior and builds a unique eventName\n\t    return _.reduce(behaviorEvents, function (events, behaviorHandler, key) {\n\t      if (!_.isFunction(behaviorHandler)) {\n\t        behaviorHandler = this[behaviorHandler];\n\t      }\n\t      if (!behaviorHandler) {\n\t        return;\n\t      }\n\t      key = getUniqueEventName(key);\n\t      events[key] = _.bind(behaviorHandler, this);\n\t      return events;\n\t    }, {}, this);\n\t  },\n\n\t  // Internal method to build all trigger handlers for a given behavior\n\t  getTriggers: function getTriggers() {\n\t    if (!this.triggers) {\n\t      return;\n\t    }\n\n\t    // Normalize behavior triggers hash to allow\n\t    // a user to use the @ui. syntax.\n\t    var behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n\t    return this._getViewTriggers(this.view, behaviorTriggers);\n\t  }\n\n\t});\n\n\t_.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\n\tvar ClassOptions$6 = ['region', 'regionClass'];\n\n\t// A container for a Marionette application.\n\tvar Application = MarionetteObject.extend({\n\t  cidPrefix: 'mna',\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\n\t    this.mergeOptions(options, ClassOptions$6);\n\n\t    this._initRegion();\n\n\t    MarionetteObject.prototype.constructor.apply(this, arguments);\n\t  },\n\n\t  regionClass: Region,\n\n\t  _initRegion: function _initRegion(options) {\n\t    var region = this.region;\n\t    var RegionClass = this.regionClass;\n\n\t    // if the region is a string expect an el or selector\n\t    // and instantiate a region\n\t    if (_.isString(region)) {\n\t      this._region = new RegionClass({\n\t        el: region\n\t      });\n\t      return;\n\t    }\n\n\t    this._region = region;\n\t  },\n\n\t  getRegion: function getRegion() {\n\t    return this._region;\n\t  },\n\n\t  showView: function showView(view) {\n\t    var region = this.getRegion();\n\n\t    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t      args[_key - 1] = arguments[_key];\n\t    }\n\n\t    return region.show.apply(region, [view].concat(args));\n\t  },\n\n\t  getView: function getView() {\n\t    return this.getRegion().currentView;\n\t  },\n\n\t  // kick off all of the application's processes.\n\t  start: function start(options) {\n\t    this.triggerMethod('before:start', this, options);\n\t    this.triggerMethod('start', this, options);\n\t    return this;\n\t  }\n\n\t});\n\n\tvar ClassOptions$7 = ['appRoutes', 'controller'];\n\n\tvar AppRouter = Backbone.Router.extend({\n\n\t  constructor: function constructor(options) {\n\t    this._setOptions(options);\n\n\t    this.mergeOptions(options, ClassOptions$7);\n\n\t    Backbone.Router.apply(this, arguments);\n\n\t    var appRoutes = this.appRoutes;\n\t    var controller = this._getController();\n\t    this.processAppRoutes(controller, appRoutes);\n\t    this.on('route', this._processOnRoute, this);\n\t  },\n\n\t  // Similar to route method on a Backbone Router but\n\t  // method is called on the controller\n\t  appRoute: function appRoute(route, methodName) {\n\t    var controller = this._getController();\n\t    this._addAppRoute(controller, route, methodName);\n\t    return this;\n\t  },\n\n\t  // process the route event and trigger the onRoute\n\t  // method call, if it exists\n\t  _processOnRoute: function _processOnRoute(routeName, routeArgs) {\n\t    // make sure an onRoute before trying to call it\n\t    if (_.isFunction(this.onRoute)) {\n\t      // find the path that matches the current route\n\t      var routePath = _.invert(this.appRoutes)[routeName];\n\t      this.onRoute(routeName, routePath, routeArgs);\n\t    }\n\t  },\n\n\t  // Internal method to process the `appRoutes` for the\n\t  // router, and turn them in to routes that trigger the\n\t  // specified method on the specified `controller`.\n\t  processAppRoutes: function processAppRoutes(controller, appRoutes) {\n\t    var _this = this;\n\n\t    if (!appRoutes) {\n\t      return this;\n\t    }\n\n\t    var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n\n\t    _.each(routeNames, function (route) {\n\t      _this._addAppRoute(controller, route, appRoutes[route]);\n\t    });\n\n\t    return this;\n\t  },\n\n\t  _getController: function _getController() {\n\t    return this.controller;\n\t  },\n\n\t  _addAppRoute: function _addAppRoute(controller, route, methodName) {\n\t    var method = controller[methodName];\n\n\t    if (!method) {\n\t      throw new MarionetteError('Method \"' + methodName + '\" was not found on the controller');\n\t    }\n\n\t    this.route(route, methodName, _.bind(method, controller));\n\t  },\n\n\t  triggerMethod: triggerMethod\n\t});\n\n\t_.extend(AppRouter.prototype, CommonMixin);\n\n\t// Placeholder method to be extended by the user.\n\t// The method should define the object that stores the behaviors.\n\t// i.e.\n\t//\n\t// ```js\n\t// Marionette.Behaviors.behaviorsLookup: function() {\n\t//   return App.Behaviors\n\t// }\n\t// ```\n\tfunction behaviorsLookup() {\n\t  throw new MarionetteError({\n\t    message: 'You must define where your behaviors are stored.',\n\t    url: 'marionette.behaviors.md#behaviorslookup'\n\t  });\n\t}\n\n\t// Add Feature flags here\n\t// e.g. 'class' => false\n\tvar FEATURES = {};\n\n\tfunction isEnabled(name) {\n\t  return !!FEATURES[name];\n\t}\n\n\tfunction setEnabled(name, state) {\n\t  return FEATURES[name] = state;\n\t}\n\n\tvar previousMarionette = Backbone.Marionette;\n\tvar Marionette = Backbone.Marionette = {};\n\n\t// This allows you to run multiple instances of Marionette on the same\n\t// webapp. After loading the new version, call `noConflict()` to\n\t// get a reference to it. At the same time the old version will be\n\t// returned to Backbone.Marionette.\n\tMarionette.noConflict = function () {\n\t  Backbone.Marionette = previousMarionette;\n\t  return this;\n\t};\n\n\t// Utilities\n\tMarionette.bindEntityEvents = proxy(bindEntityEvents);\n\tMarionette.unbindEntityEvents = proxy(unbindEntityEvents);\n\tMarionette.bindRadioEvents = proxy(bindEntityEvents);\n\tMarionette.unbindRadioEvents = proxy(unbindEntityEvents);\n\tMarionette.bindRadioRequests = proxy(bindRadioRequests);\n\tMarionette.unbindRadioRequests = proxy(unbindRadioRequests);\n\tMarionette.mergeOptions = proxy(mergeOptions);\n\tMarionette.getOption = proxy(getOption);\n\tMarionette.normalizeMethods = proxy(normalizeMethods);\n\tMarionette.extend = extend;\n\tMarionette.isNodeAttached = isNodeAttached;\n\tMarionette.deprecate = deprecate;\n\tMarionette.triggerMethod = proxy(triggerMethod);\n\tMarionette.triggerMethodOn = triggerMethodOn;\n\tMarionette.isEnabled = isEnabled;\n\tMarionette.setEnabled = setEnabled;\n\tMarionette.monitorViewEvents = monitorViewEvents;\n\n\tMarionette.Behaviors = {};\n\tMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\n\n\t// Classes\n\tMarionette.Application = Application;\n\tMarionette.AppRouter = AppRouter;\n\tMarionette.Renderer = Renderer;\n\tMarionette.TemplateCache = TemplateCache;\n\tMarionette.View = View;\n\tMarionette.CollectionView = CollectionView;\n\tMarionette.CompositeView = CompositeView;\n\tMarionette.Behavior = Behavior;\n\tMarionette.Region = Region;\n\tMarionette.Error = MarionetteError;\n\tMarionette.Object = MarionetteObject;\n\n\t// Configuration\n\tMarionette.DEV_MODE = false;\n\tMarionette.FEATURES = FEATURES;\n\tMarionette.VERSION = version;\n\n\treturn Marionette;\n\n}));\n\n//# sourceMappingURL=backbone.marionette.js.map\n","// Trigger Method\n// --------------\n\nimport _         from 'underscore';\nimport getOption from './utils/getOption';\n\n// split the event name on the \":\"\nvar splitter = /(^|:)(\\w)/gi;\n\n// take the event section (\"section1:section2:section3\")\n// and turn it in to uppercase name onSection1Section2Section3\nfunction getEventName(match, prefix, eventName) {\n  return eventName.toUpperCase();\n}\n\n// Trigger an event and/or a corresponding method name. Examples:\n//\n// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n// call the \"onFoo\" method.\n//\n// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n// call the \"onFooBar\" method.\nexport function triggerMethod(event, ...args) {\n  // get the method name from the event name\n  var methodName = 'on' + event.replace(splitter, getEventName);\n  var method = getOption.call(this, methodName);\n  var result;\n\n  // call the onMethodName if it exists\n  if (_.isFunction(method)) {\n    // pass all args, except the event name\n    result = method.apply(this, args);\n  }\n\n  // trigger the event\n  this.trigger(event, ...args);\n\n  return result;\n}\n\n// triggerMethodOn invokes triggerMethod on a specific context\n//\n// e.g. `Marionette.triggerMethodOn(view, 'show')`\n// will trigger a \"show\" event or invoke onShow the view.\nexport function triggerMethodOn(context, ...args) {\n  var fnc = _.isFunction(context.triggerMethod) ? context.triggerMethod : triggerMethod;\n  return fnc.apply(context, args);\n}\n","// DOM Refresh\n// -----------\n\nimport { triggerMethodOn } from './trigger-method';\nimport _ from 'underscore';\n\n// Trigger method on children unless a pure Backbone.View\nfunction triggerMethodChildren(view, event, shouldTrigger) {\n  if (!view._getImmediateChildren) { return; }\n  _.each(view._getImmediateChildren(), child => {\n    if (!shouldTrigger(child)) { return; }\n    triggerMethodOn(child, event, child);\n  });\n}\n\nfunction shouldTriggerAttach(view) {\n  return !view._isAttached;\n}\n\nfunction shouldAttach(view) {\n  if (!shouldTriggerAttach(view)) { return false; }\n  view._isAttached = true;\n  return true;\n}\n\nfunction shouldTriggerDetach(view) {\n  return view._isAttached;\n}\n\nfunction shouldDetach(view) {\n  if (!shouldTriggerDetach(view)) { return false; }\n  view._isAttached = false;\n  return true;\n}\n\n// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n// whenever a rendered view is attached or an attached view is rendered.\nfunction monitorViewEvents(view) {\n  if (view._areViewEventsMonitored) { return; }\n\n  view._areViewEventsMonitored = true;\n\n  function handleBeforeAttach() {\n    triggerMethodChildren(view, 'before:attach', shouldTriggerAttach);\n  }\n\n  function handleAttach() {\n    triggerMethodChildren(view, 'attach', shouldAttach);\n    triggerDOMRefresh();\n  }\n\n  function handleBeforeDetach() {\n    triggerMethodChildren(view, 'before:detach', shouldTriggerDetach);\n  }\n\n  function handleDetach() {\n    triggerMethodChildren(view, 'detach', shouldDetach);\n  }\n\n  function handleRender() {\n    triggerDOMRefresh();\n  }\n\n  function triggerDOMRefresh() {\n    if (view._isAttached && view._isRendered) {\n      triggerMethodOn(view, 'dom:refresh', view);\n    }\n  }\n\n  view.on({\n    'before:attach': handleBeforeAttach,\n    'attach': handleAttach,\n    'before:detach': handleBeforeDetach,\n    'detach': handleDetach,\n    'render': handleRender\n  });\n}\n\nexport default monitorViewEvents;\n","// Bind Entity Events & Unbind Entity Events\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone \"entity\" (e.g. collection/model)\n// to methods on a target object.\n//\n// The first parameter, `target`, must have the Backbone.Events module mixed in.\n//\n// The second parameter is the `entity` (Backbone.Model, Backbone.Collection or\n// any object that has Backbone.Events mixed in) to bind the events from.\n//\n// The third parameter is a hash of { \"event:name\": \"eventHandler\" }\n// configuration. Multiple handlers can be separated by a space. A\n// function can be supplied instead of a string handler name.\n\nimport _               from 'underscore';\nimport MarionetteError from './error';\n\n// Bind/unbind the event to handlers specified as a string of\n// handler names on the target object\nfunction bindFromStrings(target, entity, evt, methods, actionName) {\n  var methodNames = methods.split(/\\s+/);\n\n  _.each(methodNames, function(methodName) {\n    var method = target[methodName];\n    if (!method) {\n      throw new MarionetteError(`Method \"${methodName}\" was configured as an event handler, but does not exist.`);\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\n// generic looping function\nfunction iterateEvents(target, entity, bindings, actionName) {\n  if (!entity || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindentityevents'\n    });\n  }\n\n  // iterate the bindings and bind/unbind them\n  _.each(bindings, function(method, evt) {\n\n    // allow for a list of method names as a string\n    if (_.isString(method)) {\n      bindFromStrings(target, entity, evt, method, actionName);\n      return;\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\nfunction bindEntityEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'listenTo');\n  return this;\n}\n\nfunction unbindEntityEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'stopListening');\n  return this;\n}\n\n// Export Public API\nexport {\n  bindEntityEvents,\n  unbindEntityEvents\n};\n","// Bind/Unbind Radio Requests\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone.radio request\n// to methods on a target object.\n//\n// The first parameter, `target`, will set the context of the reply method\n//\n// The second parameter is the `Radio.channel` to bind the reply to.\n//\n// The third parameter is a hash of { \"request:name\": \"replyHandler\" }\n// configuration. A function can be supplied instead of a string handler name.\n\nimport _ from 'underscore';\nimport normalizeMethods from './utils/normalizeMethods';\nimport MarionetteError from './error';\n\nfunction iterateReplies(target, channel, bindings, actionName) {\n  if (!channel || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindradiorequests'\n    });\n  }\n\n  var normalizedRadioRequests = normalizeMethods.call(target, bindings);\n\n  channel[actionName](normalizedRadioRequests, target);\n}\n\nfunction bindRadioRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'reply');\n  return this;\n}\n\nfunction unbindRadioRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'stopReplying');\n  return this;\n}\n\nexport {\n  bindRadioRequests,\n  unbindRadioRequests\n};\n","import _                        from 'underscore';\nimport _invoke                  from '../utils/_invoke';\nimport { triggerMethod }        from '../trigger-method';\nimport Marionette               from '../backbone.marionette';\n\n// MixinOptions\n// - behaviors\n\n// Takes care of getting the behavior class\n// given options and a key.\n// If a user passes in options.behaviorClass\n// default to using that.\n// If a user passes in a Behavior Class directly, use that\n// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\nfunction getBehaviorClass(options, key) {\n  if (options.behaviorClass) {\n    return options.behaviorClass;\n    //treat functions as a Behavior constructor\n  } else if (_.isFunction(options)) {\n    return options;\n  }\n\n  // behaviorsLookup can be either a flat object or a method\n  if (_.isFunction(Marionette.Behaviors.behaviorsLookup)) {\n    return Marionette.Behaviors.behaviorsLookup(options, key)[key];\n  }\n\n  return Marionette.Behaviors.behaviorsLookup[key];\n}\n\n// Iterate over the behaviors object, for each behavior\n// instantiate it and get its grouped behaviors.\n// This accepts a list of behaviors in either an object or array form\nfunction parseBehaviors(view, behaviors) {\n  return _.chain(behaviors).map(function(options, key) {\n    var BehaviorClass = getBehaviorClass(options, key);\n    //if we're passed a class directly instead of an object\n    var _options = options === BehaviorClass ? {} : options;\n    var behavior = new BehaviorClass(_options, view);\n    var nestedBehaviors = parseBehaviors(view, _.result(behavior, 'behaviors'));\n\n    return [behavior].concat(nestedBehaviors);\n  }).flatten().value();\n}\n\nexport default {\n  _initBehaviors: function() {\n    var behaviors = _.result(this, 'behaviors');\n\n    // Behaviors defined on a view can be a flat object literal\n    // or it can be a function that returns an object.\n    this._behaviors = _.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\n  },\n\n  _getBehaviorTriggers: function() {\n    var triggers = _invoke(this._behaviors, 'getTriggers');\n    return _.extend({}, ...triggers);\n  },\n\n  _getBehaviorEvents: function() {\n    var events = _invoke(this._behaviors, 'getEvents');\n    return _.extend({}, ...events);\n  },\n\n  // proxy behavior $el to the view's $el.\n  _proxyBehaviorViewProperties: function() {\n    _invoke(this._behaviors, 'proxyViewProperties');\n  },\n\n  // delegate modelEvents and collectionEvents\n  _delegateBehaviorEntityEvents: function() {\n    _invoke(this._behaviors, 'delegateEntityEvents');\n  },\n\n  // undelegate modelEvents and collectionEvents\n  _undelegateBehaviorEntityEvents: function() {\n    _invoke(this._behaviors, 'undelegateEntityEvents');\n  },\n\n  _destroyBehaviors: function(args) {\n    // Call destroy on each behavior after\n    // destroying the view.\n    // This unbinds event listeners\n    // that behaviors have registered for.\n    _invoke(this._behaviors, 'destroy', ...args);\n  },\n\n  _bindBehaviorUIElements: function() {\n    _invoke(this._behaviors, 'bindUIElements');\n  },\n\n  _unbindBehaviorUIElements: function() {\n    _invoke(this._behaviors, 'unbindUIElements');\n  },\n\n  _triggerEventOnBehaviors: function(...args) {\n    var behaviors = this._behaviors;\n    // Use good ol' for as this is a very hot function\n    for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {\n      triggerMethod.apply(behaviors[i], args);\n    }\n  }\n};\n","import _ from 'underscore';\n\n// Borrow event splitter from Backbone\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nfunction uniqueName(eventName, selector) {\n  return [eventName + _.uniqueId('.evt'), selector].join(' ');\n}\n\n// Set event name to be namespaced using a unique index\n// to generate a non colliding event namespace\n// http://api.jquery.com/event.namespace/\nvar getUniqueEventName = function(eventName) {\n  var match = eventName.match(delegateEventSplitter);\n  return uniqueName(match[1], match[2]);\n};\n\nexport default getUniqueEventName;\n","import _ from 'underscore';\nimport getUniqueEventName from '../utils/getUniqueEventName';\n\n// Internal method to create an event handler for a given `triggerDef` like\n// 'click:foo'\nfunction buildViewTrigger(view, triggerDef) {\n  if (_.isString(triggerDef)) {\n    triggerDef = {event: triggerDef};\n  }\n\n  const eventName = triggerDef.event;\n  const shouldPreventDefault = triggerDef.preventDefault !== false;\n  const shouldStopPropagation = triggerDef.stopPropagation !== false;\n\n  return function(e) {\n    if (shouldPreventDefault) {\n      e.preventDefault();\n    }\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n\n    view.triggerMethod(eventName, view);\n  };\n}\n\nexport default {\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  _getViewTriggers: function(view, triggers) {\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return _.reduce(triggers, (events, value, key) => {\n      key = getUniqueEventName(key);\n      events[key] = buildViewTrigger(view, value);\n      return events;\n    }, {});\n  }\n\n};\n","import { triggerMethodOn } from '../trigger-method';\n\nexport default function destroyBackboneView(view) {\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'before:destroy', view);\n  }\n\n  const shouldTriggerDetach = !!view._isAttached;\n\n  if (shouldTriggerDetach) {\n    triggerMethodOn(view, 'before:detach', view);\n  }\n\n  view.remove();\n\n  if (shouldTriggerDetach) {\n    view._isAttached = false;\n    triggerMethodOn(view, 'detach', view);\n  }\n\n  view._isDestroyed = true;\n\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'destroy', view);\n  }\n}\n","import MarionetteError          from '../error';\n\n// Placeholder method to be extended by the user.\n// The method should define the object that stores the behaviors.\n// i.e.\n//\n// ```js\n// Marionette.Behaviors.behaviorsLookup: function() {\n//   return App.Behaviors\n// }\n// ```\nexport default function behaviorsLookup() {\n  throw new MarionetteError({\n    message: 'You must define where your behaviors are stored.',\n    url: 'marionette.behaviors.md#behaviorslookup'\n  });\n}\n","// Add Feature flags here\n// e.g. 'class' => false\nvar FEATURES = {\n};\n\nfunction isEnabled(name) {\n  return !!FEATURES[name];\n}\n\nfunction setEnabled(name, state) {\n  return FEATURES[name] = state;\n}\n\nexport {\n  FEATURES,\n  setEnabled,\n  isEnabled\n};\n","//Internal utility for creating context style global utils\nvar proxy = function(method) {\n  return function(context, ...args) {\n    return method.apply(context, args);\n  };\n};\n\nexport default proxy;\n","// Marionette.extend\n// -----------------\n\nimport Backbone from 'backbone';\n\n// Borrow the Backbone `extend` method so we can use it as needed\nvar extend = Backbone.Model.extend;\n\nexport default extend;\n","// Marionette.isNodeAttached\n// -------------------------\n\nimport Backbone from 'backbone';\n\n// Determine if `el` is a child of the document\nvar isNodeAttached = function(el) {\n  return Backbone.$.contains(document.documentElement, el);\n};\n\nexport default isNodeAttached;\n","import _ from 'underscore';\n\n// Merge `keys` from `options` onto `this`\nvar mergeOptions = function(options, keys) {\n  if (!options) { return; }\n  _.extend(this, _.pick(options, keys));\n};\n\nexport default mergeOptions;\n","// Marionette.getOption\n// --------------------\n\n// Retrieve an object, function or other value from the\n// object or its `options`, with `options` taking precedence.\nvar getOption = function(optionName) {\n  if (!optionName) { return; }\n  if (this.options && (this.options[optionName] !== undefined)) {\n    return this.options[optionName];\n  } else {\n    return this[optionName];\n  }\n};\n\nexport default getOption;\n","import _ from 'underscore';\n\n// Marionette.normalizeMethods\n// ----------------------\n\n// Pass in a mapping of events => functions or function names\n// and return a mapping of events => functions\nvar normalizeMethods = function(hash) {\n  return _.reduce(hash, (normalizedHash, method, name) => {\n    if (!_.isFunction(method)) {\n      method = this[method];\n    }\n    if (method) {\n      normalizedHash[name] = method;\n    }\n    return normalizedHash;\n  }, {});\n};\n\nexport default normalizeMethods;\n","/* global console */\n\nimport _ from 'underscore';\n\nimport Marionette from '../backbone.marionette';\n\nvar deprecate = function(message, test) {\n  if (_.isObject(message)) {\n    message = (\n      message.prev + ' is going to be removed in the future. ' +\n      'Please use ' + message.next + ' instead.' +\n      (message.url ? ' See: ' + message.url : '')\n    );\n  }\n\n  if (!Marionette.DEV_MODE) {\n    return;\n  }\n\n  if ((test === undefined || !test) && !deprecate._cache[message]) {\n    deprecate._warn('Deprecation warning: ' + message);\n    deprecate._cache[message] = true;\n  }\n};\n\ndeprecate._console = typeof console !== 'undefined' ? console : {};\ndeprecate._warn = function() {\n  var warn = deprecate._console.warn || deprecate._console.log || function() {};\n  return warn.apply(deprecate._console, arguments);\n};\ndeprecate._cache = {};\n\nexport default deprecate;\n","import _ from 'underscore';\n\n// Internal utility for setting options consistently across Mn\nvar _setOptions = function(...args) {\n  this.options = _.extend({}, _.result(this, 'options'), ...args);\n};\n\nexport default _setOptions;\n","// Error\n// -----\n\nimport _      from 'underscore';\nimport extend from './utils/extend';\nimport {version} from '../package.json';\n\nvar errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\nvar MarionetteError = extend.call(Error, {\n  urlRoot: 'http://marionettejs.com/docs/v' + version + '/',\n\n  constructor: function MarionetteError(message, options) {\n    if (_.isObject(message)) {\n      options = message;\n      message = options.message;\n    } else if (!options) {\n      options = {};\n    }\n\n    var error = Error.call(this, message);\n    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n    this.captureStackTrace();\n\n    if (options.url) {\n      this.url = this.urlRoot + options.url;\n    }\n  },\n\n  captureStackTrace: function() {\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, MarionetteError);\n    }\n  },\n\n  toString: function() {\n    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n  }\n});\n\nMarionetteError.extend = extend;\n\nexport default MarionetteError;\n","import getOption                from '../utils/getOption';\nimport mergeOptions             from '../utils/mergeOptions';\nimport normalizeMethods         from '../utils/normalizeMethods';\nimport _setOptions              from '../utils/_setOptions';\nimport {\n  bindEntityEvents,\n  unbindEntityEvents\n}                               from '../bind-entity-events';\n\nexport default {\n\n  // Imports the \"normalizeMethods\" to transform hashes of\n  // events=>function references/names to a hash of events=>function references\n  normalizeMethods: normalizeMethods,\n\n  _setOptions: _setOptions,\n\n  // A handy way to merge passed-in options onto the instance\n  mergeOptions: mergeOptions,\n\n  // Enable getting options from this or this.options by name.\n  getOption: getOption,\n\n  // Enable binding view's events from another entity.\n  bindEntityEvents: bindEntityEvents,\n\n  // Enable unbinding view's events from another entity.\n  unbindEntityEvents: unbindEntityEvents\n};\n","// Backbone.Radio v2.0.0-pre.1\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('underscore'), require('backbone')) :\n  typeof define === 'function' && define.amd ? define(['underscore', 'backbone'], factory) :\n  (global.Backbone = global.Backbone || {}, global.Backbone.Radio = factory(global._,global.Backbone));\n}(this, function (_,Backbone) { 'use strict';\n\n  _ = 'default' in _ ? _['default'] : _;\n  Backbone = 'default' in Backbone ? Backbone['default'] : Backbone;\n\n  var babelHelpers = {};\n  babelHelpers.typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n  };\n  babelHelpers;\n\n  var previousRadio = Backbone.Radio;\n\n  var Radio = Backbone.Radio = {};\n\n  Radio.VERSION = '2.0.0-pre.1';\n\n  // This allows you to run multiple instances of Radio on the same\n  // webapp. After loading the new version, call `noConflict()` to\n  // get a reference to it. At the same time the old version will be\n  // returned to Backbone.Radio.\n  Radio.noConflict = function () {\n    Backbone.Radio = previousRadio;\n    return this;\n  };\n\n  // Whether or not we're in DEBUG mode or not. DEBUG mode helps you\n  // get around the issues of lack of warnings when events are mis-typed.\n  Radio.DEBUG = false;\n\n  // Format debug text.\n  Radio._debugText = function (warning, eventName, channelName) {\n    return warning + (channelName ? ' on the ' + channelName + ' channel' : '') + ': \"' + eventName + '\"';\n  };\n\n  // This is the method that's called when an unregistered event was called.\n  // By default, it logs warning to the console. By overriding this you could\n  // make it throw an Error, for instance. This would make firing a nonexistent event\n  // have the same consequence as firing a nonexistent method on an Object.\n  Radio.debugLog = function (warning, eventName, channelName) {\n    if (Radio.DEBUG && console && console.warn) {\n      console.warn(Radio._debugText(warning, eventName, channelName));\n    }\n  };\n\n  var eventSplitter = /\\s+/;\n\n  // An internal method used to handle Radio's method overloading for Requests.\n  // It's borrowed from Backbone.Events. It differs from Backbone's overload\n  // API (which is used in Backbone.Events) in that it doesn't support space-separated\n  // event names.\n  Radio._eventsApi = function (obj, action, name, rest) {\n    if (!name) {\n      return false;\n    }\n\n    var results = {};\n\n    // Handle event maps.\n    if ((typeof name === 'undefined' ? 'undefined' : babelHelpers.typeof(name)) === 'object') {\n      for (var key in name) {\n        var result = obj[action].apply(obj, [key, name[key]].concat(rest));\n        eventSplitter.test(key) ? _.extend(results, result) : results[key] = result;\n      }\n      return results;\n    }\n\n    // Handle space separated event names.\n    if (eventSplitter.test(name)) {\n      var names = name.split(eventSplitter);\n      for (var i = 0, l = names.length; i < l; i++) {\n        results[names[i]] = obj[action].apply(obj, [names[i]].concat(rest));\n      }\n      return results;\n    }\n\n    return false;\n  };\n\n  // An optimized way to execute callbacks.\n  Radio._callHandler = function (callback, context, args) {\n    var a1 = args[0],\n        a2 = args[1],\n        a3 = args[2];\n    switch (args.length) {\n      case 0:\n        return callback.call(context);\n      case 1:\n        return callback.call(context, a1);\n      case 2:\n        return callback.call(context, a1, a2);\n      case 3:\n        return callback.call(context, a1, a2, a3);\n      default:\n        return callback.apply(context, args);\n    }\n  };\n\n  // A helper used by `off` methods to the handler from the store\n  function removeHandler(store, name, callback, context) {\n    var event = store[name];\n    if ((!callback || callback === event.callback || callback === event.callback._callback) && (!context || context === event.context)) {\n      delete store[name];\n      return true;\n    }\n  }\n\n  function removeHandlers(store, name, callback, context) {\n    store || (store = {});\n    var names = name ? [name] : _.keys(store);\n    var matched = false;\n\n    for (var i = 0, length = names.length; i < length; i++) {\n      name = names[i];\n\n      // If there's no event by this name, log it and continue\n      // with the loop\n      if (!store[name]) {\n        continue;\n      }\n\n      if (removeHandler(store, name, callback, context)) {\n        matched = true;\n      }\n    }\n\n    return matched;\n  }\n\n  /*\n   * tune-in\n   * -------\n   * Get console logs of a channel's activity\n   *\n   */\n\n  var _logs = {};\n\n  // This is to produce an identical function in both tuneIn and tuneOut,\n  // so that Backbone.Events unregisters it.\n  function _partial(channelName) {\n    return _logs[channelName] || (_logs[channelName] = _.partial(Radio.log, channelName));\n  }\n\n  _.extend(Radio, {\n\n    // Log information about the channel and event\n    log: function log(channelName, eventName) {\n      if (typeof console === 'undefined') {\n        return;\n      }\n      var args = _.drop(arguments, 2);\n      console.log('[' + channelName + '] \"' + eventName + '\"', args);\n    },\n\n    // Logs all events on this channel to the console. It sets an\n    // internal value on the channel telling it we're listening,\n    // then sets a listener on the Backbone.Events\n    tuneIn: function tuneIn(channelName) {\n      var channel = Radio.channel(channelName);\n      channel._tunedIn = true;\n      channel.on('all', _partial(channelName));\n      return this;\n    },\n\n    // Stop logging all of the activities on this channel to the console\n    tuneOut: function tuneOut(channelName) {\n      var channel = Radio.channel(channelName);\n      channel._tunedIn = false;\n      channel.off('all', _partial(channelName));\n      delete _logs[channelName];\n      return this;\n    }\n  });\n\n  /*\n   * Backbone.Radio.Requests\n   * -----------------------\n   * A messaging system for requesting data.\n   *\n   */\n\n  function makeCallback(callback) {\n    return _.isFunction(callback) ? callback : function () {\n      return callback;\n    };\n  }\n\n  Radio.Requests = {\n\n    // Make a request\n    request: function request(name) {\n      var args = _.rest(arguments);\n      var results = Radio._eventsApi(this, 'request', name, args);\n      if (results) {\n        return results;\n      }\n      var channelName = this.channelName;\n      var requests = this._requests;\n\n      // Check if we should log the request, and if so, do it\n      if (channelName && this._tunedIn) {\n        Radio.log.apply(this, [channelName, name].concat(args));\n      }\n\n      // If the request isn't handled, log it in DEBUG mode and exit\n      if (requests && (requests[name] || requests['default'])) {\n        var handler = requests[name] || requests['default'];\n        args = requests[name] ? args : arguments;\n        return Radio._callHandler(handler.callback, handler.context, args);\n      } else {\n        Radio.debugLog('An unhandled request was fired', name, channelName);\n      }\n    },\n\n    // Set up a handler for a request\n    reply: function reply(name, callback, context) {\n      if (Radio._eventsApi(this, 'reply', name, [callback, context])) {\n        return this;\n      }\n\n      this._requests || (this._requests = {});\n\n      if (this._requests[name]) {\n        Radio.debugLog('A request was overwritten', name, this.channelName);\n      }\n\n      this._requests[name] = {\n        callback: makeCallback(callback),\n        context: context || this\n      };\n\n      return this;\n    },\n\n    // Set up a handler that can only be requested once\n    replyOnce: function replyOnce(name, callback, context) {\n      if (Radio._eventsApi(this, 'replyOnce', name, [callback, context])) {\n        return this;\n      }\n\n      var self = this;\n\n      var once = _.once(function () {\n        self.stopReplying(name);\n        return makeCallback(callback).apply(this, arguments);\n      });\n\n      return this.reply(name, once, context);\n    },\n\n    // Remove handler(s)\n    stopReplying: function stopReplying(name, callback, context) {\n      if (Radio._eventsApi(this, 'stopReplying', name)) {\n        return this;\n      }\n\n      // Remove everything if there are no arguments passed\n      if (!name && !callback && !context) {\n        delete this._requests;\n      } else if (!removeHandlers(this._requests, name, callback, context)) {\n        Radio.debugLog('Attempted to remove the unregistered request', name, this.channelName);\n      }\n\n      return this;\n    }\n  };\n\n  /*\n   * Backbone.Radio.channel\n   * ----------------------\n   * Get a reference to a channel by name.\n   *\n   */\n\n  Radio._channels = {};\n\n  Radio.channel = function (channelName) {\n    if (!channelName) {\n      throw new Error('You must provide a name for the channel.');\n    }\n\n    if (Radio._channels[channelName]) {\n      return Radio._channels[channelName];\n    } else {\n      return Radio._channels[channelName] = new Radio.Channel(channelName);\n    }\n  };\n\n  /*\n   * Backbone.Radio.Channel\n   * ----------------------\n   * A Channel is an object that extends from Backbone.Events,\n   * and Radio.Requests.\n   *\n   */\n\n  Radio.Channel = function (channelName) {\n    this.channelName = channelName;\n  };\n\n  _.extend(Radio.Channel.prototype, Backbone.Events, Radio.Requests, {\n\n    // Remove all handlers from the messaging systems of this channel\n    reset: function reset() {\n      this.off();\n      this.stopListening();\n      this.stopReplying();\n      return this;\n    }\n  });\n\n  /*\n   * Top-level API\n   * -------------\n   * Supplies the 'top-level API' for working with Channels directly\n   * from Backbone.Radio.\n   *\n   */\n\n  var channel;\n  var args;\n  var systems = [Backbone.Events, Radio.Requests];\n  _.each(systems, function (system) {\n    _.each(system, function (method, methodName) {\n      Radio[methodName] = function (channelName) {\n        args = _.rest(arguments);\n        channel = this.channel(channelName);\n        return channel[methodName].apply(channel, args);\n      };\n    });\n  });\n\n  Radio.reset = function (channelName) {\n    var channels = !channelName ? this._channels : [this._channels[channelName]];\n    _.invoke(channels, 'reset');\n  };\n\n  return Radio;\n\n}));\n//# sourceMappingURL=./backbone.radio.js.map","import _ from 'underscore';\nimport Radio from 'backbone.radio';\n\nimport {\n  bindRadioRequests,\n  unbindRadioRequests\n} from '../bind-radio-requests';\n\nimport {\n  bindEntityEvents as bindRadioEvents,\n  unbindEntityEvents as unbindRadioEvents\n} from '../bind-entity-events';\n\n// MixinOptions\n// - channelName\n// - radioEvents\n// - radioRequests\n\nexport default {\n\n  _initRadio: function() {\n    var channelName = _.result(this, 'channelName');\n\n    if (!channelName) {\n      return;\n    }\n\n    var channel = this._channel = Radio.channel(channelName);\n\n    var radioEvents = _.result(this, 'radioEvents');\n    this.bindRadioEvents(channel, radioEvents);\n\n    var radioRequests = _.result(this, 'radioRequests');\n    this.bindRadioRequests(channel, radioRequests);\n\n    this.on('destroy', this._destroyRadio);\n  },\n\n  _destroyRadio: function() {\n    this._channel.stopReplying(null, null, this);\n  },\n\n  getChannel: function() {\n    return this._channel;\n  },\n\n  // Proxy `bindRadioEvents`\n  bindRadioEvents: bindRadioEvents,\n\n  // Proxy `unbindRadioEvents`\n  unbindRadioEvents: unbindRadioEvents,\n\n  // Proxy `bindRadioRequests`\n  bindRadioRequests: bindRadioRequests,\n\n  // Proxy `unbindRadioRequests`\n  unbindRadioRequests: unbindRadioRequests\n\n};\n","// Object\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport extend from './utils/extend';\nimport CommonMixin from './mixins/common';\nimport RadioMixin from './mixins/radio';\nimport { triggerMethod } from './trigger-method';\n\nconst ClassOptions = [\n  'channelName',\n  'radioEvents',\n  'radioRequests'\n];\n\n// A Base Class that other Classes should descend from.\n// Object borrows many conventions and utilities from Backbone.\nvar MarionetteObject = function(options) {\n  this._setOptions(options);\n  this.mergeOptions(options, ClassOptions);\n  this.cid = _.uniqueId(this.cidPrefix);\n  this._initRadio();\n  this.initialize.apply(this, arguments);\n};\n\nMarionetteObject.extend = extend;\n\n// Object Methods\n// --------------\n\n// Ensure it can trigger events with Backbone.Events\n_.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\n  cidPrefix: 'mno',\n\n  // for parity with Marionette.AbstractView lifecyle\n  _isDestroyed: false,\n\n  isDestroyed: function() {\n    return this._isDestroyed;\n  },\n\n  //this is a noop method intended to be overridden by classes that extend from this base\n  initialize: function() {},\n\n  destroy: function(...args) {\n    if (this._isDestroyed) { return this; }\n\n    this.triggerMethod('before:destroy', this, ...args);\n\n    this._isDestroyed = true;\n    this.triggerMethod('destroy', this, ...args);\n    this.stopListening();\n\n    return this;\n  },\n\n  triggerMethod: triggerMethod\n});\n\nexport default MarionetteObject;\n","// Template Cache\n// --------------\n\nimport _               from 'underscore';\nimport Backbone        from 'backbone';\nimport MarionetteError from './error';\n\n// Manage templates stored in `<script>` blocks,\n// caching them for faster access.\nvar TemplateCache = function(templateId) {\n  this.templateId = templateId;\n};\n\n// TemplateCache object-level methods. Manage the template\n// caches from these method calls instead of creating\n// your own TemplateCache instances\n_.extend(TemplateCache, {\n  templateCaches: {},\n\n  // Get the specified template by id. Either\n  // retrieves the cached version, or loads it\n  // from the DOM.\n  get: function(templateId, options) {\n    var cachedTemplate = this.templateCaches[templateId];\n\n    if (!cachedTemplate) {\n      cachedTemplate = new TemplateCache(templateId);\n      this.templateCaches[templateId] = cachedTemplate;\n    }\n\n    return cachedTemplate.load(options);\n  },\n\n  // Clear templates from the cache. If no arguments\n  // are specified, clears all templates:\n  // `clear()`\n  //\n  // If arguments are specified, clears each of the\n  // specified templates from the cache:\n  // `clear(\"#t1\", \"#t2\", \"...\")`\n  clear: function(...args) {\n    var i;\n    var length = args.length;\n\n    if (length > 0) {\n      for (i = 0; i < length; i++) {\n        delete this.templateCaches[args[i]];\n      }\n    } else {\n      this.templateCaches = {};\n    }\n  }\n});\n\n// TemplateCache instance methods, allowing each\n// template cache object to manage its own state\n// and know whether or not it has been loaded\n_.extend(TemplateCache.prototype, {\n\n  // Internal method to load the template\n  load: function(options) {\n    // Guard clause to prevent loading this template more than once\n    if (this.compiledTemplate) {\n      return this.compiledTemplate;\n    }\n\n    // Load the template and compile it\n    var template = this.loadTemplate(this.templateId, options);\n    this.compiledTemplate = this.compileTemplate(template, options);\n\n    return this.compiledTemplate;\n  },\n\n  // Load a template from the DOM, by default. Override\n  // this method to provide your own template retrieval\n  // For asynchronous loading with AMD/RequireJS, consider\n  // using a template-loader plugin as described here:\n  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n  loadTemplate: function(templateId, options) {\n    var $template = Backbone.$(templateId);\n\n    if (!$template.length) {\n      throw new MarionetteError({\n        name: 'NoTemplateError',\n        message: 'Could not find template: \"' + templateId + '\"'\n      });\n    }\n    return $template.html();\n  },\n\n  // Pre-compile the template before caching it. Override\n  // this method if you do not need to pre-compile a template\n  // (JST / RequireJS for example) or if you want to change\n  // the template engine used (Handebars, etc).\n  compileTemplate: function(rawTemplate, options) {\n    return _.template(rawTemplate, options);\n  }\n});\n\nexport default TemplateCache;\n","// Renderer\n// --------\n\nimport _               from 'underscore';\nimport MarionetteError from './error';\nimport TemplateCache   from './template-cache';\n\n// Render a template with data by passing in the template\n// selector and the data to render.\nvar Renderer = {\n\n  // Render a template with data. The `template` parameter is\n  // passed to the `TemplateCache` object to retrieve the\n  // template function. Override this method to provide your own\n  // custom rendering and template handling for all of Marionette.\n  render: function(template, data) {\n    if (!template) {\n      throw new MarionetteError({\n        name: 'TemplateNotFoundError',\n        message: 'Cannot render the template since its false, null or undefined.'\n      });\n    }\n\n    var templateFunc = _.isFunction(template) ? template : TemplateCache.get(template);\n\n    return templateFunc(data);\n  }\n};\n\nexport default Renderer;\n","// Implementation of the invoke method (http://underscorejs.org/#invoke) with support for\n// lodash v3, v4, and underscore.js\nimport _ from 'underscore';\n\nexport default _.invokeMap || _.invoke;\n","import _ from 'underscore';\n\nimport {\n  bindEntityEvents,\n  unbindEntityEvents\n} from '../bind-entity-events';\n\n// MixinOptions\n// - collectionEvents\n// - modelEvents\n\nexport default {\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  _delegateEntityEvents: function(model, collection) {\n    this._undelegateEntityEvents(model, collection);\n\n    var modelEvents = _.result(this, 'modelEvents');\n    bindEntityEvents.call(this, model, modelEvents);\n\n    var collectionEvents = _.result(this, 'collectionEvents');\n    bindEntityEvents.call(this, collection, collectionEvents);\n  },\n\n  _undelegateEntityEvents: function(model, collection) {\n    var modelEvents = _.result(this, 'modelEvents');\n    unbindEntityEvents.call(this, model, modelEvents);\n\n    var collectionEvents = _.result(this, 'collectionEvents');\n    unbindEntityEvents.call(this, collection, collectionEvents);\n  }\n};\n","import _ from 'underscore';\n// allows for the use of the @ui. syntax within\n// a given key for triggers and events\n// swaps the @ui with the associated selector.\n// Returns a new, non-mutated, parsed events hash.\nvar normalizeUIKeys = function(hash, ui) {\n  return _.reduce(hash, function(memo, val, key) {\n    var normalizedKey = normalizeUIString(key, ui);\n    memo[normalizedKey] = val;\n    return memo;\n  }, {});\n};\n\n// utility method for parsing @ui. syntax strings\n// into associated selector\nvar normalizeUIString = function(uiString, ui) {\n  return uiString.replace(/@ui\\.[a-zA-Z_$0-9]*/g, function(r) {\n    return ui[r.slice(4)];\n  });\n};\n\n// allows for the use of the @ui. syntax within\n// a given value for regions\n// swaps the @ui with the associated selector\nvar normalizeUIValues = function(hash, ui, properties) {\n  _.each(hash, function(val, key) {\n    if (_.isString(val)) {\n      hash[key] = normalizeUIString(val, ui);\n    } else if (_.isObject(val) && _.isArray(properties)) {\n      _.extend(val, normalizeUIValues(_.pick(val, properties), ui));\n      /* Value is an object, and we got an array of embedded property names to normalize. */\n      _.each(properties, function(property) {\n        var propertyVal = val[property];\n        if (_.isString(propertyVal)) {\n          val[property] = normalizeUIString(propertyVal, ui);\n        }\n      });\n    }\n  });\n  return hash;\n};\n\nexport default {\n\n  // normalize the keys of passed hash with the views `ui` selectors.\n  // `{\"@ui.foo\": \"bar\"}`\n  normalizeUIKeys: function(hash) {\n    var uiBindings = this._getUIBindings();\n    return normalizeUIKeys(hash, uiBindings);\n  },\n\n  // normalize the values of passed hash with the views `ui` selectors.\n  // `{foo: \"@ui.bar\"}`\n  normalizeUIValues: function(hash, properties) {\n    var uiBindings = this._getUIBindings();\n    return normalizeUIValues(hash, uiBindings, properties);\n  },\n\n  _getUIBindings: function() {\n    var uiBindings = _.result(this, '_uiBindings');\n    var ui = _.result(this, 'ui');\n    return uiBindings || ui;\n  },\n\n  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n  // the associated jQuery selectors.\n  _bindUIElements: function() {\n    if (!this.ui) { return; }\n\n    // store the ui hash in _uiBindings so they can be reset later\n    // and so re-rendering the view will be able to find the bindings\n    if (!this._uiBindings) {\n      this._uiBindings = this.ui;\n    }\n\n    // get the bindings result, as a function or otherwise\n    var bindings = _.result(this, '_uiBindings');\n\n    // empty the ui so we don't have anything to start with\n    this._ui = {};\n\n    // bind each of the selectors\n    _.each(bindings, (selector, key) => {\n      this._ui[key] = this.$(selector);\n    });\n\n    this.ui = this._ui;\n  },\n\n  _unbindUIElements: function() {\n    if (!this.ui || !this._uiBindings) { return; }\n\n    // delete all of the existing ui bindings\n    _.each(this.ui, ($el, name) => {\n      delete this.ui[name];\n    });\n\n    // reset the ui element to the original bindings configuration\n    this.ui = this._uiBindings;\n    delete this._uiBindings;\n    delete this._ui;\n  },\n\n  _getUI: function(name) {\n    return this._ui[name];\n  }\n};\n","// ViewMixin\n//  ---------\n\nimport Backbone from 'backbone';\nimport _ from 'underscore';\nimport isNodeAttached from '../utils/isNodeAttached';\nimport MarionetteError from '../error';\nimport BehaviorsMixin from './behaviors';\nimport CommonMixin from './common';\nimport DelegateEntityEventsMixin from './delegate-entity-events';\nimport TriggersMixin from './triggers';\nimport UIMixin from './ui';\nimport View from '../view';\nimport { triggerMethod } from '../trigger-method';\n\n// MixinOptions\n// - behaviors\n// - childViewEventPrefix\n// - childViewEvents\n// - childViewTriggers\n// - collectionEvents\n// - modelEvents\n// - triggers\n// - ui\n\n\nconst ViewMixin = {\n  supportsRenderLifecycle: true,\n  supportsDestroyLifecycle: true,\n\n  _isDestroyed: false,\n\n  isDestroyed() {\n    return !!this._isDestroyed;\n  },\n\n  _isRendered: false,\n\n  isRendered() {\n    return !!this._isRendered;\n  },\n\n  _isAttached: false,\n\n  isAttached() {\n    return !!this._isAttached;\n  },\n\n  // Overriding Backbone.View's `setElement` to handle\n  // if an el was previously defined. If so, the view might be\n  // rendered or attached on setElement.\n  setElement() {\n    const hasEl = !!this.el;\n\n    Backbone.View.prototype.setElement.apply(this, arguments);\n\n    if (hasEl) {\n      this._isRendered = !!this.$el.length;\n      this._isAttached = isNodeAttached(this.el);\n    }\n\n    return this;\n  },\n\n  // Overriding Backbone.View's `delegateEvents` to handle\n  // `events` and `triggers`\n  delegateEvents(eventsArg) {\n\n    this._proxyBehaviorViewProperties();\n    this._buildEventProxies();\n\n    const viewEvents = this._getEvents(eventsArg);\n\n    if (typeof eventsArg === 'undefined') {\n      this.events = viewEvents;\n    }\n\n    const combinedEvents = _.extend({},\n      this._getBehaviorEvents(),\n      viewEvents,\n      this._getBehaviorTriggers(),\n      this.getTriggers()\n    );\n\n    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n\n    return this;\n  },\n\n  _getEvents: function(eventsArg) {\n    const events = eventsArg || this.events;\n\n    if (_.isFunction(events)) {\n      return this.normalizeUIKeys(events());\n    }\n\n    return this.normalizeUIKeys(events);\n  },\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  getTriggers() {\n    if (!this.triggers) { return; }\n\n    // Allow `triggers` to be configured as a function\n    const triggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return this._getViewTriggers(this, triggers);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents() {\n    this._delegateEntityEvents(this.model, this.collection);\n\n    // bind each behaviors model and collection events\n    this._delegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n  undelegateEntityEvents() {\n    this._undelegateEntityEvents(this.model, this.collection);\n\n    // unbind each behaviors model and collection events\n    this._undelegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Internal helper method to verify whether the view hasn't been destroyed\n  _ensureViewIsIntact() {\n    if (this._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: 'View (cid: \"' + this.cid + '\") has already been destroyed and cannot be used.'\n      });\n    }\n  },\n\n  // Handle destroying the view and its children.\n  destroy(...args) {\n    if (this._isDestroyed) { return this; }\n    const shouldTriggerDetach = !!this._isAttached;\n\n    this.triggerMethod('before:destroy', this, ...args);\n    if (shouldTriggerDetach) {\n      this.triggerMethod('before:detach', this);\n    }\n\n    // unbind UI elements\n    this.unbindUIElements();\n\n    // remove the view from the DOM\n    // https://github.com/jashkenas/backbone/blob/1.2.3/backbone.js#L1235\n    this._removeElement();\n\n    if (shouldTriggerDetach) {\n      this._isAttached = false;\n      this.triggerMethod('detach', this);\n    }\n\n    // remove children after the remove to prevent extra paints\n    this._removeChildren();\n\n    this._destroyBehaviors(args);\n\n    this._isDestroyed = true;\n    this._isRendered = false;\n    this.triggerMethod('destroy', this, ...args);\n\n    this.stopListening();\n\n    return this;\n  },\n\n  bindUIElements() {\n    this._bindUIElements();\n    this._bindBehaviorUIElements();\n\n    return this;\n  },\n\n  // This method unbinds the elements specified in the \"ui\" hash\n  unbindUIElements() {\n    this._unbindUIElements();\n    this._unbindBehaviorUIElements();\n\n    return this;\n  },\n\n  getUI(name) {\n    this._ensureViewIsIntact();\n    return this._getUI(name);\n  },\n\n  // used as the prefix for child view events\n  // that are forwarded through the layoutview\n  childViewEventPrefix: 'childview',\n\n  // import the `triggerMethod` to trigger events with corresponding\n  // methods if the method exists\n  triggerMethod(...args) {\n    const ret = triggerMethod.apply(this, args);\n\n    this._triggerEventOnBehaviors(...args);\n    this._triggerEventOnParentLayout(...args);\n\n    return ret;\n  },\n\n  // Cache `childViewEvents` and `childViewTriggers`\n  _buildEventProxies: function() {\n    this._childViewEvents = _.result(this, 'childViewEvents');\n    this._childViewTriggers = _.result(this, 'childViewTriggers');\n  },\n\n  _triggerEventOnParentLayout(eventName, ...args) {\n    const layoutView = this._parentView();\n    if (!layoutView) {\n      return;\n    }\n\n    // invoke triggerMethod on parent view\n    const eventPrefix = _.result(layoutView, 'childViewEventPrefix');\n    const prefixedEventName = eventPrefix + ':' + eventName;\n\n    layoutView.triggerMethod(prefixedEventName, ...args);\n\n    // use the parent view's childViewEvents handler\n    const childViewEvents = layoutView.normalizeMethods(layoutView._childViewEvents);\n\n    if (!!childViewEvents && _.isFunction(childViewEvents[eventName])) {\n      childViewEvents[eventName].apply(layoutView, args);\n    }\n\n    // use the parent view's proxyEvent handlers\n    const childViewTriggers = layoutView._childViewTriggers;\n\n    // Call the event with the proxy name on the parent layout\n    if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n      layoutView.triggerMethod(childViewTriggers[eventName], ...args);\n    }\n  },\n\n  // Walk the _parent tree until we find a view (if one exists).\n  // Returns the parent view hierarchically closest to this view.\n  _parentView() {\n    let parent = this._parent;\n\n    while (parent) {\n      if (parent instanceof View) {\n        return parent;\n      }\n      parent = parent._parent;\n    }\n  }\n};\n\n_.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin,  UIMixin);\n\nexport default ViewMixin;\n","// Region\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport isNodeAttached from './utils/isNodeAttached';\nimport MarionetteObject from './object';\nimport MarionetteError from './error';\nimport monitorViewEvents from './monitor-view-events';\nimport destroyBackboneView from './utils/destroyBackboneView';\nimport { triggerMethodOn } from './trigger-method';\n\nconst ClassOptions = [\n  'allowMissingEl',\n  'parentEl',\n  'replaceElement'\n];\n\nconst Region = MarionetteObject.extend({\n  cidPrefix: 'mnr',\n  replaceElement: false,\n  _isReplaced: false,\n\n  constructor(options) {\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    // getOption necessary because options.el may be passed as undefined\n    this._initEl = this.el = this.getOption('el');\n\n    // Handle when this.el is passed in as a $ wrapped element.\n    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n\n    if (!this.el) {\n      throw new MarionetteError({\n        name: 'NoElError',\n        message: 'An \"el\" must be specified for a region.'\n      });\n    }\n\n    this.$el = this.getEl(this.el);\n    MarionetteObject.call(this, options);\n  },\n\n  // Displays a backbone view instance inside of the region. Handles calling the `render`\n  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\n  // option can be used to prevent a view from the old view being destroyed on show.\n  show(view, options) {\n    if (!this._ensureElement(options)) {\n      return;\n    }\n    this._ensureView(view);\n    if (view === this.currentView) { return this; }\n\n    this.triggerMethod('before:show', this, view, options);\n\n    monitorViewEvents(view);\n\n    this.empty(options);\n\n    // We need to listen for if a view is destroyed in a way other than through the region.\n    // If this happens we need to remove the reference to the currentView since once a view\n    // has been destroyed we can not reuse it.\n    view.on('destroy', this.empty, this);\n\n    // Make this region the view's parent.\n    // It's important that this parent binding happens before rendering so that any events\n    // the child may trigger during render can also be triggered on the child's ancestor views.\n    view._parent = this;\n\n    this._renderView(view);\n\n    this._attachView(view, options);\n\n    this.triggerMethod('show', this, view, options);\n    return this;\n  },\n\n  _renderView(view) {\n    if (view._isRendered) {\n      return;\n    }\n\n    if (!view.supportsRenderLifecycle) {\n      triggerMethodOn(view, 'before:render', view);\n    }\n\n    view.render();\n\n    if (!view.supportsRenderLifecycle) {\n      view._isRendered = true;\n      triggerMethodOn(view, 'render', view);\n    }\n  },\n\n  _attachView(view, options = {}) {\n    const shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el);\n    const shouldReplaceEl = typeof options.replaceElement === 'undefined' ? !!_.result(this, 'replaceElement') : !!options.replaceElement;\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    this.attachHtml(view, shouldReplaceEl);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n\n    this.currentView = view;\n  },\n\n  _ensureElement(options = {}) {\n    if (!_.isObject(this.el)) {\n      this.$el = this.getEl(this.el);\n      this.el = this.$el[0];\n    }\n\n    if (!this.$el || this.$el.length === 0) {\n      const allowMissingEl = typeof options.allowMissingEl === 'undefined' ? !!_.result(this, 'allowMissingEl') : !!options.allowMissingEl;\n\n      if (allowMissingEl) {\n        return false;\n      } else {\n        throw new MarionetteError(`An \"el\" must exist in DOM for this region ${this.cid}`);\n      }\n    }\n    return true;\n  },\n\n  _ensureView(view) {\n    if (!view) {\n      throw new MarionetteError({\n        name: 'ViewNotValid',\n        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n      });\n    }\n\n    if (view._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: 'View (cid: \"' + view.cid + '\") has already been destroyed and cannot be used.'\n      });\n    }\n  },\n\n  // Override this method to change how the region finds the DOM element that it manages. Return\n  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n  getEl(el) {\n    return Backbone.$(el, _.result(this, 'parentEl'));\n  },\n\n  _replaceEl(view) {\n    // always restore the el to ensure the regions el is present before replacing\n    this._restoreEl();\n\n    const parent = this.el.parentNode;\n\n    parent.replaceChild(view.el, this.el);\n    this._isReplaced = true;\n  },\n\n  // Restore the region's element in the DOM.\n  _restoreEl() {\n    if (!this.currentView) {\n      return;\n    }\n\n    const view = this.currentView;\n    const parent = view.el.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    parent.replaceChild(this.el, view.el);\n    this._isReplaced = false;\n  },\n\n  isReplaced() {\n    return !!this._isReplaced;\n  },\n\n  // Override this method to change how the new view is appended to the `$el` that the\n  // region is managing\n  attachHtml(view, shouldReplace) {\n    if (shouldReplace) {\n      // replace the region's node with the view's node\n      this._replaceEl(view);\n    } else {\n      this.el.appendChild(view.el);\n    }\n  },\n\n  // Destroy the current view, if there is one. If there is no current view, it does\n  // nothing and returns immediately.\n  empty(options = { allowMissingEl: true }) {\n    const view = this.currentView;\n\n    // If there is no view in the region we should only detach current html\n    if (!view) {\n      if (this._ensureElement(options)) {\n        this.detachHtml();\n      }\n      return this;\n    }\n\n    view.off('destroy', this.empty, this);\n    this.triggerMethod('before:empty', this, view);\n\n    if (this._isReplaced) {\n      this._restoreEl();\n    }\n\n    delete this.currentView;\n\n    if (!view._isDestroyed) {\n      this._removeView(view, options);\n    }\n\n    delete view._parent;\n\n    this.triggerMethod('empty', this, view);\n    return this;\n  },\n\n  _removeView(view, {preventDestroy} = {}) {\n    const shouldPreventDestroy = !!preventDestroy;\n\n    if (shouldPreventDestroy) {\n      this._detachView(view);\n      return;\n    }\n\n    if (view.destroy) {\n      view.destroy();\n    } else {\n      destroyBackboneView(view);\n    }\n  },\n\n  _detachView(view) {\n    const shouldTriggerDetach = !!view._isAttached;\n\n    if (shouldTriggerDetach) {\n      triggerMethodOn(view, 'before:detach', view);\n    }\n\n    this.detachHtml();\n\n    if (shouldTriggerDetach) {\n      view._isAttached = false;\n      triggerMethodOn(view, 'detach', view);\n    }\n  },\n\n  // Override this method to change how the region detaches current content\n  detachHtml() {\n    this.$el.contents().detach();\n  },\n\n  // Checks whether a view is currently present within the region. Returns `true` if there is\n  // and `false` if no view is present.\n  hasView() {\n    return !!this.currentView;\n  },\n\n  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n  // The next time a view is shown via this region, the region will re-query the DOM for\n  // the region's `el`.\n  reset(options) {\n    this.empty(options);\n\n    if (this.$el) {\n      this.el = this._initEl;\n    }\n\n    delete this.$el;\n    return this;\n  },\n\n  destroy: function(options) {\n    this.reset(options);\n    return MarionetteObject.prototype.destroy.apply(this, arguments);\n  }\n});\n\nexport default Region;\n","import _                    from 'underscore';\nimport _invoke              from '../utils/_invoke';\nimport Region               from '../region';\nimport MarionetteError      from '../error';\n\n// MixinOptions\n// - regions\n// - regionClass\n\nexport default {\n  regionClass: Region,\n\n  // Internal method to initialize the regions that have been defined in a\n  // `regions` attribute on this View.\n  _initRegions: function() {\n\n    // init regions hash\n    this.regions =  this.regions || {};\n    this._regions = {};\n\n    this.addRegions(_.result(this, 'regions'));\n  },\n\n  // Internal method to re-initialize all of the regions by updating\n  // the `el` that they point to\n  _reInitRegions: function() {\n    _invoke(this._regions, 'reset');\n  },\n\n  // Add a single region, by name, to the View\n  addRegion: function(name, definition) {\n    var regions = {};\n    regions[name] = definition;\n    return this.addRegions(regions)[name];\n  },\n\n  // Add multiple regions as a {name: definition, name2: def2} object literal\n  addRegions: function(regions) {\n    // If there's nothing to add, stop here.\n    if (_.isEmpty(regions)) {\n      return;\n    }\n\n    // Normalize region selectors hash to allow\n    // a user to use the @ui. syntax.\n    regions = this.normalizeUIValues(regions, ['selector', 'el']);\n\n    // Add the regions definitions to the regions property\n    this.regions = _.extend({}, this.regions, regions);\n\n    return this._addRegions(regions);\n  },\n\n  // internal method to build and add regions\n  _addRegions: function(regionDefinitions) {\n    return _.reduce(regionDefinitions, (regions, definition, name) => {\n      regions[name] = this._buildRegion(definition);\n      this._addRegion(regions[name], name);\n      return regions;\n    }, {});\n  },\n\n  // return the region instance from the definition\n  _buildRegion: function(definition) {\n    if (definition instanceof Region) {\n      return definition;\n    }\n\n    return this._buildRegionFromDefinition(definition);\n  },\n\n  _buildRegionFromDefinition: function(definition) {\n    if (_.isString(definition)) {\n      return this._buildRegionFromObject({el: definition});\n    }\n\n    if (_.isFunction(definition)) {\n      return this._buildRegionFromRegionClass(definition);\n    }\n\n    if (_.isObject(definition)) {\n      return this._buildRegionFromObject(definition);\n    }\n\n    throw new MarionetteError({\n      message: 'Improper region configuration type.',\n      url: 'marionette.region.html#region-configuration-types'\n    });\n  },\n\n  _buildRegionFromObject: function(definition) {\n    var RegionClass = definition.regionClass || this.regionClass;\n\n    var options = _.omit(definition, 'regionClass');\n\n    _.defaults(options, {\n      el: definition.selector,\n      parentEl: _.partial(_.result, this, 'el')\n    });\n\n    return new RegionClass(options);\n  },\n\n  // Build the region directly from a given `RegionClass`\n  _buildRegionFromRegionClass: function(RegionClass) {\n    return new RegionClass({\n      parentEl: _.partial(_.result, this, 'el')\n    });\n  },\n\n  _addRegion: function(region, name) {\n    this.triggerMethod('before:add:region', this, name, region);\n\n    region._parent = this;\n\n    this._regions[name] = region;\n\n    this.triggerMethod('add:region', this, name, region);\n  },\n\n  // Remove a single region from the View, by name\n  removeRegion: function(name) {\n    var region = this._regions[name];\n\n    this._removeRegion(region, name);\n\n    return region;\n  },\n\n  // Remove all regions from the View\n  removeRegions: function() {\n    var regions = this.getRegions();\n\n    _.each(this._regions, _.bind(this._removeRegion, this));\n\n    return regions;\n  },\n\n  _removeRegion: function(region, name) {\n    this.triggerMethod('before:remove:region', this, name, region);\n\n    region.empty();\n    region.stopListening();\n\n    delete this.regions[name];\n    delete this._regions[name];\n\n    this.triggerMethod('remove:region', this, name, region);\n  },\n\n  // Empty all regions in the region manager, but\n  // leave them attached\n  emptyRegions: function() {\n    var regions = this.getRegions();\n    _invoke(regions, 'empty');\n    return regions;\n  },\n\n  // Checks to see if view contains region\n  // Accepts the region name\n  // hasRegion('main')\n  hasRegion: function(name) {\n    return !!this.getRegion(name);\n  },\n\n  // Provides access to regions\n  // Accepts the region name\n  // getRegion('main')\n  getRegion: function(name) {\n    return this._regions[name];\n  },\n\n  // Get all regions\n  getRegions: function() {\n    return _.clone(this._regions);\n  },\n\n  showChildView: function(name, view, ...args) {\n    var region = this.getRegion(name);\n    return region.show(view, ...args);\n  },\n\n  getChildView: function(name) {\n    return this.getRegion(name).currentView;\n  }\n\n};\n","// View\n// ---------\n\nimport _                  from 'underscore';\nimport Backbone           from 'backbone';\nimport ViewMixin          from './mixins/view';\nimport RegionsMixin       from './mixins/regions';\nimport monitorViewEvents  from './monitor-view-events';\nimport Renderer           from './renderer';\n\nconst ClassOptions = [\n  'behaviors',\n  'childViewEventPrefix',\n  'childViewEvents',\n  'childViewTriggers',\n  'collectionEvents',\n  'events',\n  'modelEvents',\n  'regionClass',\n  'regions',\n  'template',\n  'templateContext',\n  'triggers',\n  'ui'\n];\n\n// The standard view. Includes view events, automatic rendering\n// of Underscore templates, nested views, and more.\nconst View = Backbone.View.extend({\n\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this._initRegions();\n\n    const args = Array.prototype.slice.call(arguments);\n    args[0] = this.options;\n    Backbone.View.prototype.constructor.apply(this, args);\n\n    this.delegateEntityEvents();\n  },\n\n  // Serialize the view's model *or* collection, if\n  // it exists, for the template\n  serializeData() {\n    if (!this.model && !this.collection) {\n      return {};\n    }\n\n    // If we have a model, we serialize that\n    if (this.model) {\n      return this.serializeModel();\n    }\n\n    // Otherwise, we serialize the collection,\n    // making it available under the `items` property\n    return {\n      items: this.serializeCollection()\n    };\n  },\n\n  // Prepares the special `model` property of a view\n  // for being displayed in the template. By default\n  // we simply clone the attributes. Override this if\n  // you need a custom transformation for your view's model\n  serializeModel() {\n    if (!this.model) { return {}; }\n    return _.clone(this.model.attributes);\n  },\n\n  // Serialize a collection by cloning each of\n  // its model's attributes\n  serializeCollection() {\n    if (!this.collection) { return {}; }\n    return this.collection.map(function(model) { return _.clone(model.attributes); });\n  },\n\n  // Render the view, defaulting to underscore.js templates.\n  // You can override this in your view definition to provide\n  // a very specific rendering for your view. In general, though,\n  // you should override the `Marionette.Renderer` object to\n  // change how Marionette renders views.\n  // Subsequent renders after the first will re-render all nested\n  // views.\n  render() {\n    this._ensureViewIsIntact();\n\n    this.triggerMethod('before:render', this);\n\n    // If this is not the first render call, then we need to\n    // re-initialize the `el` for each region\n    if (this._isRendered) {\n      this._reInitRegions();\n    }\n\n    this._renderTemplate();\n    this.bindUIElements();\n\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n\n    return this;\n  },\n\n  // Internal method to render the template with the serialized data\n  // and template context via the `Marionette.Renderer` object.\n  _renderTemplate() {\n    const template = this.getTemplate();\n\n    // Allow template-less views\n    if (template === false) {\n      return;\n    }\n\n    // Add in entity data and template context\n    const data = this.mixinTemplateContext(this.serializeData());\n\n    // Render and add to el\n    const html = Renderer.render(template, data, this);\n    this.attachElContent(html);\n  },\n\n  // Get the template for this view\n  // instance. You can set a `template` attribute in the view\n  // definition or pass a `template: \"whatever\"` parameter in\n  // to the constructor options.\n  getTemplate() {\n    return this.template;\n  },\n\n  // Mix in template context methods. Looks for a\n  // `templateContext` attribute, which can either be an\n  // object literal, or a function that returns an object\n  // literal. All methods and attributes from this object\n  // are copies to the object passed in.\n  mixinTemplateContext: function(target = {}) {\n    const templateContext = _.result(this, 'templateContext');\n    return _.extend(target, templateContext);\n  },\n\n  // Attaches the content of a given view.\n  // This method can be overridden to optimize rendering,\n  // or to render in a non standard way.\n  //\n  // For example, using `innerHTML` instead of `$el.html`\n  //\n  // ```js\n  // attachElContent(html) {\n  //   this.el.innerHTML = html;\n  //   return this;\n  // }\n  // ```\n  attachElContent(html) {\n    this.$el.html(html);\n\n    return this;\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this.removeRegions();\n  },\n\n  _getImmediateChildren: function() {\n    return _.chain(this.getRegions())\n      .map('currentView')\n      .compact()\n      .value();\n  }\n});\n\n_.extend(View.prototype, ViewMixin, RegionsMixin);\n\nexport default View;\n","// Backbone.BabySitter\n// -------------------\n// v1.0.0-pre.1\n//\n// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.\n// Distributed under MIT license\n//\n// http://github.com/marionettejs/backbone.babysitter\n\n(function(root, factory) {\n\n  if (typeof define === 'function' && define.amd) {\n    define(['backbone', 'underscore'], function(Backbone, _) {\n      return factory(Backbone, _);\n    });\n  } else if (typeof exports !== 'undefined') {\n    var Backbone = require('backbone');\n    var _ = require('underscore');\n    module.exports = factory(Backbone, _);\n  } else {\n    factory(root.Backbone, root._);\n  }\n\n}(this, function(Backbone, _) {\n  'use strict';\n\n  var previousChildViewContainer = Backbone.ChildViewContainer;\n\n  // BabySitter.ChildViewContainer\n  // -----------------------------\n  //\n  // Provide a container to store, retrieve and\n  // shut down child views.\n  \n  Backbone.ChildViewContainer = (function (Backbone, _) {\n  \n    // Container Constructor\n    // ---------------------\n  \n    var Container = function(views){\n      this._views = {};\n      this._indexByModel = {};\n      this._indexByCustom = {};\n      this._updateLength();\n  \n      _.each(views, this.add, this);\n    };\n  \n    // Container Methods\n    // -----------------\n  \n    _.extend(Container.prototype, {\n  \n      // Add a view to this container. Stores the view\n      // by `cid` and makes it searchable by the model\n      // cid (and model itself). Optionally specify\n      // a custom key to store an retrieve the view.\n      add: function(view, customIndex){\n        var viewCid = view.cid;\n  \n        // store the view\n        this._views[viewCid] = view;\n  \n        // index it by model\n        if (view.model){\n          this._indexByModel[view.model.cid] = viewCid;\n        }\n  \n        // index by custom\n        if (customIndex){\n          this._indexByCustom[customIndex] = viewCid;\n        }\n  \n        this._updateLength();\n        return this;\n      },\n  \n      // Find a view by the model that was attached to\n      // it. Uses the model's `cid` to find it.\n      findByModel: function(model){\n        return this.findByModelCid(model.cid);\n      },\n  \n      // Find a view by the `cid` of the model that was attached to\n      // it. Uses the model's `cid` to find the view `cid` and\n      // retrieve the view using it.\n      findByModelCid: function(modelCid){\n        var viewCid = this._indexByModel[modelCid];\n        return this.findByCid(viewCid);\n      },\n  \n      // Find a view by a custom indexer.\n      findByCustom: function(index){\n        var viewCid = this._indexByCustom[index];\n        return this.findByCid(viewCid);\n      },\n  \n      // Find by index. This is not guaranteed to be a\n      // stable index.\n      findByIndex: function(index){\n        return _.values(this._views)[index];\n      },\n  \n      // retrieve a view by its `cid` directly\n      findByCid: function(cid){\n        return this._views[cid];\n      },\n  \n      // Remove a view\n      remove: function(view){\n        var viewCid = view.cid;\n  \n        // delete model index\n        if (view.model){\n          delete this._indexByModel[view.model.cid];\n        }\n  \n        // delete custom index\n        _.any(this._indexByCustom, function(cid, key) {\n          if (cid === viewCid) {\n            delete this._indexByCustom[key];\n            return true;\n          }\n        }, this);\n  \n        // remove the view from the container\n        delete this._views[viewCid];\n  \n        // update the length\n        this._updateLength();\n        return this;\n      },\n  \n      // Call a method on every view in the container,\n      // passing parameters to the call method one at a\n      // time, like `function.call`.\n      call: function(method){\n        this.apply(method, _.tail(arguments));\n      },\n  \n      // Apply a method on every view in the container,\n      // passing parameters to the call method one at a\n      // time, like `function.apply`.\n      apply: function(method, args){\n        _.each(this._views, function(view){\n          if (_.isFunction(view[method])){\n            view[method].apply(view, args || []);\n          }\n        });\n      },\n  \n      // Update the `.length` attribute on this container\n      _updateLength: function(){\n        this.length = _.size(this._views);\n      }\n    });\n  \n    // Borrowing this code from Backbone.Collection:\n    // http://backbonejs.org/docs/backbone.html#section-106\n    //\n    // Mix in methods from Underscore, for iteration, and other\n    // collection related features.\n    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',\n      'select', 'reject', 'every', 'all', 'some', 'any', 'include',\n      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',\n      'last', 'without', 'isEmpty', 'pluck', 'reduce'];\n  \n    _.each(methods, function(method) {\n      Container.prototype[method] = function() {\n        var views = _.values(this._views);\n        var args = [views].concat(_.toArray(arguments));\n        return _[method].apply(_, args);\n      };\n    });\n  \n    // return the public API\n    return Container;\n  })(Backbone, _);\n  \n\n  Backbone.ChildViewContainer.VERSION = '1.0.0-pre.1';\n\n  Backbone.ChildViewContainer.noConflict = function () {\n    Backbone.ChildViewContainer = previousChildViewContainer;\n    return this;\n  };\n\n  return Backbone.ChildViewContainer;\n\n}));\n","// Collection View\n// ---------------\n\nimport _                  from 'underscore';\nimport Backbone           from 'backbone';\nimport ChildViewContainer from 'backbone.babysitter';\nimport MarionetteError    from './error';\nimport ViewMixin          from './mixins/view';\nimport monitorViewEvents  from './monitor-view-events';\nimport destroyBackboneView from './utils/destroyBackboneView';\nimport { triggerMethodOn } from './trigger-method';\n\nconst ClassOptions = [\n  'behaviors',\n  'childView',\n  'childViewEventPrefix',\n  'childViewEvents',\n  'childViewOptions',\n  'childViewTriggers',\n  'collectionEvents',\n  'events',\n  'filter',\n  'emptyView',\n  'emptyViewOptions',\n  'modelEvents',\n  'reorderOnSort',\n  'sort',\n  'triggers',\n  'ui',\n  'viewComparator'\n];\n\n// A view that iterates over a Backbone.Collection\n// and renders an individual child view for each model.\nconst CollectionView = Backbone.View.extend({\n\n  // flag for maintaining the sorted order of the collection\n  sort: true,\n\n  // constructor\n  // option to pass `{sort: false}` to prevent the `CollectionView` from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  //\n  // option to pass `{comparator: compFunction()}` to allow the `CollectionView`\n  // to use a custom sort order for the collection.\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this.once('render', this._initialEvents);\n    this._initChildViewStorage();\n    this._bufferedChildren = [];\n\n    const args = Array.prototype.slice.call(arguments);\n    args[0] = this.options;\n    Backbone.View.prototype.constructor.apply(this, args);\n\n    this.delegateEntityEvents();\n  },\n\n  // Instead of inserting elements one by one into the page, it's much more performant to insert\n  // elements into a document fragment and then insert that document fragment into the page\n  _startBuffering() {\n    this._isBuffering = true;\n  },\n\n  _endBuffering() {\n    const shouldTriggerAttach = !!this._isAttached;\n    const triggerOnChildren = shouldTriggerAttach ? this._getImmediateChildren() : [];\n\n    this._isBuffering = false;\n\n    _.each(triggerOnChildren, child => {\n      triggerMethodOn(child, 'before:attach', child);\n    });\n\n    this.attachBuffer(this, this._createBuffer());\n\n    _.each(triggerOnChildren, child => {\n      child._isAttached = true;\n      triggerMethodOn(child, 'attach', child);\n    });\n\n    this._bufferedChildren = [];\n  },\n\n  _getImmediateChildren() {\n    return _.values(this.children._views);\n  },\n\n  // Configured the initial events that the collection view binds to.\n  _initialEvents() {\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n      this.listenTo(this.collection, 'reset', this.render);\n\n      if (this.sort) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Handle a child added to the collection\n  _onCollectionAdd(child, collection, opts) {\n    // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2\n    let index = opts.at !== undefined && (opts.index || collection.indexOf(child));\n\n    // When filtered or when there is no initial index, calculate index.\n    if (this.filter || index === false) {\n      index = _.indexOf(this._filteredSortedModels(index), child);\n    }\n\n    if (this._shouldAddChild(child, index)) {\n      this._destroyEmptyView();\n      const ChildView = this._getChildView(child);\n      this._addChild(child, ChildView, index);\n    }\n  },\n\n  // get the child view by model it holds, and remove it\n  _onCollectionRemove(model) {\n    const view = this.children.findByModel(model);\n    this.removeChildView(view);\n    this._checkEmpty();\n  },\n\n  // Render children views. Override this method to provide your own implementation of a\n  // render function for the collection view.\n  render() {\n    this._ensureViewIsIntact();\n    this.triggerMethod('before:render', this);\n    this._renderChildren();\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  // An efficient rendering used for filtering. Instead of modifying the whole DOM for the\n  // collection view, we are only adding or removing the related childrenViews.\n  setFilter(filter, {preventRender} = {}) {\n    const canBeRendered = this._isRendered && !this._isDestroyed;\n    const filterChanged = this.filter !== filter;\n    const shouldRender = canBeRendered && filterChanged && !preventRender;\n\n    if (shouldRender) {\n      this.triggerMethod('before:apply:filter', this);\n      const previousModels = this._filteredSortedModels();\n      this.filter = filter;\n      const models = this._filteredSortedModels();\n      this._applyModelDeltas(models, previousModels);\n      this.triggerMethod('apply:filter', this);\n    } else {\n      this.filter = filter;\n    }\n    return this;\n  },\n\n  // `removeFilter` is actually an alias for removing filters.\n  removeFilter(options) {\n    this.setFilter(null, options);\n    return this;\n  },\n\n  // Calculate and apply difference by cid between `models` and `previousModels`.\n  _applyModelDeltas(models, previousModels) {\n    const currentIds = {};\n    _.each(models, (model, index) => {\n      const addedChildNotExists = !this.children.findByModel(model);\n      if (addedChildNotExists) {\n        this._onCollectionAdd(model, this.collection, {at: index});\n      }\n      currentIds[model.cid] = true;\n    });\n    _.each(previousModels, (prevModel) => {\n      const removedChildExists = !currentIds[prevModel.cid] && this.children.findByModel(prevModel);\n      if (removedChildExists) {\n        this._onCollectionRemove(prevModel);\n      }\n    });\n  },\n\n  // Reorder DOM after sorting. When your element's rendering do not use their index,\n  // you can pass reorderOnSort: true to only reorder the DOM after a sort instead of\n  // rendering all the collectionView.\n  reorder() {\n    const children = this.children;\n    const models = this._filteredSortedModels();\n\n    if (!models.length && this._showingEmptyView) { return this; }\n\n    const anyModelsAdded = _.some(models, function(model) {\n      return !children.findByModel(model);\n    });\n\n    // If there are any new models added due to filtering we need to add child views,\n    // so render as normal.\n    if (anyModelsAdded) {\n      this.render();\n    } else {\n      // Get the DOM nodes in the same order as the models.\n      const elsToReorder = _.map(models, function(model, index) {\n        const view = children.findByModel(model);\n        view._index = index;\n        return view.el;\n      });\n\n      // Find the views that were children before but aren't in this new ordering.\n      const filteredOutViews = children.filter(function(view) {\n        return !_.contains(elsToReorder, view.el);\n      });\n\n      this.triggerMethod('before:reorder', this);\n\n      // Since append moves elements that are already in the DOM, appending the elements\n      // will effectively reorder them.\n      this._appendReorderedChildren(elsToReorder);\n\n      // remove any views that have been filtered out\n      _.each(filteredOutViews, _.bind(this.removeChildView, this));\n      this._checkEmpty();\n\n      this.triggerMethod('reorder', this);\n    }\n    return this;\n  },\n\n  // Render view after sorting. Override this method to change how the view renders\n  // after a `sort` on the collection.\n  resortView() {\n    if (this.reorderOnSort) {\n      this.reorder();\n    } else {\n      this._renderChildren();\n    }\n    return this;\n  },\n\n  // Internal method. This checks for any changes in the order of the collection.\n  // If the index of any view doesn't match, it will render.\n  _sortViews() {\n    const models = this._filteredSortedModels();\n\n    // check for any changes in sort order of views\n    const orderChanged = _.find(models, (item, index) => {\n      const view = this.children.findByModel(item);\n      return !view || view._index !== index;\n    });\n\n    if (orderChanged) {\n      this.resortView();\n    }\n  },\n\n  // Internal reference to what index a `emptyView` is.\n  _emptyViewIndex: -1,\n\n  // Internal method. Separated so that CompositeView can append to the childViewContainer\n  // if necessary\n  _appendReorderedChildren(children) {\n    this.$el.append(children);\n  },\n\n  // Internal method. Separated so that CompositeView can have more control over events\n  // being triggered, around the rendering process\n  _renderChildren() {\n    this._destroyEmptyView();\n    this._destroyChildren({checkEmpty: false});\n\n    const models = this._filteredSortedModels();\n    if (this.isEmpty({processedModels: models})) {\n      this._showEmptyView();\n    } else {\n      this.triggerMethod('before:render:children', this);\n      this._startBuffering();\n      this._showCollection(models);\n      this._endBuffering();\n      this.triggerMethod('render:children', this);\n    }\n  },\n\n  // Internal method to loop through collection and show each child view.\n  _showCollection(models) {\n    _.each(models, (child, index) => {\n      const ChildView = this._getChildView(child);\n      this._addChild(child, ChildView, index);\n    });\n  },\n\n  // Allow the collection to be sorted by a custom view comparator\n  _filteredSortedModels(addedAt) {\n    if (!this.collection) { return []; }\n\n    const viewComparator = this.getViewComparator();\n    let models = this.collection.models;\n    addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\n\n    if (viewComparator) {\n      let addedModel;\n      // Preserve `at` location, even for a sorted view\n      if (addedAt) {\n        addedModel = models[addedAt];\n        models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\n      }\n      models = this._sortModelsBy(models, viewComparator);\n      if (addedModel) {\n        models.splice(addedAt, 0, addedModel);\n      }\n    }\n\n    // Filter after sorting in case the filter uses the index\n    models = this._filterModels(models);\n\n    return models;\n  },\n\n  getViewComparator() {\n    return this.viewComparator;\n  },\n\n  // Filter an array of models, if a filter exists\n  _filterModels(models) {\n    if (this.filter) {\n      models = _.filter(models, (model, index) => {\n        return this._shouldAddChild(model, index);\n      });\n    }\n    return models;\n  },\n\n  _sortModelsBy(models, comparator) {\n    if (typeof comparator === 'string') {\n      return _.sortBy(models, function(model) {\n        return model.get(comparator);\n      });\n    } else if (comparator.length === 1) {\n      return _.sortBy(models, _.bind(comparator, this));\n    } else {\n      return models.sort(_.bind(comparator, this));\n    }\n  },\n\n  // Internal method to show an empty view in place of a collection of child views,\n  // when the collection is empty\n  _showEmptyView() {\n    const EmptyView = this.getEmptyView();\n\n    if (EmptyView && !this._showingEmptyView) {\n      this._showingEmptyView = true;\n\n      const model = new Backbone.Model();\n      let emptyViewOptions =\n        this.emptyViewOptions || this.childViewOptions;\n      if (_.isFunction(emptyViewOptions)) {\n        emptyViewOptions = emptyViewOptions.call(this, model, this._emptyViewIndex);\n      }\n\n      const view = this.buildChildView(model, EmptyView, emptyViewOptions);\n\n      this.triggerMethod('before:render:empty', this, view);\n      this._addChildView(view, 0);\n      this.triggerMethod('render:empty', this, view);\n\n      view._parent = this;\n    }\n  },\n\n  // Internal method to destroy an existing emptyView instance if one exists. Called when\n  // a collection view has been rendered empty, and then a child is added to the collection.\n  _destroyEmptyView() {\n    if (this._showingEmptyView) {\n      this.triggerMethod('before:remove:empty', this);\n\n      this._destroyChildren();\n      delete this._showingEmptyView;\n\n      this.triggerMethod('remove:empty', this);\n    }\n  },\n\n  // Retrieve the empty view class\n  getEmptyView() {\n    return this.emptyView;\n  },\n\n  // Retrieve the `childView` class, either from `this.options.childView` or from\n  // the `childView` in the object definition. The \"options\" takes precedence.\n  // The `childView` property can be either a view class or a function that\n  // returns a view class. If it is a function, it will receive the model that\n  // will be passed to the view instance (created from the returned view class)\n  _getChildView(child) {\n    const childView = this.childView;\n\n    if (!childView) {\n      throw new MarionetteError({\n        name: 'NoChildViewError',\n        message: 'A \"childView\" must be specified'\n      });\n    }\n\n    // first check if the `childView` is a view class (the common case)\n    // then check if it's a function (which we assume that returns a view class)\n    if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n      return childView;\n    } else if (_.isFunction(childView)) {\n      return childView.call(this, child);\n    } else {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n  },\n\n  // Internal method for building and adding a child view\n  _addChild(child, ChildView, index) {\n    const childViewOptions = this._getChildViewOptions(child, index);\n\n    const view = this.buildChildView(child, ChildView, childViewOptions);\n\n    this.addChildView(view, index);\n\n    return view;\n  },\n\n  _getChildViewOptions(child, index) {\n    if (_.isFunction(this.childViewOptions)) {\n      return this.childViewOptions(child, index);\n    }\n\n    return this.childViewOptions;\n  },\n\n  // Render the child's view and add it to the HTML for the collection view at a given index.\n  // This will also update the indices of later views in the collection in order to keep the\n  // children in sync with the collection.\n  addChildView(view, index) {\n    this.triggerMethod('before:add:child', this, view);\n\n    // increment indices of views after this one\n    this._updateIndices(view, true, index);\n\n    view._parent = this;\n\n    this._addChildView(view, index);\n\n    this.triggerMethod('add:child', this, view);\n\n    return view;\n  },\n\n  // Internal method. This decrements or increments the indices of views after the added/removed\n  // view to keep in sync with the collection.\n  _updateIndices(view, increment, index) {\n    if (!this.sort) {\n      return;\n    }\n\n    if (increment) {\n      // assign the index to the view\n      view._index = index;\n    }\n\n    // update the indexes of views after this one\n    this.children.each(function(laterView) {\n      if (laterView._index >= view._index) {\n        laterView._index += increment ? 1 : -1;\n      }\n    });\n  },\n\n  // Internal Method. Add the view to children and render it at the given index.\n  _addChildView(view, index) {\n    // Only trigger attach if already attached and not buffering,\n    // otherwise _endBuffering() or Region#show() handles this.\n    const shouldTriggerAttach = !this._isBuffering && this._isAttached;\n\n    monitorViewEvents(view);\n\n    // set up the child view event forwarding\n    this._proxyChildEvents(view);\n\n    // Store the child view itself so we can properly remove and/or destroy it later\n    this.children.add(view);\n\n    if (!view.supportsRenderLifecycle) {\n      triggerMethodOn(view, 'before:render', view);\n    }\n\n    // Render view\n    view.render();\n\n    if (!view.supportsRenderLifecycle) {\n      view._isRendered = true;\n      triggerMethodOn(view, 'render', view);\n    }\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    // Attach view\n    this.attachHtml(this, view, index);\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n  },\n\n  // Build a `childView` for a model in the collection.\n  buildChildView(child, ChildViewClass, childViewOptions) {\n    const options = _.extend({model: child}, childViewOptions);\n    return new ChildViewClass(options);\n  },\n\n  // Remove the child view and destroy it. This function also updates the indices of later views\n  // in the collection in order to keep the children in sync with the collection.\n  removeChildView(view) {\n    if (!view || view._isDestroyed) {\n      return;\n    }\n\n    this.triggerMethod('before:remove:child', this, view);\n\n    if (view.destroy) {\n      view.destroy();\n    } else {\n      destroyBackboneView(view);\n    }\n\n    delete view._parent;\n    this.stopListening(view);\n    this.children.remove(view);\n    this.triggerMethod('remove:child', this, view);\n\n    // decrement the index of views after this one\n    this._updateIndices(view, false);\n  },\n\n  // check if the collection is empty or optionally whether an array of pre-processed models is empty\n  isEmpty(options) {\n    let models;\n    if (_.result(options, 'processedModels')) {\n      models = options.processedModels;\n    } else {\n      models = this.collection ? this.collection.models : [];\n      models = this._filterModels(models);\n    }\n    return models.length === 0;\n  },\n\n  // If empty, show the empty view\n  _checkEmpty() {\n    if (this.isEmpty()) {\n      this._showEmptyView();\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(collectionView, buffer) {\n    collectionView.$el.append(buffer);\n  },\n\n  // Create a fragment buffer from the currently buffered children\n  _createBuffer() {\n    const elBuffer = document.createDocumentFragment();\n    _.each(this._bufferedChildren, function(b) {\n      elBuffer.appendChild(b.el);\n    });\n    return elBuffer;\n  },\n\n  // Append the HTML to the collection's `el`. Override this method to do something other\n  // than `.append`.\n  attachHtml(collectionView, childView, index) {\n    if (collectionView._isBuffering) {\n      // buffering happens on reset events and initial renders\n      // in order to reduce the number of inserts into the\n      // document, which are expensive.\n      collectionView._bufferedChildren.splice(index, 0, childView);\n    } else {\n      // If we've already rendered the main collection, append\n      // the new child into the correct order if we need to. Otherwise\n      // append to the end.\n      if (!collectionView._insertBefore(childView, index)) {\n        collectionView._insertAfter(childView);\n      }\n    }\n  },\n\n  // Internal method. Check whether we need to insert the view into the correct position.\n  _insertBefore(childView, index) {\n    let currentView;\n    const findPosition = this.sort && (index < this.children.length - 1);\n    if (findPosition) {\n      // Find the view after this one\n      currentView = this.children.find(function(view) {\n        return view._index === index + 1;\n      });\n    }\n\n    if (currentView) {\n      currentView.$el.before(childView.el);\n      return true;\n    }\n\n    return false;\n  },\n\n  // Internal method. Append a view to the end of the $el\n  _insertAfter(childView) {\n    this.$el.append(childView.el);\n  },\n\n  // Internal method to set up the `children` object for storing all of the child views\n  _initChildViewStorage() {\n    this.children = new ChildViewContainer();\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this._destroyChildren({checkEmpty: false});\n  },\n\n  // Destroy the child views that this collection view is holding on to, if any\n  _destroyChildren({checkEmpty} = {}) {\n    this.triggerMethod('before:destroy:children', this);\n    const shouldCheckEmpty = checkEmpty !== false;\n    const childViews = this.children.map(_.identity);\n\n    this.children.each(_.bind(this.removeChildView, this));\n\n    if (shouldCheckEmpty) {\n      this._checkEmpty();\n    }\n\n    this.triggerMethod('destroy:children', this);\n    return childViews;\n  },\n\n  // Return true if the given child should be shown. Return false otherwise.\n  // The filter will be passed (child, index, collection), where\n  //  'child' is the given model\n  //  'index' is the index of that model in the collection\n  //  'collection' is the collection referenced by this CollectionView\n  _shouldAddChild(child, index) {\n    const filter = this.filter;\n    return !_.isFunction(filter) || filter.call(this, child, index, this.collection);\n  },\n\n  // Set up the child view event forwarding. Uses a \"childview:\" prefix in front of all forwarded events.\n  _proxyChildEvents(view) {\n    const prefix = _.result(this, 'childViewEventPrefix');\n\n    // Forward all child view events through the parent,\n    // prepending \"childview:\" to the event name\n    this.listenTo(view, 'all', function(eventName, ...args) {\n\n      const childEventName = prefix + ':' + eventName;\n\n      const childViewEvents = this.normalizeMethods(this._childViewEvents);\n\n      // call collectionView childViewEvent if defined\n      if (typeof childViewEvents !== 'undefined' && _.isFunction(childViewEvents[eventName])) {\n        childViewEvents[eventName].apply(this, args);\n      }\n\n      // use the parent view's proxyEvent handlers\n      const childViewTriggers = this._childViewTriggers;\n\n      // Call the event with the proxy name on the parent layout\n      if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n        this.triggerMethod(childViewTriggers[eventName], ...args);\n      }\n\n      this.triggerMethod(childEventName, ...args);\n    });\n  }\n});\n\n_.extend(CollectionView.prototype, ViewMixin);\n\nexport default CollectionView;\n","// Composite View\n// --------------\n\nimport _               from 'underscore';\nimport Backbone        from 'backbone';\nimport deprecate       from './utils/deprecate';\nimport MarionetteError from './error';\nimport CollectionView  from './collection-view';\nimport View            from './view';\n\nconst ClassOptions = [\n  'childViewContainer',\n  'template',\n  'templateContext'\n];\n\n// Used for rendering a branch-leaf, hierarchical structure.\n// Extends directly from CollectionView and also renders an\n// a child view as `modelView`, for the top leaf\n// @deprecated\nconst CompositeView = CollectionView.extend({\n\n  // Setting up the inheritance chain which allows changes to\n  // Marionette.CollectionView.prototype.constructor which allows overriding\n  // option to pass '{sort: false}' to prevent the CompositeView from\n  // maintaining the sorted order of the collection.\n  // This will fallback onto appending childView's to the end.\n  constructor(options) {\n    deprecate('CompositeView is deprecated. Convert to View at your earliest convenience');\n\n    this.mergeOptions(options, ClassOptions);\n\n    CollectionView.prototype.constructor.apply(this, arguments);\n  },\n\n  // Configured the initial events that the composite view\n  // binds to. Override this method to prevent the initial\n  // events, or to add your own initial events.\n  _initialEvents() {\n\n    // Bind only after composite view is rendered to avoid adding child views\n    // to nonexistent childViewContainer\n\n    if (this.collection) {\n      this.listenTo(this.collection, 'add', this._onCollectionAdd);\n      this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n      this.listenTo(this.collection, 'reset', this.renderChildren);\n\n      if (this.sort) {\n        this.listenTo(this.collection, 'sort', this._sortViews);\n      }\n    }\n  },\n\n  // Retrieve the `childView` to be used when rendering each of\n  // the items in the collection. The default is to return\n  // `this.childView` or Marionette.CompositeView if no `childView`\n  // has been defined. As happens in CollectionView, `childView` can\n  // be a function (which should return a view class).\n  _getChildView(child) {\n    var childView = this.childView;\n\n    // for CompositeView, if `childView` is not specified, we'll get the same\n    // composite view class rendered for each child in the collection\n    // then check if the `childView` is a view class (the common case)\n    // finally check if it's a function (which we assume that returns a view class)\n    if (!childView) {\n      return this.constructor;\n    } else if (childView.prototype instanceof Backbone.View || childView === Backbone.View) {\n      return childView;\n    } else if (_.isFunction(childView)) {\n      return childView.call(this, child);\n    } else {\n      throw new MarionetteError({\n        name: 'InvalidChildViewError',\n        message: '\"childView\" must be a view class or a function that returns a view class'\n      });\n    }\n\n  },\n\n  // Return the serialized model\n  serializeData() {\n    return this.serializeModel();\n  },\n\n  // Renders the model and the collection.\n  render() {\n    this._ensureViewIsIntact();\n    this._isRendering = true;\n    this.resetChildViewContainer();\n\n    this.triggerMethod('before:render', this);\n\n    this._renderTemplate();\n    this.bindUIElements();\n    this.renderChildren();\n\n    this._isRendering = false;\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n    return this;\n  },\n\n  renderChildren() {\n    if (this._isRendered || this._isRendering) {\n      CollectionView.prototype._renderChildren.call(this);\n    }\n  },\n\n  // You might need to override this if you've overridden attachHtml\n  attachBuffer(compositeView, buffer) {\n    const $container = this.getChildViewContainer(compositeView);\n    $container.append(buffer);\n  },\n\n  // Internal method. Append a view to the end of the $el.\n  // Overidden from CollectionView to ensure view is appended to\n  // childViewContainer\n  _insertAfter(childView) {\n    const $container = this.getChildViewContainer(this, childView);\n    $container.append(childView.el);\n  },\n\n  // Internal method. Append reordered childView'.\n  // Overidden from CollectionView to ensure reordered views\n  // are appended to childViewContainer\n  _appendReorderedChildren(children) {\n    const $container = this.getChildViewContainer(this);\n    $container.append(children);\n  },\n\n  // Internal method to ensure an `$childViewContainer` exists, for the\n  // `attachHtml` method to use.\n  getChildViewContainer(containerView, childView) {\n    if (!!containerView.$childViewContainer) {\n      return containerView.$childViewContainer;\n    }\n\n    let container;\n    const childViewContainer = containerView.childViewContainer;\n    if (childViewContainer) {\n\n      const selector = _.result(containerView, 'childViewContainer');\n\n      if (selector.charAt(0) === '@' && containerView.ui) {\n        container = containerView.ui[selector.substr(4)];\n      } else {\n        container = containerView.$(selector);\n      }\n\n      if (container.length <= 0) {\n        throw new MarionetteError({\n          name: 'ChildViewContainerMissingError',\n          message: 'The specified \"childViewContainer\" was not found: ' + containerView.childViewContainer\n        });\n      }\n\n    } else {\n      container = containerView.$el;\n    }\n\n    containerView.$childViewContainer = container;\n    return container;\n  },\n\n  // Internal method to reset the `$childViewContainer` on render\n  resetChildViewContainer() {\n    if (this.$childViewContainer) {\n      this.$childViewContainer = undefined;\n    }\n  }\n});\n\n// To prevent duplication but allow the best View organization\n// Certain View methods are mixed directly into the deprecated CompositeView\nconst MixinFromView = _.pick(View.prototype, 'serializeModel', 'getTemplate', '_renderTemplate', 'mixinTemplateContext', 'attachElContent');\n_.extend(CompositeView.prototype, MixinFromView);\n\nexport default CompositeView;\n","// Behavior\n// --------\n\n// A Behavior is an isolated set of DOM /\n// user interactions that can be mixed into any View.\n// Behaviors allow you to blackbox View specific interactions\n// into portable logical chunks, keeping your views simple and your code DRY.\n\nimport _                  from 'underscore';\nimport MarionetteObject   from './object';\nimport DelegateEntityEventsMixin      from './mixins/delegate-entity-events';\nimport TriggersMixin      from './mixins/triggers';\nimport UIMixin            from './mixins/ui';\nimport getUniqueEventName from './utils/getUniqueEventName';\n\nconst ClassOptions = [\n  'collectionEvents',\n  'events',\n  'modelEvents',\n  'triggers',\n  'ui'\n];\n\nvar Behavior = MarionetteObject.extend({\n  cidPrefix: 'mnb',\n\n  constructor: function(options, view) {\n    // Setup reference to the view.\n    // this comes in handle when a behavior\n    // wants to directly talk up the chain\n    // to the view.\n    this.view = view;\n    this.defaults = _.clone(_.result(this, 'defaults', {}));\n    this._setOptions(this.defaults, options);\n    this.mergeOptions(this.options, ClassOptions);\n\n    // Construct an internal UI hash using\n    // the behaviors UI hash and then the view UI hash.\n    // This allows the user to use UI hash elements\n    // defined in the parent view as well as those\n    // defined in the given behavior.\n    // This order will help the reuse and share of a behavior\n    // between multiple views, while letting a view override a\n    // selector under an UI key.\n    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui'));\n\n    MarionetteObject.apply(this, arguments);\n  },\n\n  // proxy behavior $ method to the view\n  // this is useful for doing jquery DOM lookups\n  // scoped to behaviors view.\n  $: function() {\n    return this.view.$.apply(this.view, arguments);\n  },\n\n  // Stops the behavior from listening to events.\n  // Overrides Object#destroy to prevent additional events from being triggered.\n  destroy: function() {\n    this.stopListening();\n\n    return this;\n  },\n\n  proxyViewProperties: function() {\n    this.$el = this.view.$el;\n    this.el = this.view.el;\n\n    return this;\n  },\n\n  bindUIElements: function() {\n    this._bindUIElements();\n\n    return this;\n  },\n\n  unbindUIElements: function() {\n    this._unbindUIElements();\n\n    return this;\n  },\n\n  getUI: function(name) {\n    this.view._ensureViewIsIntact();\n    return this._getUI(name);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents: function() {\n    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  undelegateEntityEvents: function() {\n    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  getEvents: function() {\n    // Normalize behavior events hash to allow\n    // a user to use the @ui. syntax.\n    var behaviorEvents = this.normalizeUIKeys(_.result(this, 'events'));\n\n    // binds the handler to the behavior and builds a unique eventName\n    return _.reduce(behaviorEvents, function(events, behaviorHandler, key) {\n      if (!_.isFunction(behaviorHandler)) {\n        behaviorHandler = this[behaviorHandler];\n      }\n      if (!behaviorHandler) { return; }\n      key = getUniqueEventName(key);\n      events[key] = _.bind(behaviorHandler, this);\n      return events;\n    } , {}, this);\n  },\n\n  // Internal method to build all trigger handlers for a given behavior\n  getTriggers: function() {\n    if (!this.triggers) { return; }\n\n    // Normalize behavior triggers hash to allow\n    // a user to use the @ui. syntax.\n    var behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    return this._getViewTriggers(this.view, behaviorTriggers);\n  }\n\n});\n\n_.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\nexport default Behavior;\n","// Application\n// -----------\nimport _                from 'underscore';\nimport MarionetteObject from './object';\nimport Region           from './region';\n\nconst ClassOptions = [\n  'region',\n  'regionClass'\n];\n\n// A container for a Marionette application.\nconst Application = MarionetteObject.extend({\n  cidPrefix: 'mna',\n\n  constructor: function(options) {\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    this._initRegion();\n\n    MarionetteObject.prototype.constructor.apply(this, arguments);\n  },\n\n  regionClass: Region,\n\n  _initRegion: function(options) {\n    var region = this.region;\n    var RegionClass = this.regionClass;\n\n    // if the region is a string expect an el or selector\n    // and instantiate a region\n    if (_.isString(region)) {\n      this._region = new RegionClass({\n        el: region\n      });\n      return;\n    }\n\n    this._region = region;\n  },\n\n  getRegion: function() {\n    return this._region;\n  },\n\n  showView: function(view, ...args) {\n    var region = this.getRegion();\n    return region.show(view, ...args);\n  },\n\n  getView: function() {\n    return this.getRegion().currentView;\n  },\n\n  // kick off all of the application's processes.\n  start: function(options) {\n    this.triggerMethod('before:start', this, options);\n    this.triggerMethod('start', this, options);\n    return this;\n  }\n\n});\n\nexport default Application;\n","// App Router\n// ----------\n\n// Reduce the boilerplate code of handling route events\n// and then calling a single method on another object,\n// called a controller.\n// Have your routers configured to call the method on\n// your controller, directly.\n//\n// Configure an AppRouter with `appRoutes`.\n//\n// App routers can only take one `controller` object.\n// It is recommended that you divide your controller\n// objects in to smaller pieces of related functionality\n// and have multiple routers / controllers, instead of\n// just one giant router and controller.\n//\n// You can also add standard routes to an AppRouter.\n\nimport Backbone                from 'backbone';\nimport _                       from 'underscore';\nimport MarionetteError         from './error';\nimport CommonMixin             from './mixins/common';\nimport { triggerMethod }       from './trigger-method';\n\nconst ClassOptions = [\n  'appRoutes',\n  'controller'\n];\n\nconst AppRouter = Backbone.Router.extend({\n\n  constructor: function(options) {\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    Backbone.Router.apply(this, arguments);\n\n    var appRoutes = this.appRoutes;\n    var controller = this._getController();\n    this.processAppRoutes(controller, appRoutes);\n    this.on('route', this._processOnRoute, this);\n  },\n\n  // Similar to route method on a Backbone Router but\n  // method is called on the controller\n  appRoute: function(route, methodName) {\n    var controller = this._getController();\n    this._addAppRoute(controller, route, methodName);\n    return this;\n  },\n\n  // process the route event and trigger the onRoute\n  // method call, if it exists\n  _processOnRoute: function(routeName, routeArgs) {\n    // make sure an onRoute before trying to call it\n    if (_.isFunction(this.onRoute)) {\n      // find the path that matches the current route\n      var routePath = _.invert(this.appRoutes)[routeName];\n      this.onRoute(routeName, routePath, routeArgs);\n    }\n  },\n\n  // Internal method to process the `appRoutes` for the\n  // router, and turn them in to routes that trigger the\n  // specified method on the specified `controller`.\n  processAppRoutes: function(controller, appRoutes) {\n    if (!appRoutes) { return this; }\n\n    var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n\n    _.each(routeNames, route => {\n      this._addAppRoute(controller, route, appRoutes[route]);\n    });\n\n    return this;\n  },\n\n  _getController: function() {\n    return this.controller;\n  },\n\n  _addAppRoute: function(controller, route, methodName) {\n    var method = controller[methodName];\n\n    if (!method) {\n      throw new MarionetteError('Method \"' + methodName + '\" was not found on the controller');\n    }\n\n    this.route(route, methodName, _.bind(method, controller));\n  },\n\n  triggerMethod: triggerMethod\n});\n\n_.extend(AppRouter.prototype, CommonMixin);\n\nexport default AppRouter;\n","import Backbone           from 'backbone';\nimport {version}          from '../package.json';\n\nimport proxy              from './utils/_proxy';\nimport extend             from './utils/extend';\nimport isNodeAttached     from './utils/isNodeAttached';\nimport mergeOptions       from './utils/mergeOptions';\nimport getOption          from './utils/getOption';\nimport normalizeMethods   from './utils/normalizeMethods';\nimport deprecate          from './utils/deprecate';\n\nimport monitorViewEvents  from './monitor-view-events';\nimport MarionetteObject   from './object';\nimport Renderer           from './renderer';\nimport TemplateCache      from './template-cache';\nimport View               from './view';\nimport CollectionView     from './collection-view';\nimport CompositeView      from './composite-view';\nimport Behavior           from './behavior';\nimport Region             from './region';\nimport Application        from './application';\nimport AppRouter          from './app-router';\nimport MarionetteError    from './error';\n\nimport behaviorsLookup    from './config/behaviors-lookup';\n\nimport {\n  FEATURES,\n  isEnabled,\n  setEnabled\n} from './config/features';\n\nimport {\n  bindEntityEvents,\n  unbindEntityEvents\n} from './bind-entity-events';\n\nimport {\n  bindRadioRequests,\n  unbindRadioRequests\n} from './bind-radio-requests';\n\nimport {\n  triggerMethod,\n  triggerMethodOn\n} from './trigger-method';\n\nvar previousMarionette = Backbone.Marionette;\nvar Marionette = Backbone.Marionette = {};\n\n// This allows you to run multiple instances of Marionette on the same\n// webapp. After loading the new version, call `noConflict()` to\n// get a reference to it. At the same time the old version will be\n// returned to Backbone.Marionette.\nMarionette.noConflict = function() {\n  Backbone.Marionette = previousMarionette;\n  return this;\n};\n\n// Utilities\nMarionette.bindEntityEvents = proxy(bindEntityEvents);\nMarionette.unbindEntityEvents = proxy(unbindEntityEvents);\nMarionette.bindRadioEvents = proxy(bindEntityEvents);\nMarionette.unbindRadioEvents = proxy(unbindEntityEvents);\nMarionette.bindRadioRequests = proxy(bindRadioRequests);\nMarionette.unbindRadioRequests = proxy(unbindRadioRequests);\nMarionette.mergeOptions = proxy(mergeOptions);\nMarionette.getOption = proxy(getOption);\nMarionette.normalizeMethods = proxy(normalizeMethods);\nMarionette.extend = extend;\nMarionette.isNodeAttached = isNodeAttached;\nMarionette.deprecate = deprecate;\nMarionette.triggerMethod = proxy(triggerMethod);\nMarionette.triggerMethodOn = triggerMethodOn;\nMarionette.isEnabled = isEnabled;\nMarionette.setEnabled = setEnabled;\nMarionette.monitorViewEvents = monitorViewEvents;\n\nMarionette.Behaviors = {};\nMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\n\n// Classes\nMarionette.Application = Application;\nMarionette.AppRouter = AppRouter;\nMarionette.Renderer = Renderer;\nMarionette.TemplateCache = TemplateCache;\nMarionette.View = View;\nMarionette.CollectionView = CollectionView;\nMarionette.CompositeView = CompositeView;\nMarionette.Behavior = Behavior;\nMarionette.Region = Region;\nMarionette.Error = MarionetteError;\nMarionette.Object = MarionetteObject;\n\n// Configuration\nMarionette.DEV_MODE = false;\nMarionette.FEATURES = FEATURES;\nMarionette.VERSION = version;\n\nexport default Marionette;\n"],"sourceRoot":"/source/"}